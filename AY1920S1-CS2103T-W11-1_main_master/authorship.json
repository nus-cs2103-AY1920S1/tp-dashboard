[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d AlgoBase"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W11-1/main[image:https://travis-ci.org/AY1920S1-CS2103T-W11-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-W11-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-W11-1/main/badge.svg?branch\u003dmaster\u0026service\u003dgithub[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "https://app.netlify.com/sites/algobase/deploys[image:https://img.shields.io/netlify/05fde8a9-d24f-4a79-972e-0e6ea1ceb8a5?logo\u003dnetlify[Netlify Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W11-1/main/blob/master/LICENSE[image:https://img.shields.io/badge/license-MIT-blue.svg[MIT License]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "image::docs/images/Ui.png[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Technical interviews are hard. Unless you are extraordinarily gifted, you will likely have to do tonnes of practice questions to ace them. And there are so many practice websites to choose from - Leetcode, Kattis and UVa, just to name a few. Wouldn\u0027t it be nice if you could just consolidate all those questions into a single platform? Introducing AlgoBase (AB), a one stop desktop application designed for managing algorithm problems! AlgoBase can let you establish and modify your own training plan for algorithm problems flexibly and it can save several training plans at the same time on your local storage!  Also, you can use diverse tags and search to manage your questions and training plans conveniently. More importantly, AlgoBase is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ALgoBase can get your problem management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* We would like to acknowledge the original source of the code, AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 5,
      "tiuweehan": 3,
      "-": 21
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "mainClassName \u003d \u0027seedu.algobase.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    archiveName \u003d \u0027algobase.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \u0027site-name\u0027: \u0027AlgoBase\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-W11-1/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "LuWenQ": 2,
      "-": 150
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AlgoBase was developed by Team https://github.com/orgs/AY1920S1-CS2103T-W11-1/people[Team CS2103T-W11-1]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Prof. Damith C. Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Lu Wenqi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::luwenq.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "{empty}[http://github.com/LuWenQ[github]] [\u003c\u003cluwenq#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Responsibilities: Integration + Testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d She Jiayu"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::jiayushe.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "{empty}[http://github.com/jiayushe[github]] [\u003c\u003cjiayushe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Responsibilities: Code Quality + In charge of Storage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Tan Yuanhong"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::le0tan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "{empty}[http://github.com/le0tan[github]] [\u003c\u003cle0tan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Responsibilities: Scheduling and Tracking + In charge of Models"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Tiu Wee Han"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::tiuweehan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "{empty}[http://github.com/tiuweehan[github]] [\u003c\u003ctiuweehan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Responsibilities: Deliverables and Deadlines + In charge of UI"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Yu Chenghui"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::seris370.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "{empty}[http://github.com/Seris370[github]] [\u003c\u003cseris370#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Responsibilities: Documentation + In charge of Logic"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "tiuweehan": 21,
      "-": 41
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-W11-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Email us* : You can also reach us at `weehan [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d AlgoBase - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W11-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "By: `Team CS2103T-W11-1`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "//@@author jiayushe"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/algobase/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g.`CommandBox`, `ResultDisplay`, `DetailsTabPane`, `DisplayTabPane`, `TaskManagementPane`, `StatusBarFooter` etc."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "link:{repoURL}/src/main/java/seedu/algobase/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  `Logic` uses the `AlgoBaseParser` class to parse the user command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a problem)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "//@@author le0tan"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::design/model/ModelClassDiagram.png[width\u003d\"65%\"]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/algobase/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* stores the AlgoBase data."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* exposes unmodifiable `ObservableList\u003cProblem\u003e`, `ObservableList\u003cTag\u003e`, `ObservableList\u003cPlan\u003e`, `ObservableList\u003cTask\u003e`, `ObservableList\u003cProblemSearchRule\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": "We organize different data classes into packages (e.g. `Problem`), inside which we provide a collection class of that data object (e.g. `UniqueProblemList`) so that `AlgoBase` can manage these data objects without knowing the details of each data class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Structure of the Problem Package"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::design/model/ProblemPackageDiagram.png[width\u003d\"75%\"]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Structure of the Plan Package"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::design/model/PlanPackageDiagram.png[width\u003d\"50%\"]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Structure of the Tag Package"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::design/model/TagPackageDiagram.png[width\u003d\"30%\"]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Structure of the Task Package"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::design/model/TaskPackageDiagram.png[width\u003d\"30%\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Structure of the ProblemSearchRule Package"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::design/model/ProblemSearchRulePackageDiagram.png[width\u003d\"60%\"]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Structure of the PlanSearchRule Package"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::design/model/PlanSearchRulePackageDiagram.png[width\u003d\u002760%\u0027]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "//@@author jiayushe"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/algobase/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* can store `UserPref` objects in json format."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* can retrieve `UserPref` objects from json format."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* can store the AlgoBase app data including `GuiState`, `Plan`, `Problem`, `ProblemSearchRule`, `Tag`, `Task` objects in relational manner in json format."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* can retrieve `GuiState`, `Plan`, `Problem`, `ProblemSearchRule`, `Tag`, `Task` objects from json format."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Classes used by multiple components are in the `seedu.algobase.commons` package."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "It contains utility files for configuration `ConfigUtil`, file handling `FileUtil`,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JSON storage `JsonUtil`, string manipulation `StringUtil` and others including `AppUtil` and `CollectionUtil`."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "//@@author jiayushe"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "// tag::task[]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Task Management Feature"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "As a algorithmic problem management tool, one of the most important features will be manage tasks that have been done"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "and are to be done."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "This section will describe in details the current implementation and design considerations of"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "the task management feature."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "The task management feature mainly involves six main behaviours:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `AlgoBase#addTask()` - create a new task for a problem and add it to a specified plan."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `AlgoBase#copyTask()` - copy a task from one plan to another."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `AlgoBase#deleteTask()` - delete an existing task from a specified plan."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `AlgoBase#doneTask()` - mark a task as done in a specified plan."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `AlgoBase#editTask()` - edit the due date of a task in a specified plan."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `AlgoBase#moveTask()` - move a task from one plan to another."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `AlgoBase#undoneTask()` - mark a task as undone in a specified plan."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `AlgoBase#setPlan()` - set a task as the current plan in main display."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Given below is an example usage scenario and how the mechanism for adding tasks behaves at each step."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `AddTask` command:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".Activity Diagram for the Execution of `AddTaskCommand`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "image::task/AddTaskCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Step 2. AlgoBase displays a list of existing problems and plans in the UI."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Step 3. The user executes `addtask plan/1 prob/1` to add the problem with index 1 in the list to the plan with index 1."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "The `AddTask` command calls `Plan#updateTasks` to create a new plan from the original plan with this additional task."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "After that, `Model#setPlan` is called to replace the original plan with the updated plan in the `PlanList`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "stored in `AlgoBase`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "The following sequence diagram shows how the `addtask` operation works:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".Sequence Diagram for the Execution of `AddTaskCommand`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "image::task/AddTaskSequenceDiagram.png[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the task commands."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Alternative 1 (current choice): Use a `HashSet` to store tasks in a plan."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** Pros: Duplicate tasks can be checked easily."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** Cons: Harder to identify tasks by index."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Alternative 2: Use an `ArrayList` to store tasks in a plan."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** Pros: Tasks can be identified by index easily."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** Cons: Harder to check for duplicates."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to store problem details within tasks to support the task commands."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Alternative 1 (current choice): Store a problem object in each task."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** Pros: Changes in problem details will be reflected in the relevant tasks as well."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** Cons: Relational storage is required to keep track of this relationship."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Alternative 2: Copy all problem details and store as separate fields in each task."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** Pros: No need to implement relational storage. There will be less coupling between problems and tasks as well."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** Cons: Changes in problem details will not be reflected in the relevant tasks."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Relational storage to support the task commands."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Alternative 1 (current choice): Use an additional `id` field to identify problems and tasks."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** Pros: Id is immutable over time."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** Cons: An additional field is needed for the models."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Alternative 2: Use object hash to identify problems and tasks."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** Pros: No need to store another additional field in the models."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** Cons: Object hash can change over time."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "// end::task[]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "//@@author LuWenQ"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003d\u003d\u003d Tag feature"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "The tag mechanism is facilitated by UniqueTagList. It creates a list of Tag, stored internally as an uniqueTagList. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "* `AlgoBase#addTag()` - create a new tag in AlgoBase\u0027s uniqueTagList in the algobase history."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "* `AlgoBase#deleteTag()` - delete a current tag which have already in the uniqueTagList."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "* `AlgoBase#listTag()` - show the tags in the uniqueTagList in the algobase GUI for users"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "* `AlgoBase#editTag()` - edit the current tag which have already been in the uniqueTagList"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "These operations are exposed in the Model interface as `Model#addTag()`, `Model#deleteTag()`, `Model#listTag()` and `Model#editTag()` respectively."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Given below is an example usage scenario and how the tag mechanism behaves at each step."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Step1. The user launches the application for the first time. The UniqueTagList will be initialized with the initial algobase state"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Step 2. The user executes `addtag t/easy` to add a tag named [easy] which have not applied in any problems. The addtag command calls Model#addtag(), causing the taglist added a tag after the ‘addtag t/easy’ command executes to be saved in the uniqueTagList."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "The following sequence diagram shows how the `deletetag` operation works:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ".Sequence Diagram for `AddTagCommand`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "image::AddTagSequenceDiagram.png[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Step 3. The user decides to execute the command `listtag` to show a tag list in the GUI of algobase. The `listtag` command calls Model#listtag(), causing the taglist shows the current components of uniqueTagList. Commands that do not modify the address book, such as `listtag`, will not call `Model#addTag()`, `Model#deleteTag()` or `Model#editTag()`. Thus the `uniqueTagList` remains unchanged."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Step 4.The user executes `edittag 1 t/hard` to edit the current tag [easy] to [hard] in the `uniqueTagList`. The `edittag 1 t/hard`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Command executes `edittag`, causing the taglist find the first tag in the list and change tag [easy] into [hard] and change all [easy] tag into [hard] in all problems."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Step 5. The user executes `deletetag t/hard` to delete the current tag [easy] in the uniqueTagList. The `deletetag t/hard` command executes `deletetag`, causing the taglist delete the [hard] tag in uniqueTagList and [hard] tag in all problems."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "(diagram)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new tag modifying command"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ".Activity Diagram for tag commands"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "image::TagActivityDiagram.png[]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the tag commands."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "* Alternative 1 (current choice): Use a list in current AlgoBase to save the content of different tags which used in tagging different problems. While problems create new tags for problems, it will also add into tag-list in AlgoBase. While the tag in problems changes, the tag in tag-list will not change and add a new tag into the tag-list in AlgoBase. While modifying tag in tag-list will change the tag for all related problem."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "** Pros: Users can manage the tags conveniently."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "** Cons: May lead to many tags do not combine with problems."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "* Alternative 2: Simply keep tags as a part of problems. While execute the tag command will search for all tags in problems for every times it execute."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "** Pros: No need to save the tag separately in the storage, all tags are under problems."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "** Cons: Difficult to manage tags in different problems. Waste time for computer to execute."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "le0tan"
        },
        "content": "//@@author le0tan"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "le0tan"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d Find Problem Feature"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Since AlgoBase is a management tool for algorithmic questions, the search functionality is crucial to the user’s experience with AlgoBase. For instance, the planning feature heavily relies on `find` command to determine the exact set of problems the user wants to include in a training plan."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "le0tan"
        },
        "content": "This section will describe in detail the current implementation and design considerations of the find problem feature (i.e. search feature) of AlgoBase."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "le0tan"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the find command:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Activity Diagram for the Execution of `find` Command"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::find/FindCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "le0tan"
        },
        "content": "The find problem feature mainly involves three parts:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "le0tan"
        },
        "content": "1. validating and parsing user input"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "le0tan"
        },
        "content": "2. creating a filtering predicate from user’s search restrictions"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "le0tan"
        },
        "content": "3. update the displayed problem list with the filtering predicate."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "le0tan"
        },
        "content": "The find problem feature is facilitated by the following classes:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `FindProblemDescriptor`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "le0tan"
        },
        "content": "+"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "le0tan"
        },
        "content": "It stores predicates that are needed to describe a `FindCommand`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "le0tan"
        },
        "content": "+"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Additionally, it implements the following operation(s):"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "le0tan"
        },
        "content": "+"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** `FindProblemDescriptor#isAnyFieldProvided()` - Determines if there is at least one search restriction included in this instance of `FindProblemDescriptor`."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** `FindProblemDescriptor#equals(...)` - Two instances of `FindProblemDescriptor` are equal if and only if all of their predicates are equal."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `FindCommandParser`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "le0tan"
        },
        "content": "It validates and parses user input to an instance of `FindCommand`."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "le0tan"
        },
        "content": "If the user provides difficulty range as one of the search restrictions, `FindCommandParser` expects the format `LOWER_BOUND \\\u003c\u003d difficulty \\\u003c\u003d UPPER_BOUND` while `LOWER_BOUND` and `UPPER_BOUND` are valid strings for doubles (i.e. parsable by `Double.parseDouble(...)`)."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `FindCommand`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "le0tan"
        },
        "content": "+"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "le0tan"
        },
        "content": "It creates and stores the `predicate` from an instance of `FindProblemDescriptor`. `predicate` is used to perform the filtering of the displayed problem list when the command is executed."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "le0tan"
        },
        "content": "+"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "le0tan"
        },
        "content": "`predicate` returns true only when the provided problem fulfills all restrictions described by the provided instance of `FindProblemDescriptor`."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "le0tan"
        },
        "content": "+"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Additionally, it implements the following operation(s):"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "le0tan"
        },
        "content": "+"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** `FindCommand#execute(...)` - This method overrides `Command#execute(...)`. It filters problems in `filteredProblemList` in `model` with `predicate`."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** `FindCommand#equals(...)` - Two instances of `FindCommand` are equal if and only if their `predicate` are equal."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Class Diagram of the Find Feature"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::find/FindCommandClassDiagram.png[width\u003d\"75%\"]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Predicates that implements interface `Predicate\u003cProblem\u003e`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "le0tan"
        },
        "content": "+"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "le0tan"
        },
        "content": "These are classes that describes whether an instance of `Problem` is considered a match under a certain field with provided keyword(s)."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "le0tan"
        },
        "content": "+"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** `NameContainsKeywordsPredicate`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "le0tan"
        },
        "content": "*** It ignores case."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "le0tan"
        },
        "content": "*** It returns true as long as one of the keywords appear in the name as a word. (“As a word” means the matching is done word by word. For instance, `hello` doesn’t match `helloworld`.)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** `AuthorMatchesKeywordPredicate`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "le0tan"
        },
        "content": "*** It is case sensitive and matches the entire author string (i.e. requires an exact match)."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** `DescriptionContainsKeywordsPredicate`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "le0tan"
        },
        "content": "*** It ignores case."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "le0tan"
        },
        "content": "*** It returns true only when all of the keywords appear in the description as a word."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** `SourceMatchesKeywordPredicate`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "le0tan"
        },
        "content": "*** It requires an exact match."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** `DifficultyIsInRangePredicate`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "le0tan"
        },
        "content": "*** It matches problems with LOWER_BOUND \\\u003c\u003d difficulty \\\u003c\u003d UPPER_BOUND"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** `TagIncludesKeywordsPredicate`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "le0tan"
        },
        "content": "*** Each keyword will be considered as a tag, and two tags are considered equal only when their names are exactly the same."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "le0tan"
        },
        "content": "*** It returns true when the provided tags are a subset of the tags of the provided problem."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Class Diagram for Predicates in the Find Feature"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::find/PredicateClassDiagram.png[width\u003d\"40%\"]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Given below is an example usage scenario and how the find problem mechanism behaves at each step."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Step 1. The user executes `find t/recursion diff/2.0-4.0` to find a problem with a tag “recursion” and difficulty between 2.0 and 4.0."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Step 2. `FindCommandParser` processes the user input and returns a `FindCommand` instance with the information of user’s search restrictions."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "le0tan"
        },
        "content": "If no valid search restriction is provided by the user, `FindCommandParser` will throw a parsing exception, which is handled and displayed to the user."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Step 3. `LogicManager` invokes `execute()` method of the returned `FindCommand`. `FindCommand` updates the problem list with user’s search restrictions."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Sequence Diagram for the Execution of `find` Command"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::find/FindCommandSequenceDiagram.png[width\u003d\"70%\"]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to update the displayed problem list in the UI"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* **Alternative 1 (current choice):** Let UI display problems in a `FilteredList\u003cProblem\u003e` and update the displayed problem by calling `setPredicate` on the `FilteredList`."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Pros: Provides good protection over unexpected changes on the displayed problem list."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Cons: Need to write a complex logic to generate one predicate out of multiple search constraints."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* **Alternative 2:** Let UI displays problems in an `ObservableList\u003cProblem\u003e` and update the list directly."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Pros: The implementation would be more straightforward as the logic can update the displayed list directly."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Cons: Leaves room for potential unexpected changes on the displayed problem list as the observable list is open to any kind of operation."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to deal with the case where no search restriction is provided (i.e. user types in `find` with no arguments given)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* **Alternative 1 (current choice):** Treat it as an exception and notify the user to provide at least one constraint."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Pros: Makes the meaning of `find` command clear - you can’t search for problems without giving any conditions."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Cons: Has to check there is at least one predicate provided, making the implementation a bit more complicated."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* **Alternative 2:** Treat it as no restriction (i.e. `find` is equivalent to `list` in this case)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Pros: Easier implementation (if all predicates are always-true predicates, using `.and` method to chain them together would naturally result in an always-true predicate)."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Cons: Confusing definition of a search function."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to make predicates optional (i.e. user doesn’t have to provide restrictions for all searchable fields)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* **Alternative 1 (current choice):** Use `FindProblemDescriptor` in which the getter for the predicate returns `Optional\u003cPredicate\u003e`."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Pros: If the parser doesn’t receive keyword(s) for a specific field, it simply doesn’t call the descriptor’s setter for that field. It doesn’t need to deal with `null`, and `null` is dealt gracefully using `Optional.ofNullable(...)`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Cons: Rather troublesome implementation of the descriptor."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* **Altermative 2:** Store predicates in `FindProblemCommand` and check for not-provided predicates by comparing it with `null`."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Pros: More straightforward implementation."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Cons: If we are to add more predicates, it’s more likely that we forget to check `null` value of the new predicate."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "le0tan"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "le0tan"
        },
        "content": "// tag::savefindrule[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d Save Find Rules Feature"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "le0tan"
        },
        "content": "AlgoBase provides many ways to organizing your problems including tags and plans. However, both organizing features require persistent user involvement - if the user added a new problem belonging to a category, the user needs to manually assign a tag to the problem or add the problem to a plan. Since AlgoBase\u0027s `find` command enables the user to filter problems with great flexibility, we allow them to save certain find rules so that they can re-apply these rules to quickly locate problems of their need."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "le0tan"
        },
        "content": "This section will describe in detail the current implementation and design considerations of the save find rules (or problem search rules) feature of AlgoBase."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "le0tan"
        },
        "content": "The following activity diagram summarizes what happens when a user executes `addfindrule` command:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Activity Diagram for the Execution of `addfindrule` Command"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::savefindrule/AddFindRuleActivityDiagram.png[width\u003d\"70%\"]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "le0tan"
        },
        "content": "The save find rules feature is facilitated by the following classes:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `ProblemSearchRule` +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "le0tan"
        },
        "content": "It stores both the `Name` of the find rule and all predicates included in this find rule. A `ProblemSearchRule` doesn\u0027t have to include all possible predicates as the user may not provide all of them. Missing predicates will be stored as `null` in this class."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `UniqueFindRuleList` +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "le0tan"
        },
        "content": "It stores the find rules and makes sure that every find rule in this list has a unique name."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** `UniqueFindRuleList` stores a `ObservableList\u003cProblemSearchRule\u003e` for UI purposes."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Except for `ProblemSearchRule`, we refer to these rules as `FindRule` in all other places. This is to prevent possible naming conflicts if AlgoBase is to support saving find rules on other items (e.g. Plans, etc.). `FindRule` corresponds to `FindCommand`. Thus, if you are to implement saving find plan rules, name them as `PlanSearchRule`, `AddFindPlanRuleCommand`, `UniqueFindPlanRuleList`, etc."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Under the category of save find rules feature, we have the following `Command` classes and their corresponding `Parser` classes:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `AddFindRuleCommand`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `DeleteFindRuleCommand`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `ApplyCommand` +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "le0tan"
        },
        "content": "It applies a problem-finding rule by specifying the index of the displayed find rule."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Since these commands share similar implementations, we will only take `AddFindRuleCommand` as an example since it\u0027s the most complicated one among the three."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `addfindrule` feature"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "le0tan"
        },
        "content": "The `addfindrule` feature is facilitated by `AddFindRuleCommand` and `AddFindRuleCommandParser` class."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Class Diagram for Add Find Rule Feature"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::savefindrule/AddFindRuleClassDiagram.png[width\u003d\"70%\"]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "le0tan"
        },
        "content": "The sequence diagram below shows the high-level abstraction of how AlgoBase processes the request when user types in `addfindrule rule1 n/Sequences`:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".High-level Sequence Diagram for the Execution of `addfindrule rule1 n/Sequences`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::savefindrule/HighLevelAddFindRuleSequenceDiagram.png[width\u003d\"70%\"]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "le0tan"
        },
        "content": "The sequence diagram below illustrates the interaction between the `Logic` and `Model` component when executing `AddFindRuleCommand`. Notice that the constructor for `AddFindRuleCommand` requires `Name` to be non-null and accepts null values for other predicates. Thus if the predicate is not present in the arguments, `AddFindRuleCommandParser` will pass null to the constructor of `AddFindRuleCommand`."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "le0tan"
        },
        "content": ".Sequence Diagram for the Execution of `addfindrule` Command"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "le0tan"
        },
        "content": "image::savefindrule/AddFindRuleSequenceDiagram.png[width\u003d\"70%\"]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: To implement `ProblemSearchRule` as a subclass of `FindProblemDescriptor` or implement it as a immutable concrete class."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Since AlgoBase is forked from AddressBook 3, it also inherits AB3\u0027s design choice on all data classes - they are all immutable classes with all fields being `final`. However, `ProblemSearchRule` is essentially saving the information of a command input, where the user may provide any number of predicates as the argument. We implement mutable `FindProblemDescriptor` to accommodate variable user inputs, now we have to consider whether to keep `ProblemSearchRule` immutable or not."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* **Alternative 1 (current choice):** `ProblemSearchRule` extends `FindProblemDescriptor` with an additional field `name`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Pros: Drastically reduces the amount of duplicate code as `ProblemSearchRule` shares most fields with `FindProblemDescriptor`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Cons: `ProblemSearchRule` as a data class is no longer immutable. We have to be careful not to call any setters it inherits from `FindProblemDescriptor`."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* **Alternative 2:** `ProblemSearchRule` as an individual class with immutable fields."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Pros: Provides good protection over unexpected changes to the data fields."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Cons: Lots of repeated code."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "le0tan"
        },
        "content": "// end::savefindrule[]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "le0tan"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "//@@author tiuweehan"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "// tag::switchTab[]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d GUI Enhancements"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "An intuitive GUI facilitates the overall user friendliness of the application. The user should be able to navigate around the application easily to facilitate a smooth experience using AlgoBase. Additionally, multitasking is important as a user may be tackling multiple algorithmic questions at a single time. One of the main enhancements that we introduced to the GUI is tabbing, which fulfils these 2 requirements."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "The state of the GUI is stored in a `GuiState` object. The `GuiState` object contains a `TabManager` object, which manages tab information such as the tabs that are open and the tabs that are currently selected."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "The information is linked to the `UI` through listeners. When the attributes of the `TabManager` object is updated, it triggers callback functions in the UI controllers that update the state of the UI displayed."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "The following commands facilitate the management of tabs:"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `AlgoBase#switchTab()` - Switch between tabs within a specified Tab pane."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `AlgoBase#openTab()` - Opens a new tab containing details of a model."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `AlgoBase#closeTab()` - Closes an existing tab."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "These operations are exposed in the `TabManager` class respectively as:"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `SwitchTab()`: `TabManager#setDisplayTabIndex` and `TabManager#setDetailsTabIndex`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `OpenTab()`: `TabManager#addTab`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `CloseTab()`: `TabManager#removeTab`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "The following Activity Diagrams illustrate what happens when the user executes a `SwitchTabCommand` or `OpenTabCommand`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::gui/SwitchTabCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "_Figure 1.1 Activity Diagram for the Execution of `switchtab` Command_"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::gui/OpenTabCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "_Figure 1.2 Activity Diagram for the Execution of `opentab` Command_"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Given below is an example usage scenario and how the tag mechanism behaves at each step."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::gui/SwitchTabsSequenceDiagram0.png[]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "_Figure 2.1 Sequence Diagram for instantiating a `SwitchCommand` object_"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Step 1: The user executes `switchtab t/display i/1` to switch to the first tab in the `display` tabpane."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Step 2: `SwitchTabCommandParser` processes the user input, retrieving the tab type (`display`) and the index (`1`)."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Step 3: These two attributes are passed into the constructor of a `SwitchTabCommand` and a corresponding `SwitchTabCommand` object is returned to the LogicManager"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::gui/SwitchTabsSequenceDiagram1.png[]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "_Figure 2.2 Sequence Diagram for updating the tab index in the TabManager_"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Step 4: `LogicManager` invokes `execute()` method of the returned `SwitchTabCommand`, which retrieves the TabManager from the `Model` object. The `setDisplayTabPaneIndex(1)` method is invoked with the index 1 that the `SwitchTabCommand` was instantiated with."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Step 5: Invoking this method updates the integer value in the `displayTabIndex` field (type `ObservableIntegerValue`) of the `TabManager`."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::gui/SwitchTabsSequenceDiagram2.png[]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "_Figure 3.3 Sequence Diagram for reflecting the tab changes_"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Step 6: A listener was added to the `displayTabIndex` field when the application was initialized. When a change in the value is detected, it triggers the `selectTab(1)` method with the value of the new index passed as an argument. This updates the selected tab in the UI."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::gui/SwitchTabsSequenceDiagram3.png[]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "_Figure 3.4 Sequence Diagram for storing new GUI state_"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Step 7: After the command is executed, the state of the GUI changes. This causes the `StorageManager` to save the modified GUI state as a new `JSON` file."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "This is done with the help of the `JsonSerializableGui`, `JsonSerializableTabManager` and `JsonSerializableTab` classes that are wrappers for the `GuiState`, `TabManager` and `TabData` classes."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "These wrapper classes can be converted into `JSON` format for storage without any data loss."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"33%,\u003c33%,\u003c33%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "|Aspect| Alternative 1 (Current Choice) | Alternative 2"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "| Implementation of Tab Logic |"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Implement Tab Logic separately within model and UI."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "**Pros**: Modularizes the logic and reduces the need for tighter coupling between model and UI"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "**Cons**: Multiple sources of truth and more modules to be implemented"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "|"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Implement Tab Logic as a singular module"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "**Pros**: Single source of truth for state of tabs"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "**Cons**: Increasing coupling between Model and UI, which in turn reduces testability"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "| How to update the tab in the UI |"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Using a listener to detect changes to state of tab"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "**Pros**: Reduces coupling between the `TabManager` class and the UI"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "**Cons**: As callback functions are utilized, it is not immediately obvious how changes in state of TabManager leads to a change in the UI"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "|"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Updating the UI synchronously"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "**Pros**: Execution is sequential and it is easier to keep track of the flow of the program."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "**Cons**: Increases coupling between the `TabManager` class and the UI and reduces testability."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "|"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "// end::switchTab[]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Seris370"
        },
        "content": "//@@author Seris370"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Seris370"
        },
        "content": "\u003d\u003d\u003d Training Plan Feature"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Training plan feature allows user to create customized training plans that consist of selected problems in AlgoBase. Users can record their progress by marking problems in plans as done."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Seris370"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Seris370"
        },
        "content": "The training plan mechanism is faciliated by `AlgoBase`. It supports the following operations:"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* `Algobase#addPlan()` -- Adds a new empty training plan to AlgoBase."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* `AlgoBase#setPlan()` -- Edits an existing training plan by specifying its number."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* `AlgoBase#removePlan()` -- Deletes a training plan by specifying its number."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* `AlgoBase#getPlanList()` -- Returns a list of plans in AlgoBase."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Given below is an example usage scenario and how the training plan behaves at each step."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Step 1. The user launches the application for the first time. The `AlgoBase` will be initialized with the initial empty state."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Step 2. The user switches to the plan tab and executes `addplan n/CS2040 d/past year questions start/2019-01-01 end/2019-05-04` command to add a new plan to AlgoBase. The `addplan` command calls `Model#addPlan()`, causing the modified state of AlgoBase after the `addplan` command executes to be saved in the `PlanList`."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Step 3. The user executes `listplan` to list all plans. The `listplan` command also calls `Model#updateFilteredPlanList()`. The plan `CS2040` is numbered `1` in the displayed list."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Step 4. The user finds out that the exam date of CS2040 has changed, and decides to change the end date by executing the `editplan 1 end/2019-05-05` command. The `editplan` command will call `Model#setPlan()`, which will replace the original plan with the modified plan in the `PlanList`."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Seris370"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Seris370"
        },
        "content": "The user can also add value for an empty field by executing `editplan` command if the field was not specified when adding the plan."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Step 5. The user then decides to execute the command `findplan start/2019-03-01 end/2019-03-31`. The `findplan` command constructs a `FindPlanDescriptor` and executes `Model#updateFilteredPlanList(FindPlanDescriptor)`. A list of plans in AlgoBase that has overlapping time range with specified starting date and end date will be displayed on the plan list panel."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Seris370"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Seris370"
        },
        "content": "If the user wants to find plans with overlapping time range, both the starting date and the end date should be specified and valid, or an error message will be displayed to inform the user that both fields should be present."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Step 6. The user executes `deleteplan 1`, which calls `Model#getFilteredPlanList()` and #Model#deletePlan`. The \u0027Model#getFilteredPlanList()\u0027 returns the last shown plan list, which is list of plans returns by the `findplan` command in step 4. Therefore, the first plan with overlapping time range is deleted."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Seris370"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Seris370"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure of TimeRange class"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* **Alternative 1 (current choice):** Abstract out a `TimeRange` class in package plansearchrule."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Seris370"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Seris370"
        },
        "content": "** Cons: Generating a `TimeRange` object in `findplan` command adds coupling."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* **Alternative 2:** Replace `startDate` and `endDate` fields in plans to a single field `TimeRange` ."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Seris370"
        },
        "content": "** Pros: More OOP (`startDate` and `endDate` are currently `LocalDate` objects)."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Seris370"
        },
        "content": "** Cons: We must ensure that the implementation complies with other date-related commands and storage of plans."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Seris370"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* To manage algorithmic problems and training plans faster than using Excel sheets"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |add a new problem |keep track of the problems for future usage"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |delete a problem |remove entries that I no longer need"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |find a problem by keyword |locate details of problems without having to go through the entire list"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* *` |user |do advanced search on problems |locate details of problems without having to go through the entire list"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* *` |user |do fuzzy search on problems |locate details of problems without having to go through the entire list"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |create custom tags |categorize problems via tags"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |add tags to problems |categorize problems via tags"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* *` |user |sort problems according to difficulty |locate problems easily"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* *` |user |add remarks to problems |have reference in the future"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |create plans containing problems |better prepare for interview"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |add tasks to a plan |better prepare for interview"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |mark tasks as done/undone within plans |keep track of progress within each plan"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |edit due dates of tasks |better manage progress for each plan"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |move tasks among plans |better manage progress for each plan"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |import database from \u003c\u003cjson,JSON\u003e\u003e files |easily transfer data from one computer to another"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |export data into \u003c\u003cjson,JSON\u003e\u003e format |easily transfer data from one computer to another"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* *` |advanced user |export data into CSV format |do some manipulation/processing on the data"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "(For all use cases below, the *System* is the `AlgoBase` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 1: Add Problems"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to add a new problem by entering the name of the problem, optionally specifying the description, author, weblink, source as well as any remarks or tags."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase adds a new problem with the provided details."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates successful addition of new problem."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase displays details of problem added."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that an existing name already exists."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that problem was not successfully added because the name already exists."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2b. AlgoBase detects that name is missing or format for some field(s) is invalid."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2b1. AlgoBase informs user that problem was not successfully added because the format is invalid."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 2: Edit Problems"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to edit an existing problem by entering the index, followed by fields that the user intends to edit (including name, description, weblink, author, source, remark, tag, etc.)."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase edits the problem using the provided details."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates successful edition of the existing problem."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase updates the UI with the updated problem."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the index is out of bounds."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that the edition is unsuccessful because the index is out of bounds."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2b. AlgoBase detects that no fields are provided."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2b1. AlgoBase informs user that nothing is updated."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 3: Delete Problems"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to delete an existing problem by entering index."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase deletes the problem from storage."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates successful deletion of the existing problem."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase updates the UI with the remaining problems."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the index is out of bounds."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that the deletion is unsuccessful because the index is out of bounds."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 4: List Problems"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Guarantees*"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "A list of existing problems will be displayed."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests for a list of all existing problems."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase retrieves all problems in storage."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase displays in the UI the list of problems stored in AlgoBase."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects no existing problems stored."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that there is no existing problems."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 5: Find Problems"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Guarantees*"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "A list of existing problems with matching keywords in specified fields will be displayed."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to find problems by specifying keywords in certain fields."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase retrieves all problems with matching keywords in specified fields from storage."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase displays in the UI the list of problems with matching keywords in specified fields."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that no keywords in any fields are specified."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** 2a1. AlgoBase informs user that at least one constraint should be provided."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 6: Sort Problems"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Guarantees*"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "A list of problems will be displayed in a specific order provided by user."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to sort a set of problems by specifying rules of ordering."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase sorts the problem list using the provided order."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase displays the set of questions in sorted order."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that no sort order is specified."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that no sort order is given."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 7: Add Tasks to Plan"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to add a new task by entering the index of the problem and index of the plan."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase creates a new task with the specified problem."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase adds the newly created task to the specified plan."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase indicates successful addition of new task to plan."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "5.  AlgoBase displays details of task added."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the index of problem is out of bounds."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that the addition is unsuccessful because the index of problem is out of bounds."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 3a. AlgoBase detects that the index of plan is out of bounds."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 3a1. AlgoBase informs user that the addition is unsuccessful because the index of plan is out of bounds."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 8: Copy Tasks between Plans"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to copy an existing task from one plan to another"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "by entering the index of the task and the indices of the plans involved."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase copies the specified task from the specified \"from\" plan to the \"to\" plan."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates that the existing task is copied successfully."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase displays list of tasks of the updated \"to\" plan."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the index of either plan is out of bounds."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that the update is unsuccessful because the index of plan is out of bounds."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2b. AlgoBase detects that the index of task is out of bounds."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2b1. AlgoBase informs user that the update is unsuccessful because the index of task is out of bounds."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2c. AlgoBase detects that task to be copied already exists in the \"to\" plan."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2c1. AlgoBase informs user that the update is unsuccessful because the task already exists."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 9: Delete Tasks from Plan"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to delete an existing task by entering the index of the plan and index of the task."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase deletes the specified task from the specified plan."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates successful deletion of the existing task."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase updates the UI with the remaining tasks in the plan."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. Similar to `2a` in Use Case 8."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2b. Similar to `2b` in Use Case 8."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 10: Edit Due Dates of Tasks"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to edit due date of an existing task"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "by entering the index of the plan, index of the task and new due date."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase edits the due date of the specified task in the specified plan."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates that the existing task is edited successfully."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase displays details of the task updated."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. Similar to `2a` in Use Case 8."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2b. Similar to `2b` in Use Case 8."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 11: Mark Tasks as Done in Plan"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to mark an existing task as done by entering the index of the plan and index of the task."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase marks the specified task as done in the specified plan."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates that the existing task is marked as done successfully."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase displays details of the task updated."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. Similar to `2a` in Use Case 8."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2b. Similar to `2b` in Use Case 8."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 12: Mark Tasks as Undone in Plan"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to mark an existing task as undone by entering the index of the plan and index of the task."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase marks the specified task as undone in the specified plan."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates that the existing task is marked as done successfully."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase displays details of the task updated."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. Similar to `2a` in Use Case 8."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2b. Similar `2b` in Use Case 8."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 13: Move Tasks between Plans"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to move an existing task from one plan to another"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "by entering the index of the task and the indices of the plans involved."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase moves the specified task from the specified \"from\" plan to the \"to\" plan."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates that the existing task is moved successfully."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase displays list of tasks of the updated \"to\" plan."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. Similar to `2a` in Use Case 8."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2b. Similar to `2b` in Use Case 8."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2c. Similar to `2c` in Use Case 8."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 14: Set Current Plan in Main Display"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to set a plan as the current plan in main display."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase sets the specified plan as the current plan."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates that the specified plan is successfully set as the current plan."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase displays updated current plan in main display."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. Same as `2a` in Use Case 9."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 15: Switch between View of Items"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to switch the current view of items to a different view of items."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase displays the list of items corresponding to that view."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the specified view of items does not exist."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "** 2a1. AlgoBase informs user that the specified view of items does not exist."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 16: See details of an item"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "1.  User requests to see the details of a specified item from the list of items."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "2.  AlgoBase displays the details of that item."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 17: Export AlgoBase data"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to export AlgoBase data to a specified path."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase exports AlgoBase data to a file name `algobase.json` in the specified location."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates that AlgoBase data are exported successfully."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the specified path is invalid."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that the export is unsuccessful because the path is invalid."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 18: Import AlgoBase data"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to import data from a specified file into AlgoBase."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase imports data from the specified file into AlgoBase."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates that the data are imported into AlgoBase successfully."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the specified file does not exist."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that the import is unsuccessful because the file path is invalid."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Every change is saved immediately and no manual saving is needed."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  A user with above average typing speed for regular Unix commands should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Should work on both `32-bit` and `64-bit` \u003c\u003cenvironment,environments\u003e\u003e."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Should be able to hold up to 1000 problems with \u003c\u003cresponse-time,response time\u003e\u003e less than 1 second for typical usage."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Should work without installation (i.e. portable)."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Should be for a single user i.e. (not a multi-user product)."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Storage file should be human interpretable and editable for someone who’s familiar with JSON."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Not required to store \u003c\u003csolutions,solutions to problems\u003e\u003e."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[[json]] JSON::"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JavaScript Object Notation"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[[environment]] Environment::"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "An execution environment offered by mainstream OSes as defined above"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[[response-time]] Response Time::"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "An execution environment offered by mainstream OSes as defined above"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[[solutions]] Solutions to Problems::"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Source code or executable that aims to solve the corresponding problem"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   Expected: Shows the GUI with a set of sample problems. The window size may not be optimum."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Deleting Problems"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ". Deleting a problem while all problems are listed"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".. Prerequisites: List all problems using the `list` command. Multiple problems in the list."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   Expected: First problem is deleted from the list. Details of the deleted problem shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   Expected: No problem is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Saving Data"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".. Delete the `data` folder in project root folder and launch AlgoBase. +"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   Expected: No errors shown. A new data file is created silently."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".. Delete some mandatory fields in the data file located at `data/algobase.json` and launch AlgoBase. +"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   Expected: Error details shown in the status message, indicating corrupted data file."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jiayushe": 551,
      "Seris370": 47,
      "le0tan": 226,
      "tiuweehan": 124,
      "LuWenQ": 48,
      "-": 208
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d AlgoBase - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W11-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "By: `Team CS2103T-W11-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase (AB) is for those who prefer to use a desktop app for managing algorithm problems. AlgoBase can let you establish and modify your own training plan for algorithm problems flexibly and it can save several training plans at the same time on your local storage!  Also, you can use diverse tags and search to manage your questions and training plans conveniently. More importantly, AlgoBase is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ALgoBase can get your problem management tasks done faster than traditional GUI apps. Interested? Jump to the Section 2, “Quick Start” to get started. Enjoy! :-))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".  Download the latest `algobase.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your AlgoBase application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "image::Ui.png[width\u003d\"80%\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will list all possible commands in the result window and open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *`list`* : lists all problems"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* **`add`**`n/factorial d/define a function factorial that takes in a number and n and returns the factorial of the number t/recursion a/Halim` : adds a problem called \u0027factorial\u0027 tagged with \u0027recursion\u0027 and authored by \u0027Wee Han\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* **`edit`**`1 src/LeetCode` : edits the first problem displayed and sets its source to \u0027LeetCode\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* **`switchtab`**`t/display i/2` : switches to tag tab"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* **`switchtab`**`t/display i/3` : switches to plan tab"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "image::UiStartPlan.png[width\u003d\"60%\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* **`findplan`**`n/CS2040` : finds plans that with name \u0027CS2040\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* **`clear`** : resets Algobase"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/factorial t/recursion` or as `n/factorial`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/recursion`, `t/recursion t/dynamic-programming` etc."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME a/AUTHOR`, `a/AUTHOR n/NAME` is also acceptable."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Problems"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a problem: `add`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Generates a new problem. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Format: `add n/NAME [a/AUTHOR] [w/WEBLINK] [d/DESCRIPTION] [diff/DIFFICULTY] [src/SOURCE] [t/TAG]...`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `DIFFICULTY` should be an integer or decimal in the range of (0, 5] (left open right close range)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Don\u0027t provide extreme values like `5.00000...01` as difficulty range as computers can\u0027t store decimals exactly and some round-off error is unavoidable."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "A problem can have any number of tags (including 0)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `add n/Sequences a/Tung Kam Chuen w/https://open.kattis.com/problems/sequences d/Find the sum of the number of inversions of the 2k sequences, modulo 1000000007 (109+7). diff/3.0 src/Kattis t/recursion`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a problem : `delete`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Deletes an existing problem. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Deletes the problem at the specified `INDEX`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* The index refers to the index number shown in the displayed problem list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Deletes the 2nd problem in the displayed list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `find n/factorial` +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Deletes the 1st problem in the results of the `find` command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a problem : `edit`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Edits an existing problem. +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Format: `edit INDEX [n/NAME] [d/DESCRIPTION] [a/AUTHOR]  [t/TAG]...`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Edits the problem at the specified `INDEX`. The index refers to the index number shown in the displayed problem list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* When editing tags, the existing tags of the problem will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* You can remove all the problem\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `edit 1 a/John Doe +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Edits the author of the 1st problem to be `John Doe` respectively."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `edit 2 n/permutations t/` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Edits the name of the 2nd problem to be `permutations` and clears all existing tags."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all problems : `list`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Displays a list of all existing problems. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d Sorting problems: `sort`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Sorts the current list of results by a specified order and direction. +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Format: `sort m/METHOD [ord/ORDER]`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Method can be `name`, `author`, `weblink`, `difficulty` or `source`."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* ORDER can be `ascend` or `descend` representing ascending and descending order. The default is in ascending order."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* String-based values (i.e. `name`, `author`, etc.) are sorted alphabetically."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": "If sorted by ascending order (i.e. the default order), empty fields will have the highest priority, which means if you execute `sort m/weblink`, the first few results would be (if any) without web links."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `sort m/name`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Sorts the current list of problems in ascending order of names."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `sort m/author ord/descend`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Sorts the current list of problems in descending order of author names."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `sort m/difficulty ord/ascend`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Sorts the current list of problems from lowest to highest difficulty."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d Searching Problems"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d Locating problems: `find`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Finds problems fulfilling all provided constraints. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Format: `find [n/NAME] [a/AUTHOR] [d/DESCRIPTION] [src/SOURCE] [diff/LOWER_BOUND-UPPER_BOUND] [t/TAG]...`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Name"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** is case-insensitive. e.g. `henz` will match `Henz`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** is considered a match as long as one word matches. (e.g. `Henz Ben` matches both `Martin Henz` and `Ben Leong`)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** is matched word by word. e.g. `hello` will match `hello world` but not `helloworld`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Author requires an exact match."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Description"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** is case-insensitive"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** is matched word by word"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** is considered as a match only when the problem\u0027s description includes all words in the constraint. e.g. `wordA wordB` matches `wordC wordB wordA` not `wordD wordA`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Source requires an exact match."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Tag"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Constraints are separated by spaces. (e.g. `find t/Recursion Brute-Force` will display all problems with both tag `Recursion` and `Brute-Force`)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Constraint tag set is a subset of matching problems. (e.g. `find t/Recursion Brute-Force` will match problem with tags `Recursion`+`Brute-Force`+`Playful` but not `Recursion`+`Adhoc`)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Tags are considered equal only when the tag strings are exactly matched."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Difficulty"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** matches problems with `LOWER_BOUND \\\u003c\u003d difficulty \\\u003c\u003d UPPER_BOUND`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "le0tan"
        },
        "content": "If you want to match problems with exact difficulty `1.5`, please use `diff/1.5-1.5`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "le0tan"
        },
        "content": "When providing the search restrictions, you should ensure that keywords are non-blank and difficulty range is valid (as specified in `add` command). Also at least one search restriction should be provided."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Words are separated by empty spaces. Thus if we have a sentence \"Hello, world!\", we have two words `Hello,` and `world!`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `find n/Sequence` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Returns any problem with word `sequence` (case-insensitive) in its name."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `find t/algorithm diff/2.0-4.0` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Returns any problem with `algorithm` as one of its tags AND with a difficulty between 2.0 and 4.0 (inclusive)."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `find a/Hentin Marz src/Kattis` +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Returns any problem from `Kattis` that\u0027s authored by `Hentin Marz`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d Storing a problem-finding rule: `addfindrule`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Saves a problem-finding rule from provided constraints. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Format: `addfindrule RULE_NAME [n/NAME] [a/AUTHOR] [d/DESCRIPTION] [src/SOURCE] [diff/LOWER_BOUND-UPPER_BOUND] [t/TAG]...`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "le0tan"
        },
        "content": "The rules for constraints are the same as those described in `find` command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `addfindrule MediumDiffAlgo t/algorithm diff/2.0-4.0` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Adds a new find rule named `MediumDiffAlgo` that when applied, returns any problem with `algorithm` as one of its tags AND with a difficulty between 2.0 and 4.0 (inclusive)."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `addfindrule Kattis src/Kattis` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Adds a new find rule named `Kattis` that when applied, returns any problem from `Kattis`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d Applying a problem-finding rule: `apply`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Applies a problem-finding rule. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Format: `apply INDEX`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Applies the find rule at the specified `INDEX`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* The index refers to the index number shown in the displayed find rule list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `apply 2` +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Applies the 2nd find rule in the displayed list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a problem-finding rule: `deletefindrule`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Deletes a problem-finding rule. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Format: `deletefindrule INDEX`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Deletes the find rule at the specified `INDEX`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* The index refers to the index number shown in the displayed find rule list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `deletefindrule 2` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Deletes the 2nd find rule in the displayed list."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Tags"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003d\u003d\u003d\u003d Creating new tags: `addtag`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Generates a new tag. +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Format: `addtag n/NAME`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `newtag n/sssp`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003d\u003d\u003d\u003d Listing tags: `listtag`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Displays a list of all existing tags. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Format: `listtag`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting new tags: `deletetag`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Deletes an existing tag. +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Format: `deletetag INDEX`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `deletetag 1`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003d\u003d\u003d\u003d Editing tags: `edittag`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Edits an existing tag. +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Format: `edittag INDEX t/NAME`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "* `edittag 1 t/difficult`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Training Plans"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Seris370"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a plan: `addplan`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Generates a new plan. +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Format: `add n/NAME [d/DESCRIPTION] [start/START_DATE] [end/END_DATE]`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* Plans cannot have duplicate names."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* `START_DATE` and `END_DATE` should be in the format of `yyyy-MM-dd`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* `addplan n/CS2040 d/past year questions in practical exams start/2019-01-01 end/3019-12-12`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Seris370"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a plan : `deleteplan`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Deletes an existing plan. +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Format: `deleteplan INDEX`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* Deletes the plan at the specified `INDEX`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* The index refers to the index number shown in the displayed plan list."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* `listplan` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Seris370"
        },
        "content": "`deleteplan 2` +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Deletes the 2nd problem in the displayed list."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* `findplan n/CS2040` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Deletes the 1st problem in the results of the `findplan` command (will be introduced in the next section)."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Seris370"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a plan : `editplan`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Edits an existing plan. +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Format: `editplan INDEX [n/NAME] [d/DESCRIPTION] [start/START_DATE] [end/END_DATE]`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* Edits the plan at the specified `INDEX`. The index refers to the index number shown in the displayed plan list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* `edit 1 d/past year questions of sit-in labs +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Edits the description of the 1st plan to be `past year questions of sit-in labs` respectively."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* `edit 2 start/2019-08-13` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Edits the starting date of the 2nd plan to be `2019-08-13`."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Seris370"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all plans : `listplan`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Displays a list of all existing plans. +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Format: `listplan`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Searching Plans"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Locating plans: `findplan`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Finds plans fulfilling all provided constraints. +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `findplan [n/NAME] [d/DESCRIPTION] [start/RANGE_START] [end/RANGE_END]`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Name"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** is case-insensitive."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** is considered a match as long as one word matches."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** is matched word by word."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Description"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** is case-insensitive"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** is matched word by word"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** is considered as a match only when the problem\u0027s description includes all words in the constraint."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Start and end range"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** is considered a match when there exist overlaps in time. (e.g. a plan with start date of `2019-01-01` and end date of `2019-03-03` matches a plan with start date of `2019-02-02` and end date of `2019-04-04`)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** both `RANGE_START` and `RANGE_END` should be specified."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Task Management"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a new task to a plan: `addtask`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Adds a task to a specified plan. +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `addtask plan/PLAN_INDEX prob/PROBLEM_INDEX [due/TARGET_DATE]`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `addtask plan/1 prob/1 due/2019-12-12`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Copying a task from one plan to another: `copytask`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Copies a specified task from one plan to another. +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `copytask task/TASK_INDEX from/PLAN_INDEX to/PLAN_INDEX`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `copytask task/1 from/1 to/2`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a task from a plan: `deletetask`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Deletes a specified task from a specified plan. +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `deletetask plan/PLAN_INDEX task/TASK_INDEX`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `deletetask plan/1 task/1`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Marking a task as done: `donetask`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Marks a specified task in a specified plan as done. +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `donetask plan/PLAN_INDEX task/TASK_INDEX`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `donetask plan/1 task/1`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Editing due date of a task from a plan: `edittask`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Edits the due date of a specified task from a specified plan. +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `edittask plan/PLAN_INDEX task/TASK_INDEX due/DUE_DATE`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `edittask plan/1 task/1 due/2019-12-12`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Marking a task as undone: `undonetask`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Marks a specified task in a specified plan as undone. +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `undonetask plan/PLAN_INDEX task/TASK_INDEX`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `undonetask plan/1 task/1`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Moving a task from one plan to another: `movetask`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Moves a specified task from a specified plan to another. +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `movetask task/TASK_INDEX from/PLAN_INDEX to/PLAN_INDEX`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `movetask task/1 from/1 to/2`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Setting the plan to be used in main display: `setplan`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Sets a specified plan as the current display plan. +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `setplan PLAN_INDEX`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `setplan 10`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Tabs"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Switching Tabs: `switchtab`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Switches between tabs in the GUI +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Format: `switchtab t/TAB_TYPE i/TAB_INDEX`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Tab Type"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "** can be `display` or `details`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `switchtab t/display i/1`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `switchtab t/details i/2`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Opening Tabs: `opentab`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Opens a new tab in the GUI +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Format: `opentab m/MODEL_TYPE i/MODEL_INDEX`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Model Type"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "** can be `problem`, `tag` or `plan`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `opentab m/problem i/1`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `opentab m/plan i/2`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Closing Tabs: `closetab`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Closes a tab in the GUI +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Format: `closetab t/TAB_TYPE i/TAB_INDEX`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Tab Type"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "** can be `display` or `details`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `closetab t/display i/1`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `closetab t/details i/2`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Data Management"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Importing data: `import`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Imports external data of a specified format (e.g. JSON) into local storage. +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `import format/FORMAT path/FILE_PATH`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Format can only be `JSON`."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* File path refers to the relative path of the input file."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `import format/json path/./steven_halim_secret.json`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting data: `export`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Exports data into a specified format (e.g. JSON). +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `export format/FORMAT path/DIRECTORY_PATH`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Format can only be `JSON`."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Directory path refers to the relative path of the directory to store the output file."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `export format/json path/.`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "le0tan"
        },
        "content": "List all possible commands or find command usage using the command word. +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Format: `help [COMMAND_WORD]`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `help`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Shows all possible commands."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `help add`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Shows command usage for `add` command."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003d\u003d\u003d\u003d Rewinding command: `rewind`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Rewind back to a previous successfully executed command. +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Format: `rewind INDEX`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "le0tan"
        },
        "content": "kbd:[Ctrl + ↑] is shortcut for `rewind 1`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Since kbd:[Ctrl + ↑] is equivalent to executing `rewind 1`, you should not expect to rewind multiple commands back if you press the shortcut multiple times - it will always show you the last successfully executed command, if any. if you want to rewind several commands back, please use `rewind INDEX` instead."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `find n/Sequences` +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "le0tan"
        },
        "content": "`rewind 1` +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Execute `find` command first, then `rewind` back to the `find` command (now the content in the command box should be `find n/Sequences`)"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Clears all entries from AlgoBase. +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Encryption"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AlgoBase folder."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* *Add Problem* `add n/NAME [d/DESCRIPTION] [a/AUTHOR] [t/TAG]...` +"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `add  n/factorial d/define a function factorial that takes in a number n and returns the factorial of the number t/recursion a/Wee Han`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* *List Problems* : `list` +"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* *Edit Problems* : `edit INDEX [d/DESCRIPTION] [a/AUTHOR] [t/TAG]...` +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `edit 2 n/permutations t/`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* *Delete Problem* : `delete INDEX` +"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* *Sort Problems* : `sort m/METHOD [ord/ORDER]` +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "le0tan"
        },
        "content": "e.g. `sort m/difficulty ord/ascend`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* *Find Problems* : `find [n/NAME] [a/AUTHOR] [d/DESCRIPTION] [src/SOURCE] [diff/LOWER_BOUND-UPPER_BOUND] [t/TAG]…` +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "le0tan"
        },
        "content": "e.g. `find t/algorithm diff/2.0-4.0`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* *Add Find Rule*: `addfindrule RULE_NAME [n/NAME] [a/AUTHOR] [d/DESCRIPTION] [src/SOURCE] [diff/LOWER_BOUND-UPPER_BOUND] [t/TAG]…` +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "le0tan"
        },
        "content": "e.g. `addfindrule MediumDiffAlgo t/algorithm diff/2.0-4.0`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* *Apply Find Rule*: `apply INDEX` +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "le0tan"
        },
        "content": "e.g. `apply 2`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* *Delete Find Rule*: `deletefindrule INDEX` +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "le0tan"
        },
        "content": "e.g. `deletefindrule 2`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *New Tag* : `addtag n/NAME` +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `addtag n/sssp`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *List Tags* : `listtag`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Delete Tag* : `deletetag INDEX` +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `deletetag 3`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* *Add Training Plan* : `addplan n/NAME [d/DESCRIPTION] [start/START_DATE] [end/END_DATE]` +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `addplan n/CS2040`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* *Edit Training Plan* : `editplan INDEX [n/NAME] [d/DESCRIPTION] [start/START_DATE] [end/END_DATE]` +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Seris370"
        },
        "content": "e.g. `editplan 1 n/training start/2020-02-02`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* *Find Training Plans* : `findplan [n/NAME] [d/DESCRIPTION] [start/RANGE_START] [end/RANGE_END]` +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Seris370"
        },
        "content": "e.g. `find n/CS2040 start/2019-03-01 end/2019-03-31`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* *List Training Plans* : `listplan`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* *Delete Training Plan* : `deleteplan INDEX` +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Seris370"
        },
        "content": "e.g. `deleteplan 2`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *Add Task to Training Plan* : `addtask plan/PLAN_INDEX prob/PROBLEM_INDEX` +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `addtask plan/1 prob/2`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *Copy Tasks among Plans* : `copytask task/TASK_INDEX from/PLAN_INDEX to/PLAN_TASK` +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `copytask task/1 from/1 to/2`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *Delete Task from Training Plan* : `deletetask plan/PLAN_INDEX task/TASK_INDEX` +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `deletetask plan/1 task/2`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *Edit Due Date of Task* : `edittask plan/PLAN_INDEX task/TASK_INDEX due/DUE_DATE` +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `edittask plan/1 task/2 due/2019-12-12`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *Mark Task as done* : `donetask plan/PLAN_INDEX task/TASK_INDEX` +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `donetask plan/1 task/2`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *Mark Task as undone* : `undonetask plan/PLAN_INDEX task/TASK_INDEX` +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `undonetask plan/1 task/2`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *Move Tasks among Plans* : `movetask task/TASK_INDEX from/PLAN_INDEX to/PLAN_TASK` +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `movetask task/1 from/1 to/2`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *Set Current Plan* : `setplan PLAN_TASK` +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `setplan 10`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *Exporting data* : `export format/FORMAT path/DIRECTORY_PATH` +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `export format/json path/.`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *Importing data* : `import format/FORMAT path/FILE_PATH` +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `import format/json path/./steven_halim_secret.json`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* *Rewind Command History* : `rewind INDEX` +"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Seris370"
        },
        "content": "e.g. `rewind 1`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 134,
      "Seris370": 60,
      "tiuweehan": 145,
      "le0tan": 131,
      "LuWenQ": 12,
      "-": 102
    }
  },
  {
    "path": "docs/diagrams/AddTagSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "participant \":AlgoBaseParser\" as AlgoBaseParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "participant \"u:AddTagCommand\" as AddTagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "participant \":AlgoBase\" as AlgoBase MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "[-\u003e LogicManager : execute(addTag)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "LogicManager -\u003e AlgoBaseParser : parseCommand(addTag)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "activate AlgoBaseParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "create AddTagCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "AlgoBaseParser -\u003e AddTagCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "activate AddTagCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "AddTagCommand --\u003e AlgoBaseParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "deactivate AddTagCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "AlgoBaseParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "deactivate AlgoBaseParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "LogicManager -\u003e AddTagCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "activate AddTagCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "AddTagCommand -\u003e Model : addTag()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Model -\u003e AlgoBase : addTag()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "activate AlgoBase"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "AlgoBase -\u003e AlgoBase :addTag(Tag)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "AlgoBase --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "deactivate AlgoBase"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "Model --\u003e AddTagCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "AddTagCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "deactivate AddTagCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "AddTagCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "destroy AddTagCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 53
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteProblem(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAlgoBase(algoBase)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "participant \":AlgoBaseParser\" as AlgoBaseParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "LogicManager -\u003e AlgoBaseParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "activate AlgoBaseParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AlgoBaseParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "DeleteCommandParser --\u003e AlgoBaseParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AlgoBaseParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "DeleteCommandParser --\u003e AlgoBaseParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AlgoBaseParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AlgoBaseParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "deactivate AlgoBaseParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "DeleteCommand -\u003e Model : deleteProblem(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 11,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    package Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Class XYZCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Class SimpleCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Class CommandResult"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        package exceptions {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            Class CommandException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    package Parser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        package exceptions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            Class ParseException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Class AlgoBaseParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Class XYZCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Class CliSyntax"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Class ParserUtil"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Class ArgumentMultimap"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Class ArgumentTokenizer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Class Prefix"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    Class LogicManager"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "LogicManager ..|\u003e Logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "LogicManager --\u003e\"1\" AlgoBaseParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "AlgoBaseParser ..\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "ArgumentTokenizer ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "ParserUtil ..\u003e Prefix"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "ArgumentTokenizer ..\u003e Prefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "XYZCommand --|\u003e Command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "AlgoBaseParser ..\u003e SimpleCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "SimpleCommand --|\u003e Command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "LogicManager ..\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Command ..\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": "note left of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "note left of SimpleCommand: SimpleCommand \u003d ClearCommand, ExitCommand, \\nListCommand, ListPlanCommand, ListTagCommand."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "LogicManager ..\u003e CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Command ..\u003e CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Seris370": 32,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Interface AlgoBaseStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Class JsonAlgoBaseStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "StorageManager o--\u003e AlgoBaseStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonAlgoBaseStorage .left.|\u003e AlgoBaseStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonAlgoBaseStorage .down.\u003e JsonSerializableAlgoBase"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonSerializableAlgoBase .down.\u003e JsonAdaptedGuiState"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonSerializableAlgoBase .down.\u003e JsonAdaptedPlan"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonSerializableAlgoBase .down.\u003e JsonAdaptedProblem"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonSerializableAlgoBase .down.\u003e JsonAdaptedProblemSearchRule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonSerializableAlgoBase .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonAdaptedGuiState .down.\u003e JsonAdaptedTabManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonAdaptedProblem .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonAdaptedProblemSearchRule .down.\u003e JsonAdaptedNameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonAdaptedProblemSearchRule .down.\u003e JsonAdaptedAuthorMatchesKeywordsPredicate"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonAdaptedProblemSearchRule .down.\u003e JsonAdaptedDescriptionContainsKeywordsPredicate"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonAdaptedProblemSearchRule .down.\u003e JsonAdaptedSourceMatchesKeywordsPredicate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonAdaptedProblemSearchRule .down.\u003e JsonAdaptedDifficultyIsInRangePredicate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonAdaptedProblemSearchRule .down.\u003e JsonAdaptedTagIncludesKeywordsPredicate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonAdaptedPlan .down.\u003e JsonAdaptedTask"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JsonAdaptedTabManager .down.\u003e JsonAdaptedTab"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 20,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/TagActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ":User executes Tag command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "if () then ([command changes Tag])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    : Modify the tag list in AlgoBase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "endif"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "stop"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 13
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Class DetailsTabPane"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Class DisplayTabPane"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Class TaskManagementPane"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Class FindRuleListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Class FindRuleCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Class ProblemListPanel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Class ProblemCard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Class PlanListPanel"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Class PlanCard"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Class TagListPanel"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Class TagCard"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Class TaskCard"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "MainWindow *-down-\u003e DetailsTabPane"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "MainWindow *-down-\u003e DisplayTabPane"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "MainWindow *-down-\u003e TaskManagementPane"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "DisplayTabPane *-down-\u003e FindRuleListPanel"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "DisplayTabPane *-down-\u003e ProblemListPanel"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "DisplayTabPane *-down-\u003e PlanListPanel"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "DisplayTabPane *-down-\u003e TagListPanel"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "TaskManagementPane -down-\u003e TaskCard"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "FindRuleListPanel -down-\u003e FindRuleCard"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "ProblemListPanel -down-\u003e ProblemCard"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "PlanListPanel -down-\u003e PlanCard"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "TagListPanel -down-\u003e TagCard"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "DetailsTabPane --|\u003e UiPart"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "DisplayTabPane --|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "TaskManagementPane --|\u003e UiPart"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "FindRuleListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "FindRuleCard --|\u003e UiPart"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "ProblemListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "ProblemCard --|\u003e UiPart"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "PlanListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "PlanCard --|\u003e UiPart"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "TagListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "TagCard --|\u003e UiPart"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "TaskCard --|\u003e UiPart"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "FindRuleCard ..\u003e Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "ProblemCard ..\u003e Model"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "PlanCard ..\u003e Model"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "TagCard ..\u003e Model"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "TaskCard ..\u003e Model"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "StatusBarFooter -[hidden]left- DetailsTabPane"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "DetailsTabPane -[hidden]left- DisplayTabPane"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "DisplayTabPane -[hidden]left- TaskManagementPane"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 45,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/design/model/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o-right-\u003e Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Person o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 1,
      "-": 20
    }
  },
  {
    "path": "docs/diagrams/design/model/GuiPackageDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "show \u003c\u003cenumeration\u003e\u003e fields"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Package Gui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class GuiState"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class TabData"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class TabManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    enum TabType \u003c\u003cenumeration\u003e\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DISPLAY,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DETAILS"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "GuiState *--\u003e \"1\" TabManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "TabData *--\u003e \"1\" ModelType"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "TabData *--\u003e \"1\" Index : modelIndex"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "TabManager *--\u003e \"1\" IntegerProperty : displayTabPaneIndex"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "TabManager *--\u003e \"1\" IntegerProperty : detailsTabPaneIndex"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "TabManager *--\u003e \"*\" TabData : tabs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 25
    }
  },
  {
    "path": "docs/diagrams/design/model/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "show \u003c\u003cenumeration\u003e\u003e fields"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Interface ReadOnlyAlgoBase \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Interface ReadOnlyUserPrefs \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class AlgoBase"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class ModelManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class UserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    enum ModelType \u003c\u003cenumeration\u003e\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        PROBLEM,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        TAG,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        PLAN,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        TASK,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FINDRULE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class GuiState"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Plan"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Problem"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class ProblemSearchRule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "AlgoBase .up.|\u003e ReadOnlyAlgoBase"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u0027Model \u0026 UserPrefs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ModelManager o---\u003e \"1\" AlgoBase"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ModelManager -right-\u003e\"*\" Problem : filtered and sorted list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ModelManager --\u003e\"*\" Tag: filtered list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ModelManager --\u003e\"*\" Plan: filtered list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ModelManager --\u003e\"*\" Task: filtered list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ModelManager --\u003e\"*\" ProblemSearchRule: filtered list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ModelManager ---\u003e\"1\" GuiState"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u0027AlgoBase"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "AlgoBase *--\u003e \"1\" UniqueProblemList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "AlgoBase *--\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "AlgoBase *--\u003e \"1\" PlanList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 58
    }
  },
  {
    "path": "docs/diagrams/design/model/PlanPackageDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "show \u003c\u003cenumeration\u003e\u003e fields"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Package Plan {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Plan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class PlanDescription"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class PlanList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class PlanName"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u0027Plan"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Plan *--\u003e \"1\" PlanName"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Plan *--\u003e \"1\" PlanDescription"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Plan *--\u003e \"1\" LocalDate : startDate"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Plan *--\u003e \"1\" LocalDate : endDate"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "PlanList o--\u003e \"*\" Task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Seris370": 2,
      "le0tan": 23
    }
  },
  {
    "path": "docs/diagrams/design/model/PlanSearchRulePackageDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": "!include ../../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "interface Predicate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "\t+ boolean test(Plan plan)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "\t+ boolean equals(Object other)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package PlanSearchRule {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    class FindPlanDescriptor"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    class PlanNameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    class PlanDescriptionContainsKeywordsPredicate"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    class TimeRangePredicate"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    class TimeRange"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    class Keyword"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    note right of Keyword"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    An abstraction used in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    PlanNameContainsKeywordsPredicate and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    PlanDescriptionContainsKeywordsPredicate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    to make sure every keyword is a valid String."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    end note"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Predicate \u003c|.. PlanNameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Predicate \u003c|.. PlanDescriptionContainsKeywordsPredicate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Predicate \u003c|.. TimeRangePredicate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "PlanNameContainsKeywordsPredicate \u003c--* FindPlanDescriptor"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "PlanDescriptionContainsKeywordsPredicate \u003c--* FindPlanDescriptor"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "TimeRangePredicate \u003c--* FindPlanDescriptor"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "TimeRange \u003c-down- TimeRangePredicate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Seris370": 41
    }
  },
  {
    "path": "docs/diagrams/design/model/ProblemPackageDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "show \u003c\u003cenumeration\u003e\u003e fields"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Package Problem {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Author"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Difficulty"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Problem"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Remark"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Source"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class UniqueProblemList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class WebLink"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u0027Problem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "UniqueProblemList o--\u003e \"*\" Problem"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Problem *--\u003e Author"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Problem *--\u003e Description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Problem *--\u003e Difficulty"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Problem *--\u003e Name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Problem *--\u003e Remark"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Problem *--\u003e Source"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Problem *--\u003e WebLink"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Problem *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 33
    }
  },
  {
    "path": "docs/diagrams/design/model/ProblemSearchRulePackageDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "interface Predicate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ boolean test(Problem problem)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ boolean equals(Object other)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package ProblemSearchRule {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    class Keyword"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    class Name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    class ProblemSearchRule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    class UniqueFindRuleList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    class FindProblemDescriptor"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    class NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    class AuthorMatchesKeywordPredicate"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    class DescriptionContainsKeywordsPredicate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    class SourceMatchesKeywordPredicate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    class DifficultyIsInRangePredicate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    class TagIncludesKeywordsPredicate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    note left of Keyword"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    An abstraction used"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    in xxxPredicate to make sure"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    every keyword is a valid String."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    end note"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "UniqueFindRuleList o--\u003e \"*\" ProblemSearchRule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Predicate \u003c|.. NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Predicate \u003c|.. AuthorMatchesKeywordPredicate"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Predicate \u003c|.. DescriptionContainsKeywordsPredicate"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Predicate \u003c|.. SourceMatchesKeywordPredicate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Predicate \u003c|.. DifficultyIsInRangePredicate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Predicate \u003c|.. TagIncludesKeywordsPredicate"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "NameContainsKeywordsPredicate \u003c--* FindProblemDescriptor"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "AuthorMatchesKeywordPredicate \u003c--* FindProblemDescriptor"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "DescriptionContainsKeywordsPredicate \u003c--* FindProblemDescriptor"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "SourceMatchesKeywordPredicate \u003c--* FindProblemDescriptor"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "DifficultyIsInRangePredicate \u003c--* FindProblemDescriptor"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "TagIncludesKeywordsPredicate \u003c--* FindProblemDescriptor"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ProblemSearchRule -u|\u003e FindProblemDescriptor"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ProblemSearchRule *--u\u003e Name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 56
    }
  },
  {
    "path": "docs/diagrams/design/model/TagPackageDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "show \u003c\u003cenumeration\u003e\u003e fields"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Tag"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class UniqueTagList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u0027Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "UniqueTagList o--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 18
    }
  },
  {
    "path": "docs/diagrams/design/model/TaskPackageDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "show \u003c\u003cenumeration\u003e\u003e fields"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Package Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    Class Task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u0027Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Task *--\u003e \"1\" Problem"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Task *--\u003e \"1\" Boolean : isSolved"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Task *--\u003e \"1\" LocalDate : datetime"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Seris370": 1,
      "le0tan": 17
    }
  },
  {
    "path": "docs/diagrams/find/FindCommandActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ":User executes a find command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t:Instantiate a FindCommand with a corresponding predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t:Execute FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t:Update UI with filtered problem list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t:Throw an exception;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t:Update UI to notify the user;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 18
    }
  },
  {
    "path": "docs/diagrams/find/FindCommandClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "show interface members"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "abstract class Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "interface Predicate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ boolean test(Problem problem)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ boolean equals(Object other)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "interface Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\tT parse(String userInput)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class FindProblemDescriptor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class FindCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Command \u003c|.. FindCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Parser \u003c|-- FindCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "FindProblemDescriptor *-- XXXPredicate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "FindProblemDescriptor \u003c.. FindCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "FindProblemDescriptor \u003c.. FindCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Predicate \u003c|.. XXXPredicate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "note bottom of XXXPredicate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "This includes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cb\u003eNameContainsKeywordsPredicate\u003c/b\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "and all similarly named predicates."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "end note"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 40
    }
  },
  {
    "path": "docs/diagrams/find/FindCommandSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "box \"Logic\" LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "participant \":FindProblemDescriptor\" as FindProblemDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "participant \":NameContainsKeywordsPredicate\" as NameContainsKeywordsPredicate LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "participant \":FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[-\u003e FindCommandParser: parse(arguments)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    ref over FindCommandParser: Tokenizes user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    create FindProblemDescriptor"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    FindCommandParser -\u003e FindProblemDescriptor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    activate FindProblemDescriptor"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindProblemDescriptor --\u003e FindCommandParser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    deactivate FindProblemDescriptor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    opt argument for name is present"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ref over FindCommandParser: get argument value as a list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        create NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommandParser -\u003e NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        activate NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            NameContainsKeywordsPredicate --\u003e FindCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        deactivate NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommandParser -\u003e FindProblemDescriptor : setNamePredicate(...)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    end"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    ref over FindCommandParser: check if other fields are present, add to the descriptor"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    create FindCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    FindCommandParser -\u003e FindCommand : FindCommand(descriptor)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    activate FindCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommand --\u003e FindCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    deactivate FindCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    [\u003c-- FindCommandParser : FindCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "box \"Model\" MODEL_COLOR_T1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[-\u003e FindCommand : executed by LogicManager"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "FindCommand -\u003e Model : update"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Model --\u003e FindCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ref over FindCommand: Create CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[\u003c-- FindCommand : CommandResult"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 49
    }
  },
  {
    "path": "docs/diagrams/find/PredicateClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "left to right direction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "interface Predicate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ boolean test(Problem problem)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ boolean equals(Object other)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class NameContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ {static} NameContainsKeywordsPredicate DEFAULT_NAME_PREDICATE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- List\u003cString\u003e keywords"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ NameContainsKeywordsPredicate(List\u003cString\u003e keywords)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- NameContainsKeywordsPredicate()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class AuthorMatchesKeywordPredicate {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ {static} AuthorMatchesKeywordPredicate DEFAULT_AUTHOR_PREDICATE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- String keyword"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ AuthorMatchesKeywordPredicate(String keyword)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- AuthorMatchesKeywordPredicate()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class DescriptionContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ {static} DescriptionContainsKeywordsPredicate DEFAULT_DESCRIPTION_PREDICATE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- List\u003cString\u003e keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- DescriptionContainsKeywordsPredicate()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class SourceMatchesKeywordPredicate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ {static} SourceMatchesKeywordPredicate DEFAULT_SOURCE_PREDICATE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- String keyword"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ SourceMatchesKeywordPredicate(String keyword)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- SourceMatchesKeywordPredicate()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class DifficultyIsInRangePredicate {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ {static} DifficultyIsInRangePredicate DEFAULT_DIFFICULTY_PREDICATE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- {static} double DEFAULT_BOUND"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- double lowerBound"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- double upperBound"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ DifficultyIsInRangePredicate(double lowerBound, double upperBound)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- DifficultyIsInRangePredicate()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class TagIncludesKeywordsPredicate {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ {static} TagIncludesKeywordsPredicate DEFAULT_TAG_PREDICATE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- List\u003cString\u003e keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t+ TagIncludesKeywordsPredicate(List\u003cString\u003e keywords)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t- TagIncludesKeywordsPredicate()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Predicate \u003c|.. NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Predicate \u003c|.. AuthorMatchesKeywordPredicate"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Predicate \u003c|.. DescriptionContainsKeywordsPredicate"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Predicate \u003c|.. SourceMatchesKeywordPredicate"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Predicate \u003c|.. DifficultyIsInRangePredicate"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Predicate \u003c|.. TagIncludesKeywordsPredicate"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 60
    }
  },
  {
    "path": "docs/diagrams/gui/OpenTabCommandActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ":User executes a open tab command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\t:Instantiate a OpenTabCommand with the model type and index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\t:Execute OpenTabCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\t:Update list of tab data in TabManager with the index of the model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\t:Listener is activated and new tab is reflected in UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\t:Throw an exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\t:Update UI to notify the user;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 19
    }
  },
  {
    "path": "docs/diagrams/gui/SwitchTabCommandActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ":User executes a switch tab command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\t:Instantiate a SwitchTabCommand with the tab type and index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\t:Execute SwitchTabCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\t:Update TabManager with new index for given tab type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\t:Listener is activated and tab change is reflected in UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\t:Throw an exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\t:Update UI to notify the user;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 19
    }
  },
  {
    "path": "docs/diagrams/gui/SwitchTabsSequenceDiagram0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \":SwitchTabCommandParser\" as SwitchTabCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \"s:SwitchTabCommand\" as SwitchTabCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "[-\u003e LogicManager : execute(\"switchtab t/display i/1\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"switchtab t/display i/1\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "create SwitchTabCommandParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AddressBookParser -\u003e SwitchTabCommandParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate SwitchTabCommandParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "SwitchTabCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate SwitchTabCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AddressBookParser -\u003e SwitchTabCommandParser : parse(\"t/display i/1\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate SwitchTabCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "create SwitchTabCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "SwitchTabCommandParser -\u003e SwitchTabCommand : SwitchTabCommand(tabType, index)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate SwitchTabCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "SwitchTabCommand --\u003e SwitchTabCommandParser : s"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate SwitchTabCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "SwitchTabCommandParser --\u003e AddressBookParser : s"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate SwitchTabCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "SwitchTabCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "destroy SwitchTabCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AddressBookParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate SwitchTabCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "tiuweehan": 44
    }
  },
  {
    "path": "docs/diagrams/gui/SwitchTabsSequenceDiagram1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \"s:SwitchTabCommand\" as SwitchTabCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \"g:GuiState\" as GuiState MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \"t:TabManager\" as TabManager MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "LogicManager -\u003e SwitchTabCommand : execute()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate SwitchTabCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "SwitchTabCommand -\u003e Model : getGuiState()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Model --\u003e SwitchTabCommand : g"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "SwitchTabCommand -\u003e GuiState : getTabManager()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate GuiState"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "GuiState --\u003e SwitchTabCommand : t"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate GuiState"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "SwitchTabCommand -\u003e TabManager : setDisplayTabPaneIndex(1)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate TabManager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "TabManager --\u003e SwitchTabCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate TabManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "SwitchTabCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "CommandResult --\u003e SwitchTabCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "SwitchTabCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate SwitchTabCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "tiuweehan": 47
    }
  },
  {
    "path": "docs/diagrams/gui/SwitchTabsSequenceDiagram2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \":DetailsTabPane\" as DetailsTabPane UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \"tabPane:TabPane\" as TabPane UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \"sm:SingleSelectionModel\u003cTab\u003e\" as SelectionModel UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "[-\u003e DetailsTabPane : selectTab(1)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate DetailsTabPane"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "DetailsTabPane -\u003e TabPane : getSelectionModel()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate TabPane"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "TabPane --\u003e DetailsTabPane: sm"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate TabPane"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "DetailsTabPane -\u003e SelectionModel : select(1)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate SelectionModel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "SelectionModel --\u003e DetailsTabPane"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate SelectionModel"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "[\u003c-- DetailsTabPane"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate DetailsTabPane"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "tiuweehan": 27
    }
  },
  {
    "path": "docs/diagrams/gui/SwitchTabsSequenceDiagram3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \":StorageManager\" as StorageManager STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \":JsonAlgoBaseStorage\" as JsonAlgoBaseStorage STORAGE_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \":JsonSerializableAlgoBaseStorage\" as JsonSerializableAlgoBaseStorage STORAGE_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \":JsonSerializableGui\" as JsonSerializableGui STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \":JsonSerializableTabManager\" as JsonSerializableTabManager STORAGE_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "participant \":JsonSerializableTab\" as JsonSerializableTab STORAGE_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "StorageManager -\u003e JsonAlgoBaseStorage : saveAlgoBase(algoBase)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate JsonAlgoBaseStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "create JsonSerializableAlgoBaseStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "JsonAlgoBaseStorage -\u003e JsonSerializableAlgoBaseStorage : saveAlgoBase(algoBase)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate JsonSerializableAlgoBaseStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "create JsonSerializableGui"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "JsonSerializableAlgoBaseStorage -\u003e JsonSerializableGui"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate JsonSerializableGui"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "create JsonSerializableTabManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "JsonSerializableGui -\u003e JsonSerializableTabManager"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "activate JsonSerializableTabManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "loop whileTabsExist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    create JsonSerializableTab"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    JsonSerializableTabManager -\u003e JsonSerializableTab"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    activate JsonSerializableTab"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    JsonSerializableTab --\u003e JsonSerializableTabManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    deactivate JsonSerializableTab"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "end"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "JsonSerializableTabManager --\u003e JsonSerializableGui : tabManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate JsonSerializableTabManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "JsonSerializableGui --\u003e JsonSerializableAlgoBaseStorage : guiState"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate JsonSerializableGui"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "JsonSerializableAlgoBaseStorage --\u003e JsonAlgoBaseStorage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate JsonSerializableAlgoBaseStorage"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "JsonAlgoBaseStorage --\u003e StorageManager"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "deactivate JsonAlgoBaseStorage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 49
    }
  },
  {
    "path": "docs/diagrams/savefindrule/AddFindRuleActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ":User executes a addfindrule command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t:Instantiate a AddFindRuleCommand with a corresponding predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t:Execute AddFindRuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\tif() then ([added find rule doesn\u0027t exist in AlgoBase])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t    :Throw an exception;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\telse ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t    :Add the find rule into AlgoBase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t    :Update the UI with updated find rule list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\tendif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t:Throw an exception;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\t:Update UI to notify the user;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "stop"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 23
    }
  },
  {
    "path": "docs/diagrams/savefindrule/AddFindRuleClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "abstract class Command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "interface Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\tT parse(String userInput)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class Name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class FindProblemDescriptor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class AddFindRuleCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class ProblemSearchRule extends FindProblemDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class AddFindRuleCommandParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Command \u003c|.. AddFindRuleCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Parser \u003c|-- AddFindRuleCommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "FindProblemDescriptor *-- \"6\" XXXPredicate"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ProblemSearchRule *-- \"1\" Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "AddFindRuleCommand *-- \"1\" ProblemSearchRule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "note bottom of XXXPredicate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "This includes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cb\u003eNameContainsKeywordsPredicate\u003c/b\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "and six other similarly named predicates."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "end note"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 32
    }
  },
  {
    "path": "docs/diagrams/savefindrule/AddFindRuleSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "box \"Logic\" LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "participant \":AddFindRuleCommandParser\" as AddFindRuleCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "participant \":ProblemSearchRule\" as ProblemSearchRule LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "participant \":AddFindRuleCommand\" as AddFindRuleCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[-\u003e AddFindRuleCommandParser: parse(arguments)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "activate AddFindRuleCommandParser"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    ref over AddFindRuleCommandParser: Tokenizes user input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    create ProblemSearchRule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    AddFindRuleCommandParser -\u003e ProblemSearchRule"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    activate ProblemSearchRule"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ProblemSearchRule --\u003e AddFindRuleCommandParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    deactivate ProblemSearchRule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    alt argument for name is present"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ref over AddFindRuleCommandParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            namePredicate :\u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            parseNamePredicate(argument, msg)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        endref"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    else else"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ref over AddFindRuleCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            namePredicate :\u003d null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        endref"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    end"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    ref over AddFindRuleCommandParser: check if other fields are present"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    create AddFindRuleCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    AddFindRuleCommandParser -\u003e AddFindRuleCommand : AddFindRuleCommand(predicates)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    activate AddFindRuleCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AddFindRuleCommand --\u003e AddFindRuleCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    deactivate AddFindRuleCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    [\u003c-- AddFindRuleCommandParser : AddFindRuleCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "deactivate AddFindRuleCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "box \"Model\" MODEL_COLOR_T1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[-\u003e AddFindRuleCommand : executed by LogicManager"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "activate AddFindRuleCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "AddFindRuleCommand -\u003e Model : addFindRule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Model --\u003e AddFindRuleCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ref over AddFindRuleCommand: Create CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "[\u003c-- AddFindRuleCommand : CommandResult"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "deactivate AddFindRuleCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 49
    }
  },
  {
    "path": "docs/diagrams/savefindrule/HighLevelAddFindRuleSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"addfindrule\\n rule1 \\\\n Sequences\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"addfindrule\\n rule1 \\\\n Sequences\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : addFindRule(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAlgoBase(algoBase)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "le0tan": 37
    }
  },
  {
    "path": "docs/diagrams/task/AddTaskCommandActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ":User executes an AddTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\t:Instantiate an AddTaskCommand with a corresponding AddTaskDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\t:Execute AddTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\t:Update UI with current plan with corresponding task list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\t:Throw an exception;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\t:Update UI to notify the user;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 18
    }
  },
  {
    "path": "docs/diagrams/task/AddTaskSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "participant \":AlgoBaseParser\" as AlgoBaseParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "participant \"addTaskCommand:AddTaskCommand\" as AddTaskCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "participant \"\u003c\u003cClass\u003e\u003e\\n:Plan\" as PlanClass MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "participant \"updatedPlan:Plan\" as PlanObject MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "participant \":AlgoBase\" as AlgoBase MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "participant \":PlanList\" as PlanList MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[-\u003e LogicManager : execute(addTask)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "LogicManager -\u003e AlgoBaseParser : parseCommand(addTask)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "activate AlgoBaseParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "create AddTaskCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AlgoBaseParser -\u003e AddTaskCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "activate AddTaskCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AddTaskCommand --\u003e AlgoBaseParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "deactivate AddTaskCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AlgoBaseParser --\u003e LogicManager : addTaskCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "deactivate AlgoBaseParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "LogicManager -\u003e AddTaskCommand : execute()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "activate AddTaskCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AddTaskCommand -\u003e PlanClass : updateTasks(originPlan, tasks)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "activate PlanClass"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "create PlanObject"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "PlanClass -\u003e PlanObject"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "activate PlanObject"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "PlanObject --\u003e PlanClass"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "deactivate PlanObject"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "PlanClass --\u003e AddTaskCommand : updatedPlan"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "deactivate PlanClass"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AddTaskCommand -\u003e Model : setPlan(originPlan, updatedPlan)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Model -\u003e AlgoBase : setPlan(originPlan, updatedPlan)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "activate AlgoBase"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AlgoBase -\u003e PlanList : setPlan(originPlan, updatedPlan)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "activate PlanList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "PlanList --\u003e AlgoBase"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "deactivate PlanList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AlgoBase --\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "deactivate AlgoBase"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Model --\u003e AddTaskCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AddTaskCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "deactivate AddTaskCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AddTaskCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "destroy AddTaskCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 75
    }
  },
  {
    "path": "docs/team/jiayushe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d She Jiayu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d PROJECT: AlgoBase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 3,
      "-": 61
    }
  },
  {
    "path": "docs/team/le0tan.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d Tan Yuanhong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d PROJECT: AlgoBase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 3,
      "-": 60
    }
  },
  {
    "path": "docs/team/luwenq.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d Lu Wen Qi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d PROJECT: AlgoBase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 3,
      "-": 60
    }
  },
  {
    "path": "docs/team/seris370.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d Yu Chenghui - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d PROJECT: AlgoBase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 3,
      "-": 60
    }
  },
  {
    "path": "docs/team/tiuweehan.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d Tiu Wee Han - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d PROJECT: AlgoBase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 3,
      "-": 60
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "-": 416
    }
  },
  {
    "path": "src/main/java/seedu/algobase/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/algobase/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/algobase/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.AlgoBaseStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.JsonAlgoBaseStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AlgoBase ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        // User Preferences"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        // AlgoBase Storage"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        AlgoBaseStorage algoBaseStorage \u003d new JsonAlgoBaseStorage(userPrefs.getAlgoBaseFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        storage \u003d new StorageManager(algoBaseStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s algobase and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The data from the sample algobase will be used instead if {@code storage}\u0027s algobase is not found,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * or an empty algobase will be used instead if errors occur when reading {@code storage}\u0027s algobase."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Optional\u003cReadOnlyAlgoBase\u003e algoBaseOptional;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        ReadOnlyAlgoBase initialData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            algoBaseOptional \u003d storage.readAlgoBase();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            if (!algoBaseOptional.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AlgoBase\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            initialData \u003d algoBaseOptional.orElseGet(SampleDataUtil::getSampleAlgoBase);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AlgoBase\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            initialData \u003d new AlgoBase();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AlgoBase\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            initialData \u003d new AlgoBase();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AlgoBase\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        logger.info(\"Starting AlgoBase \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping AlgoBase ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 3,
      "LuWenQ": 43,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static final String LOG_FILE \u003d \"algobase.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_INVALID_FIND_RULE_DISPLAYED_INDEX \u003d \"The Find Rule index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_INVALID_PLAN_DISPLAYED_INDEX \u003d \"The Plan index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX \u003d \"The Problem index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG_DISPLAYED_INDEX \u003d \"The Tag index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The Task index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_PLANS_LISTED_OVERVIEW \u003d \"%1$d plans listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_PROBLEMS_LISTED_OVERVIEW \u003d \"%1$d problems listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_NAME \u003d \"Command %1$s not found!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_INVALID_DIFFICULTY_RANGE \u003d \"Invalid difficulty range! \\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_INVALID_KEYWORD_FORMAT \u003d \"Invalid keyword format! \\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_INVALID_NAME_FORMAT \u003d \"Invalid name format! \\n%1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_INVALID_REWIND_NUMBER \u003d \"Invalid rewind number! (Is it larger than the \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"number of all successfully executed commands in this launch of AlgoBase?)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DATE \u003d \"Due date of task does not lie inside date range of plan.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_TASK_ALREADY_DONE \u003d \"Task [%1$s] already marked as done.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_YET_DONE \u003d \"Task [%1$s] not yet marked as done.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 7,
      "Seris370": 1,
      "le0tan": 6,
      "LuWenQ": 3,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static String getClassStringField(Class targetClass, String fieldName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            String result \u003d (String) targetClass.getField(fieldName).get(\"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } catch (NoSuchFieldException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new AssertionError(\"Class \" + targetClass.getName()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                + \"doesn\u0027t have \" + fieldName + \" field.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new AssertionError(\"Class \" + targetClass.getName()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                + \"has non-public \" + fieldName + \".\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if two lists have the same content with the same order."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param first list to compare"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param second list to compare"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static boolean compareTwoLists(List first, List second) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (first.size() !\u003d second.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            for (int i \u003d 0; i \u003c first.size(); i \u003d i + 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                if (!first.get(i).equals(second.get(i))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if two {@code Optional} are both present and have the same content or are both empty."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param first optional object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param second optional object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static boolean optionalEquals(Optional first, Optional second) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (first.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return second.isPresent() \u0026\u0026 first.get().equals(second.get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return second.isEmpty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 47,
      "LuWenQ": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static boolean isArrayOfLength(Object[] array, int length) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return array.length \u003d\u003d length;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Checks if an observable list contains an index."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param index index to be checked."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param items observable list of items."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param \u003cT\u003e type of items that list contains."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IndexOutOfBoundsException if list of items does not contain the index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static \u003cT\u003e boolean isWithinListRange(Index index, ObservableList\u003cT\u003e items) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        int itemIndex \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (itemIndex \u003c 0 || itemIndex \u003e\u003d items.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 20,
      "le0tan": 4,
      "LuWenQ": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Enum for supported formats."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public enum Format {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        JSON"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 6,
      "LuWenQ": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.GuiState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the AlgoBase."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @see seedu.algobase.model.Model#getAlgoBase()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ReadOnlyAlgoBase getAlgoBase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns the current state of the GUI."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    GuiState getGuiState();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns an unmodifiable view of the processed list of problems."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    ObservableList\u003cProblem\u003e getProcessedProblemList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tags */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ObservableList\u003cTag\u003e getProcessedTagList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of plans */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    ObservableList\u003cPlan\u003e getProcessedPlanList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    ObservableList\u003cTask\u003e getProcessedTaskList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /** Returns the current plan. */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    StringProperty getCurrentPlan();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /** Returns the number of solved tasks in current plan. */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    IntegerProperty getCurrentSolvedCount();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /** Returns the number of solved tasks in current plan. */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    IntegerProperty getCurrentUnsolvedCount();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of find rules."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    ObservableList\u003cProblemSearchRule\u003e getProcessedFindRuleList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the user prefs\u0027 algobase file path."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Path getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 15,
      "Seris370": 4,
      "tiuweehan": 9,
      "le0tan": 6,
      "LuWenQ": 18,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.RewindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.AlgoBaseParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.commandhistory.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.GuiState;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final AlgoBaseParser algoBaseParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBaseParser \u003d new AlgoBaseParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Command command \u003d algoBaseParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // We don\u0027t consider RewindCommand as a valid candidate to be stored in the command history."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!(command instanceof RewindCommand)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            model.addCommandHistory(new CommandHistory(commandText)); // Save command text for rewind feature"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            storage.saveAlgoBase(model.getAlgoBase());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ReadOnlyAlgoBase getAlgoBase() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return model.getAlgoBase();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public GuiState getGuiState() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return model.getGuiState();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cProblem\u003e getProcessedProblemList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return model.getFilteredProblemList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ObservableList\u003cTag\u003e getProcessedTagList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return model.getFilteredTagList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public ObservableList\u003cPlan\u003e getProcessedPlanList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return model.getFilteredPlanList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTask\u003e getProcessedTaskList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return model.getCurrentTaskList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public StringProperty getCurrentPlan() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return model.getCurrentPlan();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public IntegerProperty getCurrentSolvedCount() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return model.getCurrentSolvedCount();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public IntegerProperty getCurrentUnsolvedCount() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return model.getCurrentUnsolvedCount();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ObservableList\u003cProblemSearchRule\u003e getProcessedFindRuleList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return model.getFilteredFindRuleList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Path getAlgoBaseFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return model.getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 28,
      "Seris370": 6,
      "le0tan": 12,
      "tiuweehan": 1,
      "LuWenQ": 32,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/AddFindRuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Adds a find rule to AlgoBase."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class AddFindRuleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addfindrule\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Adds a find rule to AlgoBase.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"RULE_NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_AUTHOR + \"AUTHOR] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_SOURCE + \"SOURCE] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_DIFFICULTY + \"LOWER_BOUND-UPPER_BOUND] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \" MediumDifficulty\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \" \" + PREFIX_DIFFICULTY + \"2.5-3.5\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \"New [%1$s] find rule added to AlgoBase.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FIND_RULE \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \"Find rule [%1$s] already exists in AlgoBase.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_NO_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \"You should provide at least one constraint for a new find rule.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final ProblemSearchRule toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public AddFindRuleCommand(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(rule);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.toAdd \u003d rule;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (model.hasFindRule(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_FIND_RULE, toAdd.getName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        model.addFindRule(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            || (other instanceof AddFindRuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddFindRuleCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 8,
      "le0tan": 60
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/AddPlanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Adds a Plan to AlgoBase."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class AddPlanCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addplan\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Adds a Plan to AlgoBase.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_START_DATE + \"START_DATE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_END_DATE + \"END_DATE\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_NAME + \"CS2040 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_DESCRIPTION + \"past year questions of CS2040 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_START_DATE + \"2019-01-01 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_END_DATE + \"3019-12-12\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Plan [%1$s] added to AlgoBase.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PLAN \u003d \"A plan with name [%1$s] already exists in AlgoBase.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final Plan toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Plan}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public AddPlanCommand(Plan plan) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(plan);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        toAdd \u003d plan;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (model.hasPlan(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_PLAN, toAdd.getPlanName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        model.addPlan(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getPlanName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof AddPlanCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPlanCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 11,
      "Seris370": 56
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/AddTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Adds a Tag to the algobase."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtag\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Adds a Tag to AlgoBase.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + PREFIX_TAG + \"TAG NAME\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TAG + \"Easy\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Tag [%1$s] added to AlgoBase.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Tag [%1$s] already exists in AlgoBase.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Tag toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Creates an AddTagCommand to add the specified {@code Tag}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AddTagCommand(Tag tag) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        toAdd \u003d tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (model.hasTag(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_TAG, toAdd.getName()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.addTag(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof AddTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTagCommand) other).toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 10,
      "LuWenQ": 46
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/ApplyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Applies a find rule by specifying the index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class ApplyCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"apply\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \": Applies the find rule identified by the index number \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"used in the displayed Find Rules list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"Parameters:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"Example:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + COMMAND_WORD + \" 1\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Applied find rule [%1$s].\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ApplyCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cProblemSearchRule\u003e lastShownList \u003d model.getFilteredFindRuleList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FIND_RULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ProblemSearchRule findRuleToApply \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Predicate\u003cProblem\u003e findProblemPredicate \u003d findRuleToApply.getFindProblemPredicate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        model.updateFilteredProblemList(findProblemPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, findRuleToApply.getName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                || (other instanceof ApplyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ApplyCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "le0tan": 57
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Clears the algobase."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Clears all entries from AlgoBase.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Example: \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"AlgoBase has been cleared.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.setAlgoBase(new AlgoBase());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "LuWenQ": 11,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/CloseTabCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAB_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Closes a tab in the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class CloseTabCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"closetab\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Closed tab %1$s!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + \": Closes a details tab in the GUI\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + \"Parameters:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + PREFIX_TAB_INDEX + \"INDEX OF TAB (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + \"Example:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + PREFIX_TAB_INDEX + \"1\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String MESSAGE_INVALID_TAB_INDEX \u003d \"There is no tab at index %1$s!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public CloseTabCommand(Index displayTabIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireAllNonNull(displayTabIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.index \u003d displayTabIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            TabManager tabManager \u003d model.getGuiState().getTabManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            tabManager.removeDetailsTabData(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            int currentDetailsTabPaneIndexValue \u003d tabManager.getDetailsTabPaneIndex().intValue();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            if (index.getZeroBased() \u003c\u003d currentDetailsTabPaneIndexValue) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                if (currentDetailsTabPaneIndexValue \u003e 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    tabManager.setDetailsTabPaneIndex(Index.fromZeroBased(currentDetailsTabPaneIndexValue - 1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                String.format(MESSAGE_SUCCESS, index.getOneBased())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_TAB_INDEX, index.getOneBased()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 55
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.CopyTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.DoneTaskCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.MoveTaskCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.SetPlanCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.UndoneTaskCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Class[] COMMAND_LIST \u003d {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AddCommand.class,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AddPlanCommand.class,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AddTagCommand.class,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        AddTaskCommand.class,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ClearCommand.class,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        CopyTaskCommand.class,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DeleteCommand.class,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DeletePlanCommand.class,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DeleteTagCommand.class,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DeleteTaskCommand.class,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DoneTaskCommand.class,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        EditCommand.class,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        EditPlanCommand.class,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        EditTagCommand.class,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        EditTaskCommand.class,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ExitCommand.class,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommand.class,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindPlanCommand.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        HelpCommand.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ListCommand.class,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ListPlanCommand.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ListTagCommand.class,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        MoveTaskCommand.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        SetPlanCommand.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand.class,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        SwitchTabCommand.class,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        UndoneTaskCommand.class"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 19,
      "le0tan": 33,
      "tiuweehan": 1,
      "LuWenQ": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final boolean isRewind;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean isRewind) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.isRewind \u003d isRewind;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean isRewind() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return isRewind;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 isRewind \u003d\u003d otherCommandResult.isRewind;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, isRewind);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return \"[CommandResult]: \" + feedbackToUser;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 16,
      "LuWenQ": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/DeleteFindRuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Deletes a Find Rule using its displayed index in the AlgoBase UI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class DeleteFindRuleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletefindrule\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \": Deletes the find rule identified by the index number \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"used in the displayed Find Rules list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + COMMAND_WORD + \" 1\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Find Rule [%1$s] deleted.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public DeleteFindRuleCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cProblemSearchRule\u003e lastShownList \u003d model.getFilteredFindRuleList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FIND_RULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ProblemSearchRule ruleToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        model.deleteFindRule(ruleToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, ruleToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                || (other instanceof DeleteFindRuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteFindRuleCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "le0tan": 53
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/DeletePlanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Deletes a Plan from AlgoBase."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class DeletePlanCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteplan\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \": Deletes the Plan identified by the index number used in the displayed Plan list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DELETE_PLAN_SUCCESS \u003d \"Plan [%1$s] deleted.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public DeletePlanCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        List\u003cPlan\u003e lastShownList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Plan planToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        model.deletePlan(planToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PLAN_SUCCESS, planToDelete.getPlanName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof DeletePlanCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeletePlanCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 6,
      "Seris370": 50
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/DeleteTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Deletes a Tag identified using it\u0027s displayed index from the algobase."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class DeleteTagCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletetag\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \": Deletes the Tag identified by the index number used in the displayed Tag list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Tag [%1$s] deleted.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public DeleteTagCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        List\u003cTag\u003e lastShownList \u003d model.getFilteredTagList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Tag tagToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.deleteTag(tagToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.deleteTags(tagToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, tagToDelete.getName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof DeleteTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTagCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 6,
      "LuWenQ": 50
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/EditPlanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PLANS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanDescription;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Edits the details of an existing Plan in the algobase."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class EditPlanCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editplan\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Plan identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"by the index number used in the displayed Plan list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START_DATE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END_DATE]\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_DESCRIPTION + \"future questions of CS2040 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_START_DATE + \"2019/01/01 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_END_DATE + \"3019/12/12\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_EDIT_PLAN_SUCCESS \u003d \"Plan [%1$s] edited.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PLAN \u003d \"A plan of name [%1$s] already exists in AlgoBase.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final EditPlanDescriptor editPlanDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @param index of the Plan in the filtered Plan list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @param editPlanDescriptor details to edit the Plan with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public EditPlanCommand(Index index, EditPlanDescriptor editPlanDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(editPlanDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.editPlanDescriptor \u003d new EditPlanDescriptor(editPlanDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        List\u003cPlan\u003e lastShownList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Plan planToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Plan editedPlan \u003d createEditedPlan(planToEdit, editPlanDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!planToEdit.isSamePlan(editedPlan) \u0026\u0026 model.hasPlan(editedPlan)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_PLAN, editedPlan.getPlanName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        model.setPlan(planToEdit, editedPlan);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        model.updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PLAN_SUCCESS, editedPlan.getPlanName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Creates and returns a {@code Plan} with the details of {@code planToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * edited with {@code editPlanDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private static Plan createEditedPlan(Plan planToEdit, EditPlanDescriptor editPlanDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        assert planToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Id id \u003d planToEdit.getId();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        PlanName updatedName \u003d editPlanDescriptor.getPlanName().orElse(planToEdit.getPlanName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        PlanDescription updatedDescription \u003d editPlanDescriptor.getPlanDescription().orElse("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                planToEdit.getPlanDescription());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDate startDate \u003d editPlanDescriptor.getStartDate().orElse(planToEdit.getStartDate());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDate endDate \u003d editPlanDescriptor.getEndDate().orElse(planToEdit.getEndDate());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Set\u003cTask\u003e tasks \u003d editPlanDescriptor.getTasks().orElse(planToEdit.getTasks());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new Plan(id, updatedName, updatedDescription, startDate, endDate, tasks);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!(other instanceof EditPlanCommand)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        EditPlanCommand e \u003d (EditPlanCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 editPlanDescriptor.equals(e.editPlanDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Stores the details to edit the Plan with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * corresponding field value of the Plan."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static class EditPlanDescriptor {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        private PlanName name;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        private PlanDescription description;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private LocalDate startDate;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private LocalDate endDate;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        private Set\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public EditPlanDescriptor() {}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public EditPlanDescriptor(EditPlanDescriptor toCopy) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            setPlanName(toCopy.name);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            setPlanDescription(toCopy.description);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            setTasks(toCopy.tasks);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, startDate, endDate, tasks);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public void setPlanName(PlanName name) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public Optional\u003cPlanName\u003e getPlanName() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public void setPlanDescription(PlanDescription description) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public Optional\u003cPlanDescription\u003e getPlanDescription() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public void setStartDate(LocalDate startDate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public Optional\u003cLocalDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public void setEndDate(LocalDate endDate) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public Optional\u003cLocalDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * Sets {@code tasks} to this object\u0027s {@code tasks}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * A defensive copy of {@code tasks} is used internally."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public void setTasks(Set\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            this.tasks \u003d (tasks !\u003d null) ? new HashSet\u003c\u003e(tasks) : null;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * Returns an unmodifiable task set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tasks} is null."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public Optional\u003cSet\u003cTask\u003e\u003e getTasks() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return (tasks !\u003d null) ? Optional.of(Collections.unmodifiableSet(tasks)) : Optional.empty();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            if (!(other instanceof EditPlanDescriptor)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            EditPlanDescriptor e \u003d (EditPlanDescriptor) other;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return getPlanName().equals(e.getPlanName())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    \u0026\u0026 getPlanDescription().equals(e.getPlanDescription())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    \u0026\u0026 getTasks().equals(e.getTasks());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 18,
      "Seris370": 212,
      "tiuweehan": 2
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/EditTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_TAGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Edits the details of an existing Tag in the algobase."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class EditTagCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edittag\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Tag identified \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"by the index number used in the displayed Tag list. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG] \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_TAG + \"Easy\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_EDIT_TAG_SUCCESS \u003d \"Tag [%1$s] edited.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Tag [%1$s] already exists in AlgoBase.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param index of the Tag in the filtered Tag list to edit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param name details to edit the Tag with"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditTagCommand(Index index, String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        List\u003cTag\u003e lastShownList \u003d model.getFilteredTagList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Tag tagToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Tag editedTag \u003d createEditedTag(tagToEdit, name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!tagToEdit.isSameTag(editedTag) \u0026\u0026 model.hasTag(editedTag)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_TAG, tagToEdit.getName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.setTag(tagToEdit, editedTag);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.setTags(tagToEdit, editedTag);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TAG_SUCCESS, editedTag.getName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param tagToEdit tag that need to edit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param name new tag name for tagToEdit"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @return Tag with updated name."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static Tag createEditedTag(Tag tagToEdit, String name) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assert tagToEdit !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assert name !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Id id \u003d tagToEdit.getId();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new Tag(id, name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!(other instanceof EditTagCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        EditTagCommand e \u003d (EditTagCommand) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 name.equals(e.name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 5,
      "tiuweehan": 2,
      "LuWenQ": 92
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \": exits AlgoBase.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting AlgoBase as requested ...\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 1,
      "LuWenQ": 8,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/FindPlanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.searchrule.plansearchrule.FindPlanDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Finds and lists all plans in algobase whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class FindPlanCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findplan\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Finds all plans whose names contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"the specified keywords (case-insensitive) or with time overlaps\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"Parameters: [n/PLAN_NAME] [d/PLAN_DESCRIPTION] [start/RANGE_START] [end/RANGE_END]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_DESCRIPTION + \"future questions of CS2040 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_START_DATE + \"2019/01/01 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_END_DATE + \"3019/12/12\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_NO_CONSTRAINTS \u003d \"At least one search constraint should be provided.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * {@code ALWAYS_TRUE_PLAN_PREDICATE} is a non-restrictive predicate that always returns true, which"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * is used as a placeholder for predicates not provided by the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private static final Predicate\u003cPlan\u003e ALWAYS_TRUE_PLAN_PREDICATE \u003d plan -\u003e true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final Predicate\u003cPlan\u003e predicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public FindPlanCommand(FindPlanDescriptor findPlanDescriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(findPlanDescriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.predicate \u003d findPlanDescriptor.getFindPlanPredicate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        model.updateFilteredPlanList(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                String.format(Messages.MESSAGE_PLANS_LISTED_OVERVIEW, model.getFilteredPlanList().size()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof FindPlanCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPlanCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "Seris370": 60
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.getClassStringField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"Parameter:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"COMMAND_NAME (can be empty if you want a list of possible commands)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final boolean isListAllCommands;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Class commandClass;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public HelpCommand(Class commandClass, boolean isListAllCommands) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.isListAllCommands \u003d isListAllCommands;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!isListAllCommands) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            requireNonNull(commandClass);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.commandClass \u003d commandClass;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.commandClass \u003d commandClass;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean isListAllCommands() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return isListAllCommands;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Class getCommandClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return commandClass;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (isListAllCommands) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            List\u003cString\u003e commandWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            for (Class command : Command.COMMAND_LIST) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                commandWords.add(getClassStringField(command, \"COMMAND_WORD\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            String commandPrompt \u003d \"Available commands are: \" + commandWords.toString() + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                + \"More information can be found in the popup window.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new CommandResult(commandPrompt, true, false, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            String commandUsage \u003d getClassStringField(commandClass, \"MESSAGE_USAGE\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new CommandResult(commandUsage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!(other instanceof HelpCommand)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        HelpCommand h \u003d (HelpCommand) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return isListAllCommands \u003d\u003d h.isListAllCommands()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 commandClass.equals(h.getCommandClass());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 4,
      "le0tan": 59,
      "LuWenQ": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/ListPlanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PLANS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Lists all plans in the algobase to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class ListPlanCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listplan\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \": Displays a list of all existing plans.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All plans listed.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        model.updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        model.getGuiState().getTabManager().setDisplayTabPaneIndex(ModelType.PLAN.getDisplayTabPaneIndex());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "Seris370": 22,
      "tiuweehan": 2,
      "LuWenQ": 4
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/ListTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_TAGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Lists all tags in the algobase to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class ListTagCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listtag\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \": Displays a list of all existing tags.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All tags listed.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        model.getGuiState().getTabManager().setDisplayTabPaneIndex(ModelType.TAG.getDisplayTabPaneIndex());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "tiuweehan": 2,
      "LuWenQ": 25
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/OpenTabCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.isWithinListRange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_MODEL_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_MODEL_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.exceptions.DuplicateTabDataException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Close tabs in the GUI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class OpenTabCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"opentab\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tab [%1$s] opened.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SWITCH_SUCCESS \u003d \"Switched to tab [%1$s].\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + \": opens a new Details Tab in the GUI\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + \"Parameters:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + PREFIX_MODEL_TYPE + \"NAME OF MODEL (problem, plan, tag) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + PREFIX_MODEL_INDEX + \"INDEX OF MODEL (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + \"Example:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + PREFIX_MODEL_TYPE + \"problem \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + PREFIX_MODEL_INDEX + \"1\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_INVALID_MODEL \u003d \"Model [%1$s] does not exist.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Tab at index [%1$s] does not exist.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Index modelIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private ModelType modelType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public OpenTabCommand(ModelType modelType, Index modelIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireAllNonNull(modelType, modelIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.modelType \u003d modelType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.modelIndex \u003d modelIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Retrieves an Id for a model of modelType at a given index."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param modelType"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param modelIndex"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IndexOutOfBoundsException"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalArgumentException"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Id retrieveId(Model model, ModelType modelType, Index modelIndex)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        throws IndexOutOfBoundsException, IllegalArgumentException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        switch (modelType) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        case PROBLEM:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            if (!isWithinListRange(modelIndex, model.getFilteredProblemList())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                throw new IndexOutOfBoundsException(\"Index does not exist within list!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return model.getFilteredProblemList().get(modelIndex.getZeroBased()).getId();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        case PLAN:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            if (!isWithinListRange(modelIndex, model.getFilteredPlanList())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                throw new IndexOutOfBoundsException(\"Index does not exist within list!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return model.getFilteredPlanList().get(modelIndex.getZeroBased()).getId();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        case TAG:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            if (!isWithinListRange(modelIndex, model.getFilteredTagList())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                throw new IndexOutOfBoundsException(\"Index does not exist within list!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return model.getFilteredTagList().get(modelIndex.getZeroBased()).getId();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new IllegalArgumentException(\"Unknown model\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        TabManager tabManager \u003d model.getGuiState().getTabManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            Id modelId \u003d retrieveId(model, modelType, modelIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            TabData tabData \u003d new TabData(modelType, modelId);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                // Adds a new tab and switches to that tab"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                tabManager.addDetailsTabData(tabData);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                Index tabIndex \u003d tabManager.getDetailsTabIndex(tabData);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                tabManager.setDetailsTabPaneIndex(tabIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, modelIndex.getOneBased()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            // If TabData is not unique, switch to the existing tab"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            } catch (DuplicateTabDataException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                assert tabManager.hasDetailsTabData(tabData);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                Index tabIndex \u003d tabManager.getDetailsTabIndex(tabData);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                tabManager.setDetailsTabPaneIndex(tabIndex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SWITCH_SUCCESS, modelIndex.getOneBased()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_INDEX, modelIndex.getOneBased()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (IllegalArgumentException exception) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalArgumentException(String.format(MESSAGE_INVALID_MODEL, modelType.getTabName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 5,
      "tiuweehan": 100
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/RewindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.commandhistory.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Rewinds the content of CommandBox to a previous successfully executed command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class RewindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rewind\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \": Rewinds the command input to a previous successfully executed command input.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer, represents how many commands ago you want to rewind to)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Rewind successfully!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String REWIND_TO_LAST_COMMAND_TEXT \u003d COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public RewindCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cCommandHistory\u003e commandHistories \u003d model.getCommandHistoryList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (targetIndex.getOneBased() \u003e commandHistories.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REWIND_NUMBER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        CommandHistory commandHistoryToShow \u003d commandHistories.get("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            commandHistories.size() - targetIndex.getOneBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new CommandResult(commandHistoryToShow.getCommandText(), false, false, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 47
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/SwitchTabCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAB_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAB_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Switch tabs in the GUI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class SwitchTabCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switchtab\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched to [%1$s] tab [%2$s].\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + \": Switches between Tabs in the GUI\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + \"Parameters:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + PREFIX_TAB_TYPE + \"TYPE OF TAB (display, details) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + PREFIX_TAB_INDEX + \"INDEX OF TAB (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + \"Example:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + PREFIX_TAB_TYPE + \"display \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        + PREFIX_TAB_INDEX + \"1\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_INVALID_TAB_TYPE \u003d \"Tab type [%1$s] does not exist.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_INVALID_TAB_INDEX \u003d \"Tab at index [%1$s] does not exist.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TabType tabType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public SwitchTabCommand(TabType tabType, Index displayTabIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireAllNonNull(tabType, displayTabIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabType \u003d tabType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.index \u003d displayTabIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            switch (tabType) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            case DISPLAY:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                model.getGuiState().getTabManager().setDisplayTabPaneIndex(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                return new CommandResult("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    String.format(MESSAGE_SUCCESS, tabType.DISPLAY.getName(), index.getOneBased())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            case DETAILS:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                model.getGuiState().getTabManager().setDetailsTabPaneIndex(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                return new CommandResult("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    String.format(MESSAGE_SUCCESS, tabType.DETAILS.getName(), index.getOneBased())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_TAB_TYPE, tabType.getName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_TAB_INDEX, index.getOneBased()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 5,
      "tiuweehan": 57
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/problem/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Adds a Problem to the algobase."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Adds a Problem to AlgoBase.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + PREFIX_AUTHOR + \"AUTHOR \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + PREFIX_WEBLINK + \"WEBLINK \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_DIFFICULTY + \"DIFFICULTY \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_SOURCE + \"SOURCE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_NAME + \"Sequences \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_AUTHOR + \"Tung Kam Chuen\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_WEBLINK + \"https://open.kattis.com/problems/sequences\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Find the sum of the number of inversions of the 2k sequences, modulo 1000000007 (109+7).\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_DIFFICULTY + \"3.0 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_SOURCE + \"Kattis\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Problem [%1$s] added to AlgoBase.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROBLEM \u003d \"Problem [%1$s] already exists in AlgoBase.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Problem toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Problem}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AddCommand(Problem problem) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(problem);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        toAdd \u003d problem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (model.hasProblem(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_PROBLEM, toAdd.getName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.addProblem(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.addTags(toAdd.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 18,
      "Seris370": 11,
      "LuWenQ": 15,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/problem/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Deletes a Problem identified using its displayed index from the algobase."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \": Deletes the Problem identified by the index number used in the displayed Problem list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DELETE_PROBLEM_SUCCESS \u003d \"Problem [%1$s] deleted.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        List\u003cProblem\u003e lastShownList \u003d model.getFilteredProblemList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Problem problemToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.deleteProblem(problemToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PROBLEM_SUCCESS, problemToDelete.getName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 9,
      "le0tan": 1,
      "LuWenQ": 10,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/problem/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PROBLEMS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Remark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Edits the details of an existing Problem in the algobase."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Edits the details of the Problem identified \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"by the index number used in the displayed Problem list. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"[\" + PREFIX_AUTHOR + \"AUTHOR] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"[\" + PREFIX_WEBLINK + \"WEBLINK] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"[\" + PREFIX_DIFFICULTY + \"DIFFICULTY] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"[\" + PREFIX_SOURCE + \"SOURCE] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_AUTHOR + \"Tung Kam Chuen \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_WEBLINK + \"https://open.kattis.com/problems/sequences\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_EDIT_PROBLEM_SUCCESS \u003d \"Problem [%1$s] edited.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROBLEM \u003d \"Problem [%1$s] already exists in AlgoBase.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final EditProblemDescriptor editProblemDescriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param index of the Problem in the filtered Problem list to edit"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param editProblemDescriptor details to edit the Problem with"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditCommand(Index index, EditProblemDescriptor editProblemDescriptor) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(editProblemDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.editProblemDescriptor \u003d new EditProblemDescriptor(editProblemDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        List\u003cProblem\u003e lastShownList \u003d model.getFilteredProblemList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Problem problemToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Problem editedProblem \u003d createEditedProblem(problemToEdit, editProblemDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!problemToEdit.isSameProblem(editedProblem) \u0026\u0026 model.hasProblem(editedProblem)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_PROBLEM, problemToEdit.getName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.setProblem(problemToEdit, editedProblem);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.addTags(editProblemDescriptor.tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.updateFilteredProblemList(PREDICATE_SHOW_ALL_PROBLEMS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PROBLEM_SUCCESS, editedProblem.getName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Creates and returns a {@code Problem} with the details of {@code problemToEdit}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * edited with {@code editProblemDescriptor}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static Problem createEditedProblem(Problem problemToEdit, EditProblemDescriptor editProblemDescriptor) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assert problemToEdit !\u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Id id \u003d problemToEdit.getId();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Name updatedName \u003d editProblemDescriptor.getName().orElse(problemToEdit.getName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Author updatedAuthor \u003d editProblemDescriptor.getAuthor().orElse(problemToEdit.getAuthor());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        WebLink updatedWebLink \u003d editProblemDescriptor.getWebLink().orElse(problemToEdit.getWebLink());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Description updatedDescription \u003d editProblemDescriptor.getDescription().orElse(problemToEdit.getDescription());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editProblemDescriptor.getTags().orElse(problemToEdit.getTags());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Difficulty updatedDifficulty \u003d editProblemDescriptor.getDifficulty().orElse(problemToEdit.getDifficulty());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Remark updatedRemark \u003d editProblemDescriptor.getRemark().orElse(problemToEdit.getRemark());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Source updatedSource \u003d editProblemDescriptor.getSource().orElse(problemToEdit.getSource());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new Problem(id, updatedName, updatedAuthor, updatedWebLink, updatedDescription, updatedTags,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                updatedDifficulty, updatedRemark, updatedSource);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 editProblemDescriptor.equals(e.editProblemDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Stores the details to edit the Problem with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * corresponding field value of the Problem."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static class EditProblemDescriptor {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        private Author author;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        private WebLink webLink;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private Difficulty difficulty;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private Source source;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public EditProblemDescriptor() {}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public EditProblemDescriptor(EditProblemDescriptor toCopy) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            setAuthor(toCopy.author);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            setWebLink(toCopy.webLink);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            setDifficulty(toCopy.difficulty);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            setSource(toCopy.source);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, author, webLink, description, tags, difficulty, remark, source);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public void setAuthor(Author author) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            this.author \u003d author;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public Optional\u003cAuthor\u003e getAuthor() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return Optional.ofNullable(author);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public void setWebLink(WebLink webLink) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            this.webLink \u003d webLink;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public Optional\u003cWebLink\u003e getWebLink() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return Optional.ofNullable(webLink);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void setDifficulty(Difficulty difficulty) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public Optional\u003cDifficulty\u003e getDifficulty() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return Optional.ofNullable(difficulty);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void setSource(Source source) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.source \u003d source;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public Optional\u003cSource\u003e getSource() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return Optional.ofNullable(source);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            if (!(other instanceof EditProblemDescriptor)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            EditProblemDescriptor e \u003d (EditProblemDescriptor) other;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    \u0026\u0026 getAuthor().equals(e.getAuthor())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    \u0026\u0026 getWebLink().equals(e.getWebLink())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 18,
      "Seris370": 2,
      "tiuweehan": 2,
      "le0tan": 43,
      "LuWenQ": 78,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/problem/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.FindProblemDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Finds and lists all problems in algobase fulfilling all the given constraints."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Finds a problem by name, author, and/or \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"description and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_AUTHOR + \"AUTHOR] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_SOURCE + \"SOURCE] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_DIFFICULTY + \"LOWER_BOUND-UPPER_BOUND] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + PREFIX_AUTHOR + \" Tung Kam Chuen\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_NO_CONSTRAINTS \u003d \"At least one search constraint should be provided.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Predicate\u003cProblem\u003e predicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final FindProblemDescriptor descriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindCommand(FindProblemDescriptor findProblemDescriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(findProblemDescriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // Creates a defensive copy of the original descriptor."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.descriptor \u003d new FindProblemDescriptor(findProblemDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.predicate \u003d findProblemDescriptor.getFindProblemPredicate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.updateFilteredProblemList(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                String.format(Messages.MESSAGE_PROBLEMS_LISTED_OVERVIEW, model.getFilteredProblemList().size()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 descriptor.equals(((FindCommand) other).descriptor)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 9,
      "le0tan": 28,
      "LuWenQ": 4,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/problem/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PROBLEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Lists all problems in the algobase to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \": lists all problems in AlgoBase\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All problems listed.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.updateFilteredProblemList(PREDICATE_SHOW_ALL_PROBLEMS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        model.getGuiState().getTabManager().setDisplayTabPaneIndex(ModelType.PROBLEM.getDisplayTabPaneIndex());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 4,
      "tiuweehan": 2,
      "LuWenQ": 8,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/problem/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SORTING_METHOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SORTING_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Sort Problems in the Problem list view."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Possible sorting methods for {@code SortCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public enum SortingMethod {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        byName,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        byAuthor,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        byWebLink,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        byDifficulty,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        bySource;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public static final String MESSAGE_CONSTRAINTS \u003d \"Sorting method should be one of \\\"name\\\", \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"\\\"author\\\", \\\"weblink\\\", \\\"difficulty\\\" or \\\"source\\\"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Possible sorting orders for {@code SortCommand}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public enum SortingOrder {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ascend,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        descend;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public static final String MESSAGE_CONSTRAINTS \u003d \"Sorting order should be either \\\"ascend\\\" or \\\"descend\\\"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Sorts the current view in a certain order. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + PREFIX_SORTING_METHOD + \"SORTING_METHOD \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + PREFIX_SORTING_ORDER + \"SORTING_ORDER\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + PREFIX_SORTING_METHOD + \"name \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + PREFIX_SORTING_ORDER + \"ascend\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"AlgoBase has been sorted.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Comparator\u003cProblem\u003e PROBLEM_NAME_COMPARATOR \u003d new Comparator\u003cProblem\u003e() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public int compare(Problem o1, Problem o2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (o1 \u003d\u003d o2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return o1.getName().compareTo(o2.getName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Comparator\u003cProblem\u003e PROBLEM_AUTHOR_COMPARATOR \u003d new Comparator\u003cProblem\u003e() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public int compare(Problem o1, Problem o2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (o1 \u003d\u003d o2) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return o1.getAuthor().compareTo(o2.getAuthor());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Comparator\u003cProblem\u003e PROBLEM_DIFFICULTY_COMPARATOR \u003d new Comparator\u003cProblem\u003e() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public int compare(Problem o1, Problem o2) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (o1 \u003d\u003d o2) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return o1.getDifficulty().compareTo(o2.getDifficulty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Comparator\u003cProblem\u003e PROBLEM_SOURCE_COMPARATOR \u003d new Comparator\u003cProblem\u003e() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public int compare(Problem o1, Problem o2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (o1 \u003d\u003d o2) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return o1.getSource().compareTo(o2.getSource());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Comparator\u003cProblem\u003e PROBLEM_WEB_LINK_COMPARATOR \u003d new Comparator\u003cProblem\u003e() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public int compare(Problem o1, Problem o2) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (o1 \u003d\u003d o2) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return o1.getWebLink().compareTo(o2.getWebLink());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final SortingMethod method;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final boolean sortByAscendingOrder;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public SortCommand(SortingMethod method, SortingOrder order) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireAllNonNull(method, order);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.method \u003d method;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        switch (order) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case ascend:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.sortByAscendingOrder \u003d true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case descend:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.sortByAscendingOrder \u003d false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalArgumentException(\"SortingOrder can be either ascend or descend\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        switch (this.method) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case byName:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (sortByAscendingOrder) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_NAME_COMPARATOR);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_NAME_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case byAuthor:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (sortByAscendingOrder) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_AUTHOR_COMPARATOR);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_AUTHOR_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case byDifficulty:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (sortByAscendingOrder) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_DIFFICULTY_COMPARATOR);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_DIFFICULTY_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case bySource:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (sortByAscendingOrder) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_SOURCE_COMPARATOR);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_SOURCE_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case byWebLink:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (sortByAscendingOrder) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_WEB_LINK_COMPARATOR);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_WEB_LINK_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalArgumentException(\"Sorting method doesn\u0027t exist.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 9,
      "le0tan": 167
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/storage/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.util.FileUtil.Format;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.storage.JsonSerializableAlgoBase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Exports AlgoBase to specified location."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Exports AlgoBase to the specified location.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_FORMAT + \"FORMAT \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PATH + \"PATH\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_FORMAT + \"JSON \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PATH + \"./\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_EXPORT_SUCCESS \u003d \"AlgoBase data exported to [%1$s].\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final Format format;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ExportCommand(Format format, String path) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.format \u003d format;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Path filePath \u003d Paths.get(path, \"algobase.json\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableAlgoBase(model.getAlgoBase()), filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new CommandResult(\"Filepath invalid.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXPORT_SUCCESS, filePath));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 format.equals(((ExportCommand) other).format)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 path.equals(((ExportCommand) other).path)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 68
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/storage/ImportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.util.FileUtil.Format;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.storage.JsonSerializableAlgoBase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Imports AlgoBase from specified location."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Imports AlgoBase from a specified location.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_FORMAT + \"FORMAT \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PATH + \"PATH\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_FORMAT + \"JSON \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PATH + \"./\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_EXPORT_SUCCESS \u003d \"AlgoBase data successfully imported from [%1$s].\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final Format format;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ImportCommand(Format format, String path) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.format \u003d format;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Path filePath \u003d Paths.get(path);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            Optional\u003cJsonSerializableAlgoBase\u003e jsonAlgoBase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                filePath, JsonSerializableAlgoBase.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            model.setAlgoBase(jsonAlgoBase.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (DataConversionException | IllegalValueException | NoSuchElementException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new CommandResult(\"Invalid data.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXPORT_SUCCESS, filePath));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 format.equals(((ImportCommand) other).format)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 path.equals(((ImportCommand) other).path)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 73
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/task/AddTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PROBLEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PLANS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Adds a Task to a Plan."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtask\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Adds a task to a training plan.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"PLAN_INDEX \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PROBLEM + \"PROBLEM_INDEX \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_DUE_DATE + \"DUE_DATE\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PROBLEM + \"10 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_DUE_DATE + \"2019-12-12\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Task [%1$s] added to Plan [%2$s].\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task [%1$s] already exists in Plan [%2$s].\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final AddTaskDescriptor addTaskDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates an AddTaskCommand to add a {@code Task} to the specified {@code Plan}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param addTaskDescriptor details of the plan and problem involved"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public AddTaskCommand(AddTaskDescriptor addTaskDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(addTaskDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.addTaskDescriptor \u003d addTaskDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cPlan\u003e lastShownPlanList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cProblem\u003e lastShownProblemList \u003d model.getFilteredProblemList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (addTaskDescriptor.planIndex.getZeroBased() \u003e\u003d lastShownPlanList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (addTaskDescriptor.problemIndex.getZeroBased() \u003e\u003d lastShownProblemList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan planToUpdate \u003d lastShownPlanList.get(addTaskDescriptor.planIndex.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Problem problem \u003d lastShownProblemList.get(addTaskDescriptor.problemIndex.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDate taskDate \u003d addTaskDescriptor.targetDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDate planDate \u003d planToUpdate.getEndDate();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (taskDate !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            if (!planToUpdate.checkWithinDateRange(taskDate)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TASK_DATE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            task \u003d new Task(problem, taskDate, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            task \u003d new Task(problem, planDate, false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e taskSet \u003d new HashSet\u003c\u003e(planToUpdate.getTasks());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (taskSet.contains(task)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                String.format(MESSAGE_DUPLICATE_TASK, task.getProblem().getName(), planToUpdate.getPlanName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskSet.add(task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan updatedPlan \u003d Plan.updateTasks(planToUpdate, taskSet);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.setPlan(planToUpdate, updatedPlan);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            String.format(MESSAGE_SUCCESS, task.getProblem().getName(), updatedPlan.getPlanName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 addTaskDescriptor.equals(((AddTaskCommand) other).addTaskDescriptor));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Stores the details of the plan and problem involved."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static class AddTaskDescriptor {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index planIndex;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index problemIndex;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private LocalDate targetDate;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public AddTaskDescriptor(Index planIndex, Index problemIndex, LocalDate targetDate) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.planIndex \u003d planIndex;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.problemIndex \u003d problemIndex;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof AddTaskDescriptor // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 planIndex.equals(((AddTaskDescriptor) other).planIndex)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 problemIndex.equals(((AddTaskDescriptor) other).problemIndex)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 targetDate.equals(((AddTaskDescriptor) other).targetDate));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 133
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/task/CopyTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN_FROM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN_TO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PLANS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Copies a Task from one Plan to another."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class CopyTaskCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"copytask\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Copies the Task identified by the index from one plan to another.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"TASK_INDEX \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN_FROM + \"PLAN_INDEX \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN_TO + \"PLAN_INDEX\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"10 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN_FROM + \"1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN_TO + \"2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_MOVE_TASK_SUCCESS \u003d \"Task [%1$s] copied from Plan [%2$s] to Plan [%3$s].\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task [%1$s] already exists in Plan [%2$s].\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final CopyTaskDescriptor copyTaskDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates a CopyTaskCommand to copy a {@code Task} from the specified {@code Plan} to another"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param copyTaskDescriptor details of the plan and problem involved"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CopyTaskCommand(CopyTaskDescriptor copyTaskDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.copyTaskDescriptor \u003d copyTaskDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cPlan\u003e lastShownPlanList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (copyTaskDescriptor.planFromIndex.getZeroBased() \u003e\u003d lastShownPlanList.size()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || copyTaskDescriptor.planToIndex.getZeroBased() \u003e\u003d lastShownPlanList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan planFrom \u003d lastShownPlanList.get(copyTaskDescriptor.planFromIndex.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan planTo \u003d lastShownPlanList.get(copyTaskDescriptor.planToIndex.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cTask\u003e taskListFrom \u003d planFrom.getTaskList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cTask\u003e taskListTo \u003d planTo.getTaskList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        int taskIndex \u003d copyTaskDescriptor.taskIndex.getZeroBased();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (taskIndex \u003e\u003d taskListFrom.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Task taskToCopy \u003d taskListFrom.get(taskIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e taskSetTo \u003d new HashSet\u003c\u003e(taskListTo);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (taskSetTo.contains(taskToCopy)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                String.format(MESSAGE_DUPLICATE_TASK, taskToCopy.getProblem().getName(), planTo.getPlanName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!planTo.checkWithinDateRange(taskToCopy.getTargetDate())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DATE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskSetTo.add(taskToCopy);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan updatedPlanTo \u003d Plan.updateTasks(planTo, taskSetTo);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.setPlan(planTo, updatedPlanTo);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            String.format(MESSAGE_MOVE_TASK_SUCCESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                taskToCopy.getProblem().getName(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                planFrom.getPlanName(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                updatedPlanTo.getPlanName()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            )"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof CopyTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 copyTaskDescriptor.equals(((CopyTaskCommand) other).copyTaskDescriptor)); // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Stores the details of the plan and problem involved."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static class CopyTaskDescriptor {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index taskIndex;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index planFromIndex;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index planToIndex;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public CopyTaskDescriptor(Index taskIndex, Index planFromIndex, Index planToIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.planFromIndex \u003d planFromIndex;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.planToIndex \u003d planToIndex;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof CopyTaskDescriptor // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 taskIndex.equals(((CopyTaskDescriptor) other).taskIndex)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 planFromIndex.equals(((CopyTaskDescriptor) other).planFromIndex)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 planToIndex.equals(((CopyTaskDescriptor) other).planToIndex));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 127
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/task/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PLANS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Deletes a Task identified using its index in the Plan and the Plan index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletetask\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Deletes the Task identified by the index in the plan.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"PLAN_INDEX \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"TASK_INDEX\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"10\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Task [%1$s] deleted from Plan [%2$s].\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final DeleteTaskDescriptor deleteTaskDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates a DeleteTaskCommand to delete a {@code Task} in the specified {@code Plan}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param deleteTaskDescriptor details of the plan and problem involved"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public DeleteTaskCommand(DeleteTaskDescriptor deleteTaskDescriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.deleteTaskDescriptor \u003d deleteTaskDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cPlan\u003e lastShownPlanList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (deleteTaskDescriptor.planIndex.getZeroBased() \u003e\u003d lastShownPlanList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan planToUpdate \u003d lastShownPlanList.get(deleteTaskDescriptor.planIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cTask\u003e taskList \u003d planToUpdate.getTaskList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        int taskIndex \u003d deleteTaskDescriptor.taskIndex.getZeroBased();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (taskIndex \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Task task \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskList.remove(taskIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e taskSet \u003d new HashSet\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan updatedPlan \u003d Plan.updateTasks(planToUpdate, taskSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.setPlan(planToUpdate, updatedPlan);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            String.format(MESSAGE_DELETE_TASK_SUCCESS, task.getProblem().getName(), updatedPlan.getPlanName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 deleteTaskDescriptor.equals(((DeleteTaskCommand) other).deleteTaskDescriptor)); // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Stores the details of the plan and problem involved."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static class DeleteTaskDescriptor {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index planIndex;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index taskIndex;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public DeleteTaskDescriptor(Index planIndex, Index taskIndex) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.planIndex \u003d planIndex;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof DeleteTaskDescriptor // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 planIndex.equals(((DeleteTaskDescriptor) other).planIndex)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 taskIndex.equals(((DeleteTaskDescriptor) other).taskIndex));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 105
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/task/DoneTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PLANS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Marks a Task identified using its index in the Plan and the Plan index as done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class DoneTaskCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"donetask\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Marks the Task identified by the index as done in the plan.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"PLAN_INDEX \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"TASK_INDEX\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"10\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Task [%1$s] marked as done in Plan [%2$s].\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final DoneTaskDescriptor doneTaskDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates a DoneTaskCommand to mark a {@code Task} as done in the specified {@code Plan}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param doneTaskDescriptor details of the plan and problem involved"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public DoneTaskCommand(DoneTaskDescriptor doneTaskDescriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.doneTaskDescriptor \u003d doneTaskDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cPlan\u003e lastShownPlanList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (doneTaskDescriptor.planIndex.getZeroBased() \u003e\u003d lastShownPlanList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan planToUpdate \u003d lastShownPlanList.get(doneTaskDescriptor.planIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cTask\u003e taskList \u003d planToUpdate.getTaskList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        int taskIndex \u003d doneTaskDescriptor.taskIndex.getZeroBased();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (taskIndex \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Task taskToUpdate \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (taskToUpdate.getIsSolved()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_TASK_ALREADY_DONE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskList.remove(taskIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e taskSet \u003d new HashSet\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskSet.add(Task.updateStatus(taskToUpdate, true));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan updatedPlan \u003d Plan.updateTasks(planToUpdate, taskSet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.setPlan(planToUpdate, updatedPlan);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            String.format(MESSAGE_DONE_TASK_SUCCESS, taskToUpdate.getProblem().getName(), updatedPlan.getPlanName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof DoneTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 doneTaskDescriptor.equals(((DoneTaskCommand) other).doneTaskDescriptor)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Stores the details of the plan and problem involved."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static class DoneTaskDescriptor {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index planIndex;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index taskIndex;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public DoneTaskDescriptor(Index planIndex, Index taskIndex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.planIndex \u003d planIndex;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof DoneTaskDescriptor // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 planIndex.equals(((DoneTaskDescriptor) other).planIndex)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 taskIndex.equals(((DoneTaskDescriptor) other).taskIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 109
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/task/EditTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PLANS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Marks a Task identified using its index in the Plan and the Plan index as done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class EditTaskCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edittask\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Edits the due date of the Task identified by the index in the plan.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"PLAN_INDEX \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"TASK_INDEX \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_DUE_DATE + \"DUE_DATE\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"10 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_DUE_DATE + \"2019-12-12\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Task [%1$s] set to be due at [%2$s] in Plan [%3$s].\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates a EditTaskCommand to change due date of a {@code Task} in the specified {@code Plan}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param editTaskDescriptor details of the plan and problem involved"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public EditTaskCommand(EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.editTaskDescriptor \u003d editTaskDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cPlan\u003e lastShownPlanList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (editTaskDescriptor.planIndex.getZeroBased() \u003e\u003d lastShownPlanList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan planToUpdate \u003d lastShownPlanList.get(editTaskDescriptor.planIndex.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cTask\u003e taskList \u003d planToUpdate.getTaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        int taskIndex \u003d editTaskDescriptor.taskIndex.getZeroBased();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (taskIndex \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Task taskToUpdate \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDate newDate \u003d editTaskDescriptor.targetDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!planToUpdate.checkWithinDateRange(newDate)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DATE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskList.remove(taskIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e taskSet \u003d new HashSet\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskSet.add(Task.updateDueDate(taskToUpdate, newDate));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan updatedPlan \u003d Plan.updateTasks(planToUpdate, taskSet);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.setPlan(planToUpdate, updatedPlan);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            String.format(MESSAGE_EDIT_TASK_SUCCESS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                taskToUpdate.getProblem().getName(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                editTaskDescriptor.targetDate,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                updatedPlan.getPlanName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof EditTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(((EditTaskCommand) other).editTaskDescriptor)); // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Stores the details of the plan and problem involved."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index planIndex;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index taskIndex;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private LocalDate targetDate;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public EditTaskDescriptor(Index planIndex, Index problemIndex, LocalDate targetDate) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.planIndex \u003d planIndex;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.taskIndex \u003d problemIndex;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof EditTaskDescriptor // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 planIndex.equals(((EditTaskDescriptor) other).planIndex)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 taskIndex.equals(((EditTaskDescriptor) other).taskIndex)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 targetDate.equals(((EditTaskDescriptor) other).targetDate));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 120
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/task/MoveTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN_FROM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN_TO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PLANS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Moves a Task from one Plan to another."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class MoveTaskCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"movetask\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Moves the Task identified by the index from one plan to another.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"TASK_INDEX \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN_FROM + \"PLAN_INDEX \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN_TO + \"PLAN_INDEX\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"10 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN_FROM + \"1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN_TO + \"2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_MOVE_TASK_SUCCESS \u003d \"Task [%1$s] moved from Plan [%2$s] to Plan [%3$s].\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task [%1$s] already exists in Plan [%2$s].\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final MoveTaskDescriptor moveTaskDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates a MoveTaskCommand to move a {@code Task} from the specified {@code Plan} to another"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param moveTaskDescriptor details of the plan and problem involved"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public MoveTaskCommand(MoveTaskDescriptor moveTaskDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.moveTaskDescriptor \u003d moveTaskDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cPlan\u003e lastShownPlanList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (moveTaskDescriptor.planFromIndex.getZeroBased() \u003e\u003d lastShownPlanList.size()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || moveTaskDescriptor.planToIndex.getZeroBased() \u003e\u003d lastShownPlanList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan planFrom \u003d lastShownPlanList.get(moveTaskDescriptor.planFromIndex.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan planTo \u003d lastShownPlanList.get(moveTaskDescriptor.planToIndex.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cTask\u003e taskListFrom \u003d planFrom.getTaskList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cTask\u003e taskListTo \u003d planTo.getTaskList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        int taskIndex \u003d moveTaskDescriptor.taskIndex.getZeroBased();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (taskIndex \u003e\u003d taskListFrom.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Task taskToMove \u003d taskListFrom.get(taskIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskListFrom.remove(taskIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e taskSetFrom \u003d new HashSet\u003c\u003e(taskListFrom);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e taskSetTo \u003d new HashSet\u003c\u003e(taskListTo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (taskSetTo.contains(taskToMove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                String.format(MESSAGE_DUPLICATE_TASK, taskToMove.getProblem().getName(), planTo.getPlanName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!planTo.checkWithinDateRange(taskToMove.getTargetDate())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DATE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskSetTo.add(taskToMove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan updatedPlanFrom \u003d Plan.updateTasks(planFrom, taskSetFrom);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan updatedPlanTo \u003d Plan.updateTasks(planTo, taskSetTo);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.setPlan(planFrom, updatedPlanFrom);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.setPlan(planTo, updatedPlanTo);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            String.format(MESSAGE_MOVE_TASK_SUCCESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                taskToMove.getProblem().getName(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                updatedPlanFrom.getPlanName(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                updatedPlanTo.getPlanName()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            )"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof MoveTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 moveTaskDescriptor.equals(((MoveTaskCommand) other).moveTaskDescriptor)); // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Stores the details of the plan and problem involved."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static class MoveTaskDescriptor {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index taskIndex;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index planFromIndex;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index planToIndex;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public MoveTaskDescriptor(Index taskIndex, Index planFromIndex, Index planToIndex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.planFromIndex \u003d planFromIndex;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.planToIndex \u003d planToIndex;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof MoveTaskDescriptor // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 taskIndex.equals(((MoveTaskDescriptor) other).taskIndex)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 planFromIndex.equals(((MoveTaskDescriptor) other).planFromIndex)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 planToIndex.equals(((MoveTaskDescriptor) other).planToIndex));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 131
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/task/SetPlanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Set the plan to be displayed in TaskManagementPane."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class SetPlanCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setplan\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Set as current plan the Plan identified by the index number used in the displayed Plan list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DELETE_PROBLEM_SUCCESS \u003d \"Plan [%1$s] set as current plan.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public SetPlanCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cPlan\u003e lastShownList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan plan \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.setCurrentPlan(plan);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PROBLEM_SUCCESS, plan.getPlanName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof SetPlanCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SetPlanCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 57
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/task/UndoneTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PLANS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Marks a Task identified using its index in the Plan and the Plan index as undone."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class UndoneTaskCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undonetask\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Marks the Task identified by the index as undone in the plan.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"PLAN_INDEX\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"TASK_INDEX\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"10\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_UNDONE_TASK_SUCCESS \u003d \"Task [%1$s] marked as undone in Plan [%2$s].\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final UndoneTaskDescriptor undoneTaskDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates a UndoneTaskCommand to mark a {@code Task} as undone in the specified {@code Plan}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param undoneTaskDescriptor details of the plan and problem involved"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public UndoneTaskCommand(UndoneTaskDescriptor undoneTaskDescriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.undoneTaskDescriptor \u003d undoneTaskDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cPlan\u003e lastShownPlanList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (undoneTaskDescriptor.planIndex.getZeroBased() \u003e\u003d lastShownPlanList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan planToUpdate \u003d lastShownPlanList.get(undoneTaskDescriptor.planIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cTask\u003e taskList \u003d planToUpdate.getTaskList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        int taskIndex \u003d undoneTaskDescriptor.taskIndex.getZeroBased();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (taskIndex \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Task taskToUpdate \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!taskToUpdate.getIsSolved()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_TASK_NOT_YET_DONE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskList.remove(taskIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e taskSet \u003d new HashSet\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskSet.add(Task.updateStatus(taskToUpdate, false));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan updatedPlan \u003d Plan.updateTasks(planToUpdate, taskSet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.setPlan(planToUpdate, updatedPlan);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            String.format(MESSAGE_UNDONE_TASK_SUCCESS, taskToUpdate.getProblem().getName(), updatedPlan.getPlanName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof UndoneTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 undoneTaskDescriptor.equals(((UndoneTaskCommand) other).undoneTaskDescriptor)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Stores the details of the plan and problem involved."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static class UndoneTaskDescriptor {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index planIndex;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index taskIndex;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public UndoneTaskDescriptor(Index planIndex, Index taskIndex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.planIndex \u003d planIndex;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof UndoneTaskDescriptor // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 planIndex.equals(((UndoneTaskDescriptor) other).planIndex)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 taskIndex.equals(((UndoneTaskDescriptor) other).taskIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 109
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/AddFindRuleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_NAME_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.isAnyNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.parseAuthorPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.parseDescriptionPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.parseDifficultyPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.parseNamePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.parseSourcePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.parseTagPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.AddFindRuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.AuthorMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DifficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.SourceMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.TagIncludesKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Parses input arguments and creates a new AddFindRuleCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class AddFindRuleCommandParser implements Parser\u003cAddFindRuleCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddFindRuleCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * and returns a AddFindRuleCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public AddFindRuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_DESCRIPTION, PREFIX_SOURCE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                PREFIX_DIFFICULTY, PREFIX_TAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // Every find rule must have a name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFindRuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final DifficultyIsInRangePredicate difficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            difficultyIsInRangePredicate \u003d parseDifficultyPredicate(argumentMultimap.getValue(PREFIX_DIFFICULTY).get(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                AddFindRuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            difficultyIsInRangePredicate \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!Name.isValidName(argumentMultimap.getPreamble())) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_NAME_FORMAT, Name.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final Name name \u003d new Name(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final NameContainsKeywordsPredicate nameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            nameContainsKeywordsPredicate \u003d parseNamePredicate(argumentMultimap.getValue(PREFIX_NAME).get(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                AddFindRuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            nameContainsKeywordsPredicate \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final AuthorMatchesKeywordPredicate authorMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_AUTHOR).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            authorMatchesKeywordPredicate \u003d parseAuthorPredicate(argumentMultimap.getValue(PREFIX_AUTHOR).get(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                AddFindRuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            authorMatchesKeywordPredicate \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final DescriptionContainsKeywordsPredicate descriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            descriptionContainsKeywordsPredicate \u003d parseDescriptionPredicate("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                argumentMultimap.getValue(PREFIX_DESCRIPTION).get(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                AddFindRuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            descriptionContainsKeywordsPredicate \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final SourceMatchesKeywordPredicate sourceMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_SOURCE).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            sourceMatchesKeywordPredicate \u003d parseSourcePredicate(argumentMultimap.getValue(PREFIX_SOURCE).get(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                AddFindRuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            sourceMatchesKeywordPredicate \u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final TagIncludesKeywordsPredicate tagIncludesKeywordsPredicate;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            tagIncludesKeywordsPredicate \u003d parseTagPredicate(argumentMultimap.getValue(PREFIX_TAG).get(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                AddFindRuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            tagIncludesKeywordsPredicate \u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!isAnyNonNull(nameContainsKeywordsPredicate, authorMatchesKeywordPredicate,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            descriptionContainsKeywordsPredicate, sourceMatchesKeywordPredicate,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            difficultyIsInRangePredicate, tagIncludesKeywordsPredicate)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                AddFindRuleCommand.MESSAGE_NO_CONSTRAINTS));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ProblemSearchRule findRule \u003d new ProblemSearchRule(name,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            nameContainsKeywordsPredicate,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            authorMatchesKeywordPredicate,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            descriptionContainsKeywordsPredicate,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            sourceMatchesKeywordPredicate,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            difficultyIsInRangePredicate,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            tagIncludesKeywordsPredicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new AddFindRuleCommand(findRule);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 123
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/AddPlanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.AddPlanCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Parses input arguments and creates a new AddPlanCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class AddPlanCommandParser implements Parser\u003cAddPlanCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPlanCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * and returns an AddPlanCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public AddPlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                        PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPlanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        PlanName name \u003d ParserUtil.parsePlanName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        PlanDescription description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            description \u003d ParserUtil.parsePlanDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            description \u003d PlanDescription.DEFAULT_PLAN_DESCRIPTION;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDate startDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_START_DATE)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDate endDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_END_DATE)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            endDate \u003d LocalDate.now().plusMonths(1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Set\u003cTask\u003e tasks \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Plan plan \u003d new Plan(name, description, startDate, endDate, tasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new AddPlanCommand(plan);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 5,
      "Seris370": 74
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/AddTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTagCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * and returns an AddTagCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AddTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Tag tag \u003d new ParserUtil().parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new AddTagCommand(tag);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "LuWenQ": 40
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/AlgoBaseParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.AddFindRuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.AddPlanCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.ApplyCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.CloseTabCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.DeleteFindRuleCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.DeletePlanCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.EditPlanCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.EditTagCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.FindPlanCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.ListPlanCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.ListTagCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.OpenTabCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.RewindCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.SwitchTabCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.AddCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.DeleteCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.EditCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.FindCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.ListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.SortCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.storage.ExportCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.storage.ImportCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.CopyTaskCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.DoneTaskCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.MoveTaskCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.SetPlanCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.UndoneTaskCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.problem.AddCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.problem.DeleteCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.problem.EditCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.problem.FindCommandParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.problem.SortCommandParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.storage.ExportCommandParser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.storage.ImportCommandParser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.task.AddTaskCommandParser;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.task.CopyTaskCommandParser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.task.DeleteTaskCommandParser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.task.DoneTaskCommandParser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.task.EditTaskCommandParser;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.task.MoveTaskCommandParser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.task.SetPlanCommandParser;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.task.UndoneTaskCommandParser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class AlgoBaseParser {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // Problem"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // Plan"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case AddPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new AddPlanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case DeletePlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new DeletePlanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case EditPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new EditPlanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case FindPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new FindPlanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case ListPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new ListPlanCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // Task"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case CopyTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new CopyTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case DoneTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new DoneTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new EditTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case MoveTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new MoveTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case SetPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new SetPlanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case UndoneTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new UndoneTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // Tag"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new AddTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case DeleteTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new DeleteTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case ListTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new ListTagCommand();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case EditTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new EditTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // Find Rule"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case AddFindRuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new AddFindRuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case ApplyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new ApplyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case DeleteFindRuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new DeleteFindRuleParser().parse(arguments);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // Rewind"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case RewindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new RewindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // Storage"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // UI"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        case SwitchTabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return new SwitchTabCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        case OpenTabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return new OpenTabCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        case CloseTabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return new CloseTabCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        // Util"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 96,
      "Seris370": 6,
      "le0tan": 18,
      "tiuweehan": 22,
      "LuWenQ": 13,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/ApplyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.ApplyCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Parses input arguments and creates a new ApplyCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class ApplyCommandParser implements Parser\u003cApplyCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ApplyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new ApplyCommand(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ApplyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 24
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /* Field */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final Prefix PREFIX_AUTHOR \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Prefix PREFIX_DIFFICULTY \u003d new Prefix(\"diff/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Prefix PREFIX_SOURCE \u003d new Prefix(\"src/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_WEBLINK \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /* Sorting */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Prefix PREFIX_SORTING_METHOD \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Prefix PREFIX_SORTING_ORDER \u003d new Prefix(\"ord/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /* Model */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_PLAN \u003d new Prefix(\"plan/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_PLAN_FROM \u003d new Prefix(\"from/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_PLAN_TO \u003d new Prefix(\"to/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_PROBLEM \u003d new Prefix(\"prob/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_TASK \u003d new Prefix(\"task/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /* Date */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_DUE_DATE \u003d new Prefix(\"due/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"start/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"end/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /* Storage */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_FORMAT \u003d new Prefix(\"format/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_PATH \u003d new Prefix(\"path/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /* UI */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final Prefix PREFIX_TAB_TYPE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final Prefix PREFIX_TAB_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final Prefix PREFIX_MODEL_TYPE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final Prefix PREFIX_MODEL_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 19,
      "le0tan": 5,
      "tiuweehan": 4,
      "LuWenQ": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/CloseTabCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAB_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.CloseTabCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.SwitchTabCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " *  Parses input arguments and creates a new SwitchTabCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class CloseTabCommandParser implements Parser\u003cCloseTabCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public CloseTabCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_TAB_INDEX);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TAB_INDEX)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            index \u003d ParserUtil.parseTabIndex(argMultimap.getValue(PREFIX_TAB_INDEX).get());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchTabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new CloseTabCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 31
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/DeleteFindRuleParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.DeleteFindRuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Parses input arguments and creates a new DeleteFindRuleCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class DeleteFindRuleParser implements Parser\u003cDeleteFindRuleCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public DeleteFindRuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new DeleteFindRuleCommand(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteFindRuleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 25
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/DeletePlanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.DeletePlanCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Parses input arguments and creates a new DeletePlanCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class DeletePlanCommandParser implements Parser\u003cDeletePlanCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePlanCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * and returns a DeletePlanCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public DeletePlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return new DeletePlanCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePlanCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 30
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/DeleteTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Parses input arguments and creates a new DeleteTagCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTagCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * and returns a DeleteTagCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public DeleteTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return new DeleteTagCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "LuWenQ": 29
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/EditPlanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.EditPlanCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.EditPlanCommand.EditPlanDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Parses input arguments and creates a new EditPlanCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class EditPlanCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPlanCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * and returns an EditPlanCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public EditPlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                        PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPlanCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        EditPlanDescriptor editPlanDescriptor \u003d new EditPlanDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editPlanDescriptor.setPlanName(ParserUtil.parsePlanName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editPlanDescriptor.setPlanDescription(ParserUtil.parsePlanDescription("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editPlanDescriptor.setStartDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editPlanDescriptor.setEndDate("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!editPlanDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(EditPlanCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new EditPlanCommand(index, editPlanDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    // TODO: edit problems in a plan"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 65
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/EditTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.EditTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Parses input arguments and creates a new EditTagCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class EditTagCommandParser implements Parser\u003cEditTagCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTagCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * and returns an EditTagCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTagCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new EditTagCommand(index, argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 36
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/FindPlanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.hasPrefixesPresent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.parseDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.FindPlanCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.searchrule.plansearchrule.FindPlanDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.searchrule.plansearchrule.Keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.searchrule.plansearchrule.PlanDescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.searchrule.plansearchrule.PlanNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.searchrule.plansearchrule.TimeRange;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.searchrule.plansearchrule.TimeRangePredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Parses input arguments and creates a new FindPlanCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class FindPlanCommandParser implements Parser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private List\u003cString\u003e getArgumentValueAsList(String argValue) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        String trimmedArg \u003d argValue.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        String[] keywords \u003d trimmedArg.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return Arrays.asList(keywords);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindPlanCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * and returns a FindPlanCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public FindPlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                        PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!hasPrefixesPresent(argumentMultimap, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || !argumentMultimap.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPlanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        FindPlanDescriptor findPlanDescriptor \u003d new FindPlanDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            List\u003cString\u003e planNameKeywords \u003d getArgumentValueAsList(argumentMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            List\u003cKeyword\u003e keywords \u003d planNameKeywords.stream().map(Keyword::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            findPlanDescriptor.setPlanNamePredicate(new PlanNameContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            List\u003cString\u003e planDescriptionKeywords \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    getArgumentValueAsList(argumentMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            List\u003cKeyword\u003e keywords \u003d planDescriptionKeywords.stream().map(Keyword::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            findPlanDescriptor.setPlanDescriptionPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new PlanDescriptionContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_START_DATE).isPresent()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || argumentMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            if (argumentMultimap.getValue(PREFIX_START_DATE).isEmpty()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    || argumentMultimap.getValue(PREFIX_END_DATE).isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimeRange.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            String start \u003d argumentMultimap.getValue(PREFIX_START_DATE).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            String end \u003d argumentMultimap.getValue(PREFIX_END_DATE).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                LocalDate startDate \u003d parseDate(start);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                LocalDate endDate \u003d parseDate(end);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                TimeRange timeRange \u003d new TimeRange(startDate, endDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                System.out.print(timeRange);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                findPlanDescriptor.setTimeRangePredicate(new TimeRangePredicate(timeRange));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPlanCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!findPlanDescriptor.isAnyFieldProvided()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(FindPlanCommand.MESSAGE_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new FindPlanCommand(findPlanDescriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 97
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/HelpCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.getClassStringField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public HelpCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new HelpCommand(null, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            for (Class command : Command.COMMAND_LIST) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                String commandWord \u003d getClassStringField(command, \"COMMAND_WORD\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                if (commandWord.equals(trimmedArgs)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    return new HelpCommand(command, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_NAME, trimmedArgs));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 30
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/OpenTabCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_MODEL_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_MODEL_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.OpenTabCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " *  Parses input arguments and creates a new OpenTabCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class OpenTabCommandParser implements Parser\u003cOpenTabCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public OpenTabCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_MODEL_TYPE, PREFIX_MODEL_INDEX);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelType modelType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MODEL_TYPE)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            modelType \u003d ParserUtil.parseModelType(argMultimap.getValue(PREFIX_MODEL_TYPE).get());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenTabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MODEL_INDEX)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            index \u003d ParserUtil.parseModelIndex(argMultimap.getValue(PREFIX_MODEL_INDEX).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenTabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new OpenTabCommand(modelType, index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 40
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_DIFFICULTY_RANGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_KEYWORD_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.isArrayOfLength;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.util.FileUtil.Format;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.OpenTabCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.SwitchTabCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.SortCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Remark;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.AuthorMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DifficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.SourceMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.TagIncludesKeywordsPredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String DATE_CONSTRAINTS \u003d \"DateTime format should be \u0027yyyy-MM-dd\u0027.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses a {@code String name} into a {@code PlanName}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static PlanName parsePlanName(String name) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new PlanName(trimmedName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses a {@code String author} into a {@code Author}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws ParseException if the given {@code author} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static Author parseAuthor(String author) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(author);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        String trimmedAuthor \u003d author.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!Author.isValidAuthor(trimmedAuthor)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ParseException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new Author(trimmedAuthor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses a {@code String description} into an {@code PlanDescription}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static PlanDescription parsePlanDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new PlanDescription(trimmedDescription);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses a {@code String weblink} into an {@code WebLink}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws ParseException if the given {@code weblink} is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static WebLink parseWeblink(String weblink) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(weblink);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        String trimmedWeblink \u003d weblink.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!WebLink.isValidWeblink(trimmedWeblink)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ParseException(WebLink.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new WebLink(trimmedWeblink);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a {@code String difficulty} into an {@code Difficulty}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if the given {@code difficulty} is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static Difficulty parseDifficulty(String difficulty) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        String trimmedDifficulty \u003d difficulty.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!Difficulty.isValidDifficulty(trimmedDifficulty)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new Difficulty(trimmedDifficulty);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a {@code String remark} into an {@code Remark}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if the given {@code remark} is invalid."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!Remark.isValidRemark(trimmedRemark)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new Remark(remark);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a {@code String source} into an {@code Source}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if the given {@code source} is invalid."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static Source parseSource(String source) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        String trimmedSource \u003d source.trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!Source.isValidSource(trimmedSource)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new Source(source);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a {@code String method} into a {@code SortingMethod}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the given {@code String method} is invalid."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static SortCommand.SortingMethod parseSortingMethod(String method) throws ParseException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        switch (method) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingMethod.byName;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"author\":"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingMethod.byAuthor;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"difficulty\":"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingMethod.byDifficulty;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"source\":"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingMethod.bySource;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"weblink\":"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingMethod.byWebLink;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(SortCommand.SortingMethod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a {@code String order} into a {@code SortingOrder}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the given {@code String order} is invalid."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static SortCommand.SortingOrder parseSortingOrder(String order) throws ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        switch (order) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"ascend\":"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingOrder.ascend;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"descend\":"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingOrder.descend;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(SortCommand.SortingOrder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns true if some of the prefixes contain present {@code Optional} values in the given"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static boolean hasPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /** Parses a {@code String date} into an {@code LocalDate}."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return LocalDate.parse(date, FORMATTER);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } catch (DateTimeException ex) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /** Parses a {@code String tabType} into an {@code TabType}."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws ParseException if the given {@code string tabType} is invalid."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static TabType parseTabType(String tabType) throws ParseException {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return TabType.valueOf(tabType.toUpperCase());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new ParseException(e.toString());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /** Parses a {@code String tabIndex} into an {@code Index}."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws ParseException if the given {@code string tabIndex} is invalid."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static Index parseTabIndex(String tabIndex) throws ParseException {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return ParserUtil.parseIndex(tabIndex);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchTabCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /** Parses a {@code String modelType} into an {@code ModelType}."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws ParseException if the given {@code string modelType} is invalid."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static ModelType parseModelType(String modelType) throws ParseException {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return ModelType.valueOf(modelType.toUpperCase());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new ParseException(e.toString());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /** Parses a {@code String modelIndex} into an {@code ModelIndex}."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws ParseException if the given {@code string modelIndex} is invalid."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static Index parseModelIndex(String modelIndex) throws ParseException {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return ParserUtil.parseIndex(modelIndex);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenTabCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Throws {@code ParseException} if a given string is not a valid {@code Keyword} string."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param keyword to be checked"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if keyword is invalid."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static void checkKeywordString(String keyword) throws ParseException {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!Keyword.isValidKeyword(keyword)) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_KEYWORD_FORMAT, Keyword.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Throws {@code ParseException} if any string in the given list is not a valid {@code Keyword} string."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param keywords to be checked"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if any keyword inside the list is invalid."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static void checkKeywordStringList(List\u003cString\u003e keywords) throws ParseException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (keywords.stream().anyMatch(keyword -\u003e !Keyword.isValidKeyword(keyword))) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_KEYWORD_FORMAT, Keyword.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns a list of string by splitting the argValue with empty spaces."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param argValue a string consisting of a list of keywords."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static List\u003cString\u003e getArgumentValueAsList(String argValue) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String trimmedArg \u003d argValue.trim();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String[] keywords \u003d trimmedArg.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Arrays.asList(keywords);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a string into a {@code DifficultyIsInRangePredicate}."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param arg argument string to be parsed"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param messageUsage target command\u0027s usage message"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if the argument string is of invalid format."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static DifficultyIsInRangePredicate parseDifficultyPredicate(String arg, String messageUsage)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String[] difficultyBounds \u003d arg.split(\"-\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!isArrayOfLength(difficultyBounds, 2)) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, messageUsage));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            double lowerBound \u003d Double.parseDouble(difficultyBounds[0]);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            double upperBound \u003d Double.parseDouble(difficultyBounds[1]);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new DifficultyIsInRangePredicate(lowerBound, upperBound);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } catch (NumberFormatException | NullPointerException nfe) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, messageUsage), nfe);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } catch (IllegalArgumentException ire) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                String.format(MESSAGE_INVALID_DIFFICULTY_RANGE, DifficultyIsInRangePredicate.MESSAGE_CONSTRAINTS),"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                ire);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a string into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param arg argument string to be parsed"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param messageUsage target command\u0027s usage message"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if the argument string is of invalid format."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static NameContainsKeywordsPredicate parseNamePredicate(String arg, String messageUsage)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cString\u003e nameKeywords \u003d getArgumentValueAsList(arg);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        checkKeywordStringList(nameKeywords);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cKeyword\u003e keywords \u003d nameKeywords.stream().map(Keyword::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a string into a {@code AuthorMatchesKeywordPredicate}."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param arg argument string to be parsed"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param messageUsage target command\u0027s usage message"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if the argument string is of invalid format."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static AuthorMatchesKeywordPredicate parseAuthorPredicate(String arg, String messageUsage)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String authorKeyword \u003d arg;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        checkKeywordString(authorKeyword);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new AuthorMatchesKeywordPredicate(new Keyword(authorKeyword));"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a string into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param arg argument string to be parsed"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param messageUsage target command\u0027s usage message"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if the argument string is of invalid format."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static DescriptionContainsKeywordsPredicate parseDescriptionPredicate(String arg, String messageUsage)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cString\u003e descriptionKeywords \u003d getArgumentValueAsList(arg);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        checkKeywordStringList(descriptionKeywords);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cKeyword\u003e keywords \u003d descriptionKeywords.stream().map(Keyword::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a string into a {@code SourceMatchesKeywordPredicate}."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param arg argument string to be parsed"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param messageUsage target command\u0027s usage message"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if the argument string is of invalid format."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static SourceMatchesKeywordPredicate parseSourcePredicate(String arg, String messageUsage)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String sourceKeyword \u003d arg;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        checkKeywordString(sourceKeyword);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new SourceMatchesKeywordPredicate(new Keyword(sourceKeyword));"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a string into a {@code TagIncludesKeywordsPredicate}."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param arg argument string to be parsed"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param messageUsage target command\u0027s usage message"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if the argument string is of invalid format."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static TagIncludesKeywordsPredicate parseTagPredicate(String arg, String messageUsage)"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throws ParseException {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cString\u003e tagKeywords \u003d getArgumentValueAsList(arg);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        checkKeywordStringList(tagKeywords);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cKeyword\u003e keywords \u003d tagKeywords.stream().map(Keyword::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new TagIncludesKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /** Parses a {@code String format} into an {@code Format}."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the given {@code string format} is invalid."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static Format parseFileFormat(String format) throws ParseException {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return Format.valueOf(format.toUpperCase());"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(e.toString());"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 28,
      "Seris370": 61,
      "tiuweehan": 52,
      "le0tan": 219,
      "LuWenQ": 34,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/RewindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.RewindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Parses input arguments and creates a new RewindCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class RewindCommandParser implements Parser\u003cRewindCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param args the user input to be parsed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public RewindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new RewindCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RewindCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 31
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/SwitchTabCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAB_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAB_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.SwitchTabCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " *  Parses input arguments and creates a new SwitchTabCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class SwitchTabCommandParser implements Parser\u003cSwitchTabCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public SwitchTabCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_TAB_TYPE, PREFIX_TAB_INDEX);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        TabType tabType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TAB_TYPE)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            tabType \u003d ParserUtil.parseTabType(argMultimap.getValue(PREFIX_TAB_TYPE).get());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchTabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TAB_INDEX)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            index \u003d ParserUtil.parseTabIndex(argMultimap.getValue(PREFIX_TAB_INDEX).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchTabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new SwitchTabCommand(tabType, index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 40
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/problem/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Remark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_WEBLINK, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                        PREFIX_TAG, PREFIX_DIFFICULTY, PREFIX_REMARK, PREFIX_SOURCE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Author author;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_AUTHOR)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            author \u003d ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            author \u003d Author.DEFAULT_AUTHOR;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        WebLink webLink;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_WEBLINK)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            webLink \u003d ParserUtil.parseWeblink(argMultimap.getValue(PREFIX_WEBLINK).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            webLink \u003d WebLink.DEFAULT_WEBLINK;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Description description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            description \u003d Description.DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Difficulty difficulty;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DIFFICULTY)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            difficulty \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            difficulty \u003d Difficulty.DEFAULT_DIFFICULTY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Remark remark;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_REMARK)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            remark \u003d Remark.DEFAULT_REMARK;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Source source;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_SOURCE)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            source \u003d ParserUtil.parseSource(argMultimap.getValue(PREFIX_SOURCE).get());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            source \u003d Source.DEFAULT_SOURCE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Problem problem \u003d new Problem(name, author, webLink, description, tagList, difficulty, remark, source);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new AddCommand(problem);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 6,
      "Seris370": 47,
      "le0tan": 18,
      "tiuweehan": 5,
      "LuWenQ": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/problem/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 4,
      "LuWenQ": 3,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/problem/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.EditCommand.EditProblemDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_WEBLINK, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                        PREFIX_TAG, PREFIX_DIFFICULTY, PREFIX_REMARK, PREFIX_SOURCE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        EditProblemDescriptor editProblemDescriptor \u003d new EditProblemDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            editProblemDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AUTHOR).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            editProblemDescriptor.setAuthor(ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WEBLINK).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            editProblemDescriptor.setWebLink(ParserUtil.parseWeblink(argMultimap.getValue(PREFIX_WEBLINK).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            editProblemDescriptor.setDescription("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editProblemDescriptor::setTags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editProblemDescriptor.setDifficulty("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editProblemDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SOURCE).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editProblemDescriptor.setSource(ParserUtil.parseSource(argMultimap.getValue(PREFIX_SOURCE).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!editProblemDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new EditCommand(index, editProblemDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 7,
      "Seris370": 14,
      "LuWenQ": 22,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/problem/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.parseAuthorPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.parseDescriptionPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.parseDifficultyPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.parseNamePredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.parseSourcePredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.parseTagPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.FindProblemDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_DESCRIPTION, PREFIX_SOURCE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                PREFIX_DIFFICULTY, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // According to the command format, no preamble should be present."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!argumentMultimap.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindProblemDescriptor findProblemDescriptor \u003d new FindProblemDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.setNamePredicate(parseNamePredicate(argumentMultimap.getValue(PREFIX_NAME).get(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_AUTHOR).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.setAuthorPredicate(parseAuthorPredicate("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                argumentMultimap.getValue(PREFIX_AUTHOR).get(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.setDescriptionPredicate(parseDescriptionPredicate("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                argumentMultimap.getValue(PREFIX_DESCRIPTION).get(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_SOURCE).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.setSourcePredicate("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                parseSourcePredicate(argumentMultimap.getValue(PREFIX_SOURCE).get(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.setDifficultyPredicate(parseDifficultyPredicate("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                argumentMultimap.getValue(PREFIX_DIFFICULTY).get(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.setTagPredicate(parseTagPredicate(argumentMultimap.getValue(PREFIX_TAG).get(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!findProblemDescriptor.isAnyFieldProvided()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(FindCommand.MESSAGE_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new FindCommand(findProblemDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 5,
      "le0tan": 61,
      "LuWenQ": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/problem/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SORTING_METHOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SORTING_ORDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Parses input arguments and creates a new SortCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public SortCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_SORTING_METHOD, PREFIX_SORTING_ORDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!argumentMultimap.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!arePrefixesPresent(argumentMultimap, PREFIX_SORTING_METHOD)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand.SortingMethod method \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            ParserUtil.parseSortingMethod(argumentMultimap.getValue(PREFIX_SORTING_METHOD).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand.SortingOrder order;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!arePrefixesPresent(argumentMultimap, PREFIX_SORTING_ORDER)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            // As specified in UG, ascending order is the default value."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            order \u003d SortCommand.SortingOrder.ascend;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            order \u003d ParserUtil.parseSortingOrder(argumentMultimap.getValue(PREFIX_SORTING_ORDER).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new SortCommand(method, order);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 6,
      "le0tan": 45
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/storage/ExportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.util.FileUtil.Format;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.storage.ExportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_FORMAT, PREFIX_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_FORMAT)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PATH)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            Format format \u003d ParserUtil.parseFileFormat(argMultimap.getValue(PREFIX_FORMAT).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            String path \u003d argMultimap.getValue(PREFIX_PATH).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new ExportCommand(format, path);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 45
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/storage/ImportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.util.FileUtil.Format;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.storage.ImportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_FORMAT, PREFIX_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_FORMAT)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PATH)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            Format format \u003d ParserUtil.parseFileFormat(argMultimap.getValue(PREFIX_FORMAT).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            String path \u003d argMultimap.getValue(PREFIX_PATH).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new ImportCommand(format, path);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 45
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/task/AddTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PROBLEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns an AddTaskCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_PLAN, PREFIX_PROBLEM, PREFIX_DUE_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PLAN)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PROBLEM)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index problemIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            problemIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PROBLEM).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDate targetDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (ParserUtil.arePrefixesPresent(argMultimap, PREFIX_DUE_DATE)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            targetDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DUE_DATE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            targetDate \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        AddTaskCommand.AddTaskDescriptor addTaskDescriptor \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new AddTaskCommand.AddTaskDescriptor(planIndex, problemIndex, targetDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new AddTaskCommand(addTaskDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 65
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/task/CopyTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN_FROM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN_TO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.CopyTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new CopyTaskCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class CopyTaskCommandParser implements Parser\u003cCopyTaskCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CopyTaskCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns a CopyTaskCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CopyTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            PREFIX_PLAN_FROM, PREFIX_PLAN_TO, PREFIX_TASK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PLAN_FROM)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PLAN_TO)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !ParserUtil.arePrefixesPresent(argMultimap, PREFIX_TASK)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                CopyTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planFromIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planFromIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN_FROM).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                CopyTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planToIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planToIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN_TO).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                CopyTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index taskIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                CopyTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        CopyTaskCommand.CopyTaskDescriptor copyTaskDescriptor \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new CopyTaskCommand.CopyTaskDescriptor(taskIndex, planFromIndex, planToIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CopyTaskCommand(copyTaskDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 68
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/task/DeleteTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns a DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PLAN, PREFIX_TASK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PLAN)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !ParserUtil.arePrefixesPresent(argMultimap, PREFIX_TASK)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index taskIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        DeleteTaskCommand.DeleteTaskDescriptor deleteTaskDescriptor \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new DeleteTaskCommand.DeleteTaskDescriptor(planIndex, taskIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new DeleteTaskCommand(deleteTaskDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 56
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/task/DoneTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.DoneTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new DoneTaskCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class DoneTaskCommandParser implements Parser\u003cDoneTaskCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneTaskCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns a DoneTaskCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public DoneTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PLAN, PREFIX_TASK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PLAN)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !ParserUtil.arePrefixesPresent(argMultimap, PREFIX_TASK)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                DoneTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index taskIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                DoneTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        DoneTaskCommand.DoneTaskDescriptor doneTaskDescriptor \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new DoneTaskCommand.DoneTaskDescriptor(planIndex, taskIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new DoneTaskCommand(doneTaskDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 56
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/task/EditTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new EditTaskCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTaskCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns an EditTaskCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_PLAN, PREFIX_TASK, PREFIX_DUE_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PLAN)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !ParserUtil.arePrefixesPresent(argMultimap, PREFIX_TASK)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !ParserUtil.arePrefixesPresent(argMultimap, PREFIX_DUE_DATE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index taskIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDate targetDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DUE_DATE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        EditTaskCommand.EditTaskDescriptor editTaskDescriptor \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new EditTaskCommand.EditTaskDescriptor(planIndex, taskIndex, targetDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new EditTaskCommand(editTaskDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 61
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/task/MoveTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN_FROM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN_TO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.MoveTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new MoveTaskCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class MoveTaskCommandParser implements Parser\u003cMoveTaskCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MoveTaskCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns a MoveTaskCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public MoveTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            PREFIX_PLAN_FROM, PREFIX_PLAN_TO, PREFIX_TASK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PLAN_FROM)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PLAN_TO)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !ParserUtil.arePrefixesPresent(argMultimap, PREFIX_TASK)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                MoveTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planFromIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planFromIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN_FROM).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                MoveTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planToIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planToIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN_TO).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                MoveTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index taskIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                MoveTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        MoveTaskCommand.MoveTaskDescriptor moveTaskDescriptor \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new MoveTaskCommand.MoveTaskDescriptor(taskIndex, planFromIndex, planToIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new MoveTaskCommand(moveTaskDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 68
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/task/SetPlanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.SetPlanCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new SetPlanCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class SetPlanCommandParser implements Parser\u003cSetPlanCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetPlanCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns a SetPlanCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public SetPlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new SetPlanCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPlanCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 31
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/task/UndoneTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.UndoneTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new UndoneTaskCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class UndoneTaskCommandParser implements Parser\u003cUndoneTaskCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneTaskCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns a DoneTaskCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public UndoneTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PLAN, PREFIX_TASK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PLAN)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !ParserUtil.arePrefixesPresent(argMultimap, PREFIX_TASK)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UndoneTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                UndoneTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index taskIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                UndoneTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        UndoneTaskCommand.UndoneTaskDescriptor doneTaskDescriptor \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new UndoneTaskCommand.UndoneTaskDescriptor(planIndex, taskIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new UndoneTaskCommand(doneTaskDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 56
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/AlgoBase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.commandhistory.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.commandhistory.CommandHistoryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.GuiState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.UniqueProblemList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.UniqueFindRuleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Wraps all data at the algobase level"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Duplicates are not allowed (by .isSameProblem comparison)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class AlgoBase implements ReadOnlyAlgoBase {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final UniqueProblemList problems;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final PlanList plans;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final GuiState guiState;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final UniqueFindRuleList findRules;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final CommandHistoryList commandHistories;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problems \u003d new UniqueProblemList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        plans \u003d new PlanList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        guiState \u003d new GuiState();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        commandHistories \u003d new CommandHistoryList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        findRules \u003d new UniqueFindRuleList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBase() {}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Creates an AlgoBase using the Problems in the {@code toBeCopied}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBase(ReadOnlyAlgoBase toBeCopied) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Resets the existing data of this {@code AlgoBase} with {@code newData}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void resetData(ReadOnlyAlgoBase newData) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        setProblems(newData.getProblemList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        setPlans(newData.getPlanList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        setTags(newData.getTagList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        setFindRules(newData.getFindRules());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.guiState.resetData(newData.getGuiState());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Gui State \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public GuiState getGuiState() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return this.guiState;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setGuiState(GuiState guiState) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.guiState.resetData(guiState);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Problem \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Problem findProblemById(Id problemId) throws IllegalValueException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(problemId);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Iterator\u003cProblem\u003e iterator \u003d problems.iterator();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            Problem problem \u003d iterator.next();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            if (problem.getId().equals(problemId)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                return problem;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new IllegalValueException(\"No problem found\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Replaces the contents of the Problem list with {@code problems}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code problems} must not contain duplicate problems."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setProblems(List\u003cProblem\u003e problems) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.problems.setProblems(problems);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if a Problem with the same identity as {@code Problem} exists in the algobase."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean hasProblem(Problem problem) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(problem);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return problems.contains(problem);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds a Problem to the algobase."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem must not already exist in the algobase."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void addProblem(Problem p) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problems.add(p);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the given Problem {@code target} in the list with {@code editedProblem}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem identity of {@code editedProblem} must not be the same as another existing Problem in the algobase."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setProblem(Problem target, Problem editedProblem) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(editedProblem);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problems.setProblem(target, editedProblem);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Removes {@code key} from this {@code AlgoBase}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code key} must exist in the algobase."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void removeProblem(Problem key) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problems.remove(key);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cProblem\u003e getProblemList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return problems.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tag \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Tag findTagById(Id tagId) throws IllegalValueException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireNonNull(tagId);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Iterator\u003cTag\u003e iterator \u003d tags.iterator();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            Tag tag \u003d iterator.next();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            if (tag.getId().equals(tagId)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                return tag;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        throw new IllegalValueException(\"No tag found\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the contents of the Tag list with {@code tags}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if a Tag with the same identity as {@code Tag} exists in the algobase."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return tags.contains(tag);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds a Tag to the algobase."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag must not already exist in the algobase."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void addTag(Tag p) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags.add(p);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the given Tag {@code target} in the list with {@code editedTag}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag identity of {@code editedTag} must not be the same as another existing Tag in the algobase."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(editedTag);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags.setTag(target, editedTag);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Removes {@code key} from this {@code AlgoBase}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code key} must exist in the algobase."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void removeTag(Tag key) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        tags.remove(key);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return tags.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Plan \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Plan findPlanById(Id planId) throws IllegalValueException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireNonNull(planId);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Iterator\u003cPlan\u003e iterator \u003d plans.iterator();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            Plan plan \u003d iterator.next();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            if (plan.getId().equals(planId)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                return plan;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        throw new IllegalValueException(\"No plan found\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Replaces the contents of the Plan list with {@code plans}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * {@code plans} must not contain duplicate plans."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setPlans(List\u003cPlan\u003e plans) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.plans.setPlans(plans);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns true if a Plan with the same identity as {@code Plan} exists in the algobase."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean hasPlan(Plan plan) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(plan);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return plans.contains(plan);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     Adds a Plan to the algobase."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     The Plan must not already exist in the algobase."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void addPlan(Plan p) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        plans.add(p);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Replaces the given Plan {@code target} in the list with {@code editedPlan}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * The Plan identity of {@code editedPlan} must not be the same as another existing Plan in the algobase."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void setPlan(Plan target, Plan editedPlan) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(editedPlan);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        plans.setPlan(target, editedPlan);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void removePlan(Plan key) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        plans.remove(key);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public ObservableList\u003cPlan\u003e getPlanList() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return plans.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setCurrentPlan(Plan plan) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        plans.setCurrentPlan(plan);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTask\u003e getCurrentTaskList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return plans.getUnmodifiableObservableTaskList();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public StringProperty getCurrentPlan() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return plans.getCurrentPlan();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public IntegerProperty getCurrentSolvedCount() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return plans.getCurrentSolvedCount();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public IntegerProperty getCurrentUnsolvedCount() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return plans.getCurrentUnsolvedCount();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Find Rules \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ObservableList\u003cProblemSearchRule\u003e getFindRules() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return findRules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true of {@code rule} has the same identity as one {@code ProblemSearchRule} in AlgoBase."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param rule"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean hasFindRule(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(rule);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return findRules.contains(rule);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Adds a {@code rule} into AlgoBase\u0027s list of {@code ProblemSearchRule}."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param rule"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void addFindRule(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(rule);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        findRules.add(rule);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Replaces a given {@code ProblemSearchRule} in the AlgoBase with an edited {@code ProblemSearchRule}."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code target} must exist in the Algobase."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * The identity of {@code editedRule} must not be the same as another existing {@code ProblemSearchRule}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * in the algobase."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param editedRule"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setFindRule(ProblemSearchRule target, ProblemSearchRule editedRule) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireAllNonNull(target, editedRule);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        findRules.setFindRule(target, editedRule);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Replaces the contents of the FindRule list with {@code rules}."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code rules} must not contain duplicate problems."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setFindRules(List\u003cProblemSearchRule\u003e rules) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.findRules.setFindRules(rules);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Removes a given {@code ProblemSearchRule} in the AlgoBase."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code toRemove} must exist in the Algobase."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param toRemove"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void removeFindRule(ProblemSearchRule toRemove) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        findRules.remove(toRemove);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Rewind \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ObservableList\u003cCommandHistory\u003e getCommandHistoryList() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return commandHistories.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Adds a {@code CommandHistroy} to AlgoBase."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void addCommandHistory(CommandHistory history) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        commandHistories.add(history);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return tags.asUnmodifiableObservableList().size() + \" tags\";"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof AlgoBase // instanceof handles nulls"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 problems.equals(((AlgoBase) other).problems))"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 plans.equals(((AlgoBase) other).plans);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return problems.hashCode();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 85,
      "Seris370": 38,
      "le0tan": 81,
      "tiuweehan": 43,
      "LuWenQ": 143
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/Id.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Unique ID for AlgoBase models."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class Id {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final String idValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Id(String idValue) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.idValue \u003d idValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Generate Id based on unix timestamp."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static Id generateId() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Id(UUID.randomUUID().toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Generate Id based on input value"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static Id generateId(String idValue) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Id(idValue);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public String getIdValue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return this.idValue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            || (other instanceof Id // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            \u0026\u0026 idValue.equals(((Id) other).idValue)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return idValue.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return idValue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 49
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.commandhistory.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.GuiState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Predicate\u003cProblem\u003e PREDICATE_SHOW_ALL_PROBLEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Predicate\u003cTag\u003e PREDICATE_SHOW_ALL_TAGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    Predicate\u003cPlan\u003e PREDICATE_SHOW_ALL_PLANS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPref \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the user prefs\u0027 algobase file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Path getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the user prefs\u0027 algobase file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void setAlgoBaseFilePath(Path algoBaseFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UI \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns the state of the GUI."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    GuiState getGuiState();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AlgoBase \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces algobase data with the data in {@code algoBase}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void setAlgoBase(ReadOnlyAlgoBase algoBase);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /** Returns the AlgoBase */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ReadOnlyAlgoBase getAlgoBase();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Problem \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if a Problem with the same identity as {@code Problem} exists in the algobase."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    boolean hasProblem(Problem problem);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Deletes the given Problem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem must exist in the algobase."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void deleteProblem(Problem target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds the given Problem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code Problem} must not already exist in the algobase."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void addProblem(Problem problem);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the given Problem {@code target} with {@code editedProblem}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem identity of {@code editedProblem} must not be the same as another existing Problem in the algobase."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void setProblem(Problem target, Problem editedProblem);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /** Returns an unmodifiable view of the filtered Problem list */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ObservableList\u003cProblem\u003e getFilteredProblemList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Updates the filter of the filtered Problem list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void updateFilteredProblemList(Predicate\u003cProblem\u003e predicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Updates the Problem list according to the given {@code problemComparator}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param problemComparator"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws NullPointerException if {@code problemComparator} is null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    void updateSortedProblemList(Comparator\u003cProblem\u003e problemComparator);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tag \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if a Tag with the same identity as {@code Tag} exists in the algobase."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    boolean hasTag(Tag tag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Deletes the given Tag."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag must exist in the algobase."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void deleteTag(Tag target);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Deletes the given Tag for all problems."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag must exist in the algobase."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void deleteTags(Tag target);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds the given Tag."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code Tag} must not already exist in the algobase."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void addTag(Tag tag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds the given Tag list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code Tag} must not already exist in the algobase."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void addTags(Set\u003cTag\u003e tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the given Tag {@code target} with {@code editedTag}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag identity of {@code editedTag} must not be the same as another existing Tag in the algobase."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void setTag(Tag target, Tag editedTag);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the given Tag {@code target} with {@code editedTag} for all problems in AlgoBase."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag identity of {@code editedTag} must not be the same as another existing Tag in the algobase."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void setTags(Tag target, Tag editedTag);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /** Returns an unmodifiable view of the filtered Tag list */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ObservableList\u003cTag\u003e getFilteredTagList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Updates the filter of the filtered Tag list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void updateFilteredTagList(Predicate\u003cTag\u003e predicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Plan \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns true if a Plan with the same identity as {@code Plan} exists in the algobase."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    boolean hasPlan(Plan plan);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Deletes the given Plan."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * The Plan must exist in the algobase."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    void deletePlan(Plan target);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Adds the given Plan."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * {@code Plan} must not already exist in the algobase."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    void addPlan(Plan plan);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Replaces the given Plan {@code target} with {@code editedPlan}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * The Plan identity of {@code editedPlan} must not be the same as another existing Plan in the algobase."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    void setPlan(Plan target, Plan editedPlan);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /** Returns an unmodifiable view of the filtered Plan list */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    ObservableList\u003cPlan\u003e getFilteredPlanList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Updates the filter of the filtered Plan list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    void updateFilteredPlanList(Predicate\u003cPlan\u003e predicate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Sets the current {@code Plan}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    void setCurrentPlan(Plan plan);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns an unmodifiable view of the filtered Plan list"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    ObservableList\u003cTask\u003e getCurrentTaskList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns the current {@code Plan}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    StringProperty getCurrentPlan();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns the number of solved tasks in current plan."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    IntegerProperty getCurrentSolvedCount();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns the number of unsolved tasks in current plan."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    IntegerProperty getCurrentUnsolvedCount();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Find Rules \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if the given {@code ProblemSearchRule} has the same identity as one that exists in the AlgoBase."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param rule the rule to be matched"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    boolean hasFindRule(ProblemSearchRule rule);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Adds the given rule into AlgoBase."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param rule the rule to be added"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void addFindRule(ProblemSearchRule rule);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Deletes the given rule into AlgoBase."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * The given {@code ProblemSearchRule} must exist in the AlgoBase."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param rule the rule to be deleted"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void deleteFindRule(ProblemSearchRule rule);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Replaces the given {@code ProblemSearchRule} with {@code editedRule}."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * The identity of {@code editedRule} must not be the same as another existing {@code ProblemSearchRule}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * in the algobase."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param target the rule to be edited"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param editedRule the edited rule"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void setFindRule(ProblemSearchRule target, ProblemSearchRule editedRule);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of AlgoBase\u0027s find rules."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    ObservableList\u003cProblemSearchRule\u003e getFilteredFindRuleList();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Rewind \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns an unmodifiable view of the filtered CommandHistory list."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    ObservableList\u003cCommandHistory\u003e getCommandHistoryList();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Adds the given {@code CommandHistory}."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param history the added history"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void addCommandHistory(CommandHistory history);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 48,
      "Seris370": 33,
      "le0tan": 54,
      "tiuweehan": 7,
      "LuWenQ": 86,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.commandhistory.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.GuiState;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents the in-memory model of the algobase data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final AlgoBase algoBase;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final FilteredList\u003cProblem\u003e filteredProblems;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final SortedList\u003cProblem\u003e sortedProblems;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final FilteredList\u003cTag\u003e filteredTags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final FilteredList\u003cPlan\u003e filteredPlans;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final FilteredList\u003cCommandHistory\u003e filteredCommandHistories;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final FilteredList\u003cProblemSearchRule\u003e filteredFindRules;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Initializes a ModelManager with the given algoBase and userPrefs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ModelManager(ReadOnlyAlgoBase algoBase, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(algoBase, userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        logger.fine(\"Initializing with algobase: \" + algoBase + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.algoBase \u003d new AlgoBase(algoBase);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        filteredProblems \u003d new FilteredList\u003c\u003e(this.algoBase.getProblemList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        filteredTags \u003d new FilteredList\u003c\u003e(this.algoBase.getTagList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        sortedProblems \u003d (new SortedList\u003c\u003e(filteredProblems));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        filteredPlans \u003d new FilteredList\u003c\u003e(this.algoBase.getPlanList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.algoBase.getCurrentTaskList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        filteredFindRules \u003d new FilteredList\u003c\u003e(this.algoBase.getFindRules());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        filteredCommandHistories \u003d new FilteredList\u003c\u003e(this.algoBase.getCommandHistoryList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this(new AlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Path getAlgoBaseFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return userPrefs.getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setAlgoBaseFilePath(Path algoBaseFilePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(algoBaseFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        userPrefs.setAlgoBaseFilePath(algoBaseFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI State \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public GuiState getGuiState() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return algoBase.getGuiState();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AlgoBase \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setAlgoBase(ReadOnlyAlgoBase algoBase) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.algoBase.resetData(algoBase);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ReadOnlyAlgoBase getAlgoBase() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBase;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Problem \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean hasProblem(Problem problem) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(problem);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBase.hasProblem(problem);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void deleteProblem(Problem target) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.removeProblem(target);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void addProblem(Problem problem) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.addProblem(problem);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        updateFilteredProblemList(PREDICATE_SHOW_ALL_PROBLEMS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setProblem(Problem target, Problem editedProblem) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(target, editedProblem);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.setProblem(target, editedProblem);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cProblem\u003e getFilteredProblemList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return sortedProblems;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void updateFilteredProblemList(Predicate\u003cProblem\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        filteredProblems.setPredicate(predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Updates the Problem list according to the given {@code problemComparator}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param problemComparator a comparator of problems"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws NullPointerException if {@code problemComparator} is null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void updateSortedProblemList(Comparator\u003cProblem\u003e problemComparator) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(problemComparator);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        sortedProblems.setComparator(problemComparator);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tag \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBase.hasTag(tag);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void deleteTag(Tag target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.removeTag(target);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void deleteTags(Tag target) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (Problem problem : filteredProblems) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            Set\u003cTag\u003e targetTags \u003d problem.getTags();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            for (Tag tag : targetTags) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                if (tag.getName().equals(target.getName())) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    problem.deleteTag(tag);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.addTag(tag);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void addTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            addTag(tag);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.setTag(target, editedTag);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTags(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (Problem problem : filteredProblems) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            Set\u003cTag\u003e targetTags \u003d problem.getTags();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            for (Tag tag : targetTags) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                if (tag.getName().equals(target.getName())) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    problem.addTag(editedTag);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    problem.deleteTag(tag);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return filteredTags;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        filteredTags.setPredicate(predicate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Plan \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean hasPlan(Plan plan) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(plan);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return algoBase.hasPlan(plan);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void deletePlan(Plan target) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        algoBase.removePlan(target);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void addPlan(Plan plan) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        algoBase.addPlan(plan);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setPlan(Plan target, Plan editedPlan) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(target, editedPlan);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        algoBase.setPlan(target, editedPlan);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Plan} backed by the internal list of"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cPlan\u003e getFilteredPlanList() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return filteredPlans;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void updateFilteredPlanList(Predicate\u003cPlan\u003e predicate) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        filteredPlans.setPredicate(predicate);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setCurrentPlan(Plan plan) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.algoBase.setCurrentPlan(plan);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTask\u003e getCurrentTaskList() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public StringProperty getCurrentPlan() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return this.algoBase.getCurrentPlan();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public IntegerProperty getCurrentSolvedCount() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return this.algoBase.getCurrentSolvedCount();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public IntegerProperty getCurrentUnsolvedCount() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return this.algoBase.getCurrentUnsolvedCount();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Find Rules \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean hasFindRule(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(rule);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return algoBase.hasFindRule(rule);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void addFindRule(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(rule);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        algoBase.addFindRule(rule);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void deleteFindRule(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(rule);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        algoBase.removeFindRule(rule);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setFindRule(ProblemSearchRule target, ProblemSearchRule editedRule) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireAllNonNull(target, editedRule);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        algoBase.setFindRule(target, editedRule);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ObservableList\u003cProblemSearchRule\u003e getFilteredFindRuleList() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return filteredFindRules;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Rewind \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cCommandHistory\u003e getCommandHistoryList() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return filteredCommandHistories;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void addCommandHistory(CommandHistory history) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        algoBase.addCommandHistory(history);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBase.equals(other.algoBase)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            \u0026\u0026 filteredProblems.equals(other.filteredProblems);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 110,
      "Seris370": 7,
      "le0tan": 51,
      "tiuweehan": 6,
      "LuWenQ": 101,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/ModelType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Models displayed in the GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public enum ModelType {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    PROBLEM (0, \"problem\", \"Problems\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    TAG (1, \"tag\", \"Tags\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    PLAN (2, \"plan\", \"Training Plans\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    TASK (3, \"task\", \"Tasks\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    FINDRULE (4, \"findrule\", \"Find Rules\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final Index displayTabPaneIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final String commandArgumentValue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final String tabName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    ModelType(int displayTabPaneIndex, String commandArgumentValue, String tabName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.displayTabPaneIndex \u003d Index.fromZeroBased(displayTabPaneIndex);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.commandArgumentValue \u003d commandArgumentValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabName \u003d tabName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Index getDisplayTabPaneIndex() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return displayTabPaneIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public String getCommandArgumentValue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return commandArgumentValue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public String getTabName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return tabName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "tiuweehan": 33,
      "le0tan": 2
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/ReadOnlyAlgoBase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.commandhistory.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.GuiState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Unmodifiable view of an algobase"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public interface ReadOnlyAlgoBase {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns the {@code Problem} with the same id in the algobase."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    Problem findProblemById(Id problemId) throws IllegalValueException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns an unmodifiable view of the problems list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * This list will not contain any duplicate problems."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ObservableList\u003cProblem\u003e getProblemList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns an unmodifiable view of the tags list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * This list will not contain any duplicate tags."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ObservableList\u003cTag\u003e getTagList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns the {@code Tag} with the same id in the algobase."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    Tag findTagById(Id tagId) throws IllegalValueException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns an unmodifiable view of the plans list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    ObservableList\u003cPlan\u003e getPlanList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns the {@code Plan} with the same id in the algobase."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    Plan findPlanById(Id planId) throws IllegalValueException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Sets current plan."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    void setCurrentPlan(Plan plan);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns an unmodifiable view of the current tasks list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    ObservableList\u003cTask\u003e getCurrentTaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns current plan name."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    StringProperty getCurrentPlan();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns the number of solved tasks in current plan."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    IntegerProperty getCurrentSolvedCount();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns the number of solved tasks in current plan."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    IntegerProperty getCurrentUnsolvedCount();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns an unmodifiable view of the find rule list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    ObservableList\u003cProblemSearchRule\u003e getFindRules();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns an unmodifiable view of the command history."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    ObservableList\u003cCommandHistory\u003e getCommandHistoryList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns a view of the GuiState."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    GuiState getGuiState();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 48,
      "tiuweehan": 17,
      "le0tan": 8,
      "LuWenQ": 19
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Path getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Path algoBaseFilePath \u003d Paths.get(\"data\" , \"algobase.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        setAlgoBaseFilePath(newUserPrefs.getAlgoBaseFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Path getAlgoBaseFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBaseFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setAlgoBaseFilePath(Path algoBaseFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(algoBaseFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.algoBaseFilePath \u003d algoBaseFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 algoBaseFilePath.equals(o.algoBaseFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return Objects.hash(guiSettings, algoBaseFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + algoBaseFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/commandhistory/CommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.commandhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Represents a command history in AlgoBase."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final String commandText;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public CommandHistory(String commandText) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.commandText \u003d commandText;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public String getCommandText() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return commandText;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 16
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/commandhistory/CommandHistoryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.commandhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * A list of {@code CommandHistory}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class CommandHistoryList implements Iterable\u003cCommandHistory\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final ObservableList\u003cCommandHistory\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final ObservableList\u003cCommandHistory\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Adds a {@code CommandHistory} to the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void add(CommandHistory toAdd) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ObservableList\u003cCommandHistory\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Iterator\u003cCommandHistory\u003e iterator() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            || (other instanceof CommandHistoryList // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 internalList.equals(((CommandHistoryList) other).internalList));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 52
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/gui/GuiState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Tracks the current state of the GUI."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class GuiState implements ReadOnlyGuiState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final TabManager tabManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Creates a {@code GuiState} with default values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public GuiState() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabManager \u003d new TabManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Creates a {@code GuiState} with default values."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public GuiState(GuiState guiState) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabManager \u003d new TabManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        resetData(guiState);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Creates a {@code GuiState} with a given TabManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public GuiState(TabManager tabManager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabManager \u003d new TabManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabManager.resetData(tabManager);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public TabManager getTabManager() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return this.tabManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public ReadOnlyTabManager getReadOnlyTabManager() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return this.tabManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void resetData(ReadOnlyGuiState guiState) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabManager.resetData(guiState.getReadOnlyTabManager());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 44
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/gui/ReadOnlyGuiState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Unmodifiable view of a guistate"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public interface ReadOnlyGuiState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    ReadOnlyTabManager getReadOnlyTabManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 8
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/gui/ReadOnlyTabManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.value.ObservableIntegerValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Unmodifiable view of a tabmanager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public interface ReadOnlyTabManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    ObservableIntegerValue getDisplayTabPaneIndex();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    ObservableIntegerValue getDetailsTabPaneIndex();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    ObservableList\u003cTabData\u003e getTabsDataList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 16
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/gui/TabData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Store details about a tab in the GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class TabData {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final ModelType modelType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final Id modelId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public TabData(ModelType modelType, Id modelId) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireAllNonNull(modelType, modelId);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.modelId \u003d modelId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.modelType \u003d modelType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public ModelType getModelType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return modelType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Id getModelId() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return modelId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if both problems of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * This defines a weaker notion of equality between two problems."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public boolean isSameTabData(TabData otherTabData) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (otherTabData \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return otherTabData !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            \u0026\u0026 otherTabData.getModelType().equals(getModelType()) \u0026\u0026 otherTabData.getModelId().equals(modelId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public boolean equals(Object otherTabData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (this \u003d\u003d otherTabData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (!(otherTabData instanceof TabData)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return this.isSameTabData((TabData) otherTabData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 55
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/gui/TabManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.value.ObservableIntegerValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * The main TabManager of the GUI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class TabManager implements ReadOnlyTabManager, WriteOnlyTabManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final int STARTING_INDEX \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private IntegerProperty displayTabPaneIndex \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        new SimpleIntegerProperty(STARTING_INDEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private IntegerProperty detailsTabPaneIndex \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        new SimpleIntegerProperty(STARTING_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private UniqueTabDataList tabsData;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public TabManager() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabsData \u003d new UniqueTabDataList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Resets the TabManager."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void resetData(ReadOnlyTabManager tabManager) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.detailsTabPaneIndex.setValue(tabManager.getDetailsTabPaneIndex().getValue());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.displayTabPaneIndex.setValue(tabManager.getDisplayTabPaneIndex().getValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabsData.setTabsData(tabManager.getTabsDataList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    // Display Tab"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public boolean isValidDisplayTabPaneIndex(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c ModelType.values().length;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public ObservableIntegerValue getDisplayTabPaneIndex() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return displayTabPaneIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setDisplayTabPaneIndex(Index index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        int indexValue \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (!isValidDisplayTabPaneIndex(indexValue)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new IndexOutOfBoundsException(\"Tab value is invalid\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        displayTabPaneIndex.setValue(indexValue);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    // Details tab"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public boolean isValidDetailsTabPaneIndex(int index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return (index \u003e\u003d 0 \u0026\u0026 index \u003c tabsData.size()) || (index \u003d\u003d 0 \u0026\u0026 tabsData.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public ObservableIntegerValue getDetailsTabPaneIndex() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return detailsTabPaneIndex;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setDetailsTabPaneIndex(Index index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        int indexValue \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (!isValidDetailsTabPaneIndex(indexValue)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new IndexOutOfBoundsException(\"Tab value is invalid\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        detailsTabPaneIndex.setValue(indexValue);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds TabData to algobase."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * The TabData must not already exist in the algobase."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void addDetailsTabData(TabData tab) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabsData.add(tab);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void removeDetailsTabData(TabData tabData) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabsData.remove(tabData);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void removeDetailsTabData(Index index) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        removeDetailsTabData(getTabsDataList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Index getDetailsTabIndex(TabData tabData) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return tabsData.indexOf(tabData);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Replaces the contents of the Plan list with {@code tabsData}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * {@code tabsData} must not contain duplicate tabsData."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setTabsData(List\u003cTabData\u003e tabsData) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabsData.setTabsData(tabsData);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a Plan with the same identity as {@code TabData} exists in the algobase."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public boolean hasDetailsTabData(TabData tabData) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireNonNull(tabData);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return tabsData.contains(tabData);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Replaces the given Plan {@code target} in the list with {@code editedPlan}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * The Plan identity of {@code editedPlan} must not be the same as another existing Plan in the algobase."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setTabData(TabData target, TabData editedTabData) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireNonNull(editedTabData);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabsData.setTabData(target, editedTabData);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public ObservableList\u003cTabData\u003e getTabsDataList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return tabsData.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Consumer\u003cId\u003e addDetailsTabConsumer(ModelType modelType) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return (Id id) -\u003e addDetailsTabData(new TabData(modelType, id));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Consumer\u003cId\u003e removeDetailsTabConsumer(ModelType modelType) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return (id) -\u003e removeDetailsTabData(new TabData(modelType, id));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 145
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/gui/TabType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Types of tabs in the GUI."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public enum TabType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    DISPLAY(\"Display\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    DETAILS(\"Details\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    TabType(String readableName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.name \u003d readableName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 19
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/gui/UniqueTabDataList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.exceptions.DuplicateTabDataException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.exceptions.TabDataNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * A list of TabsData that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * A TabData is considered unique by comparing using {@code TabData#isSameTabData(TabData)}. As such, adding and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * updating of tabData uses TabData#isSameTabData(TabData) for equality so as to ensure that the TabData being added"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * or updated is unique in terms of identity in the UniqueTabDataList. However, the removal of a TabData uses"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * TabData#equals(Object) so as to ensure that the TabData with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * @see TabData#isSameTabData(TabData)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class UniqueTabDataList implements Iterable\u003cTabData\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final ObservableList\u003cTabData\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final ObservableList\u003cTabData\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if the list contains an equivalent TabData as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public boolean contains(TabData toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTabData);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns the index of a TabData as the given argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Index indexOf(TabData toCheck) throws NoSuchElementException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            if (internalList.get(i).isSameTabData(toCheck)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                return Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        throw new NoSuchElementException(\"The TabData does not exist\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds a TabData to the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * The TabData must not already exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void add(TabData toAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new DuplicateTabDataException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds a list of TabsData to the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Each individual TabData must not already exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void addAll(TabData... tabsData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireNonNull(tabsData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        for (TabData tabData : tabsData) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            if (contains(tabData)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                throw new DuplicateTabDataException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        for (TabData tabData : tabsData) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            add(tabData);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Removes the equivalent TabData from the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * The TabData must exist in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void remove(TabData toRemove) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        for (TabData tabData : internalList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            if (tabData.isSameTabData(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                internalList.remove(tabData);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        throw new TabDataNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Replaces the TabData {@code target} in the list with {@code editedTabData}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * The TabData identity of {@code editedTabData} must not be the same as another existing TabData in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setTabData(TabData target, TabData editedTabData) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireAllNonNull(target, editedTabData);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new TabDataNotFoundException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (!target.isSameTabData(editedTabData) \u0026\u0026 contains(editedTabData)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new DuplicateTabDataException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        internalList.set(index, editedTabData);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setTabsData(UniqueTabDataList replacement) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Replaces the contents of this list with {@code tabsData}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * {@code tabsData} must not contain duplicate tabsData."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setTabsData(List\u003cTabData\u003e tabsData) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireAllNonNull(tabsData);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (!tabsDataAreUnique(tabsData)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new DuplicateTabDataException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        internalList.setAll(tabsData);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public ObservableList\u003cTabData\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the size of the UniqueTabDataList"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Iterator\u003cTabData\u003e iterator() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            || (other instanceof UniqueTabDataList // instanceof handles nulls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueTabDataList) other).internalList));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if {@code tabsData} contains only unique tabsData."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private boolean tabsDataAreUnique(List\u003cTabData\u003e tabsData) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        for (int i \u003d 0; i \u003c tabsData.size() - 1; i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tabsData.size(); j++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                if (tabsData.get(i).isSameTabData(tabsData.get(j))) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 179
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/gui/WriteOnlyTabManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Write-only view of a tabmanager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public interface WriteOnlyTabManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * A Consumer that adds details tabdata to the TabManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    Consumer\u003cId\u003e addDetailsTabConsumer(ModelType modelType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * A Consumer that removes details tabdata to the TabManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    Consumer\u003cId\u003e removeDetailsTabConsumer(ModelType modelType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    void setDisplayTabPaneIndex(Index index) throws IndexOutOfBoundsException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    void setDetailsTabPaneIndex(Index index) throws IndexOutOfBoundsException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 26
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/gui/exceptions/DuplicateTabDataException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model.gui.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Signals that the operation will result in duplicate TabsData (TabsData are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class DuplicateTabDataException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public DuplicateTabDataException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        super(\"Operation would result in duplicate problems\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 11
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/gui/exceptions/TabDataNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model.gui.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Signals that the operation is unable to find the specified TabData."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class TabDataNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 6
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/plan/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Tests that a {@code Plan}\u0027s {@code PlanName} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPlan\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean test(Plan plan) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(plan.getPlanName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 7,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/plan/Plan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Represents a Plan in the algobase."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class Plan {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final Id id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final PlanName planName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final PlanDescription planDescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final Set\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Plan(PlanName planName, PlanDescription planDescription, LocalDate startDate, LocalDate endDate,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                Set\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireAllNonNull(planName, planDescription, startDate, endDate, tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.id \u003d Id.generateId();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.planName \u003d planName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.planDescription \u003d planDescription;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.tasks \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Plan(Id id, PlanName planName, PlanDescription planDescription, LocalDate startDate,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                LocalDate endDate, Set\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(id, planName, planDescription, startDate, endDate, tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.planName \u003d planName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.planDescription \u003d planDescription;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.tasks \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates and returns a {@code Plan} with the details of {@code planToUpdate}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * with an updated {@code taskSet}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static Plan updateTasks(Plan planToUpdate, Set\u003cTask\u003e taskSet) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        assert planToUpdate !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Id id \u003d planToUpdate.id;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        PlanName name \u003d planToUpdate.planName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        PlanDescription description \u003d planToUpdate.planDescription;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDate startDate \u003d planToUpdate.startDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDate endDate \u003d planToUpdate.endDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new Plan(id, name, description, startDate, endDate, taskSet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Check whether a given date lies inside its own date range."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @return result."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean checkWithinDateRange(LocalDate date) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return date.compareTo(this.getStartDate()) \u003e 0 \u0026\u0026 date.compareTo(this.getEndDate()) \u003c 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns number of solved tasks within plan."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @return number of solved tasks."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int getSolvedTaskCount() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return (int) this.getTasks().stream().filter((task) -\u003e task.getIsSolved()).count();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns number of unsolved tasks within plan."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @return number of unsolved tasks."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int getUnsolvedTaskCount() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return (int) this.getTasks().stream().filter((task) -\u003e !task.getIsSolved()).count();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Id getId() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanName getPlanName() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return planName;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanDescription getPlanDescription() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return planDescription;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns an immutable task set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Set\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return Collections.unmodifiableSet(tasks);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns a list of all tasks, sorted by name."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(this.getTasks());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskList.sort(Comparator.comparing(Task::getName));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns true if both plans of the same planName have at least one other identity field that is the same."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * This defines a weaker notion of equality between two plans."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean isSamePlan(Plan otherPlan) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (otherPlan \u003d\u003d this) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return otherPlan !\u003d null"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 otherPlan.getPlanName().equals(getPlanName());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns true if both plans have the same identity and data fields."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * This defines a stronger notion of equality between two plans."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!(other instanceof Plan)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan otherPlan \u003d (Plan) other;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return otherPlan.getPlanName().equals(getPlanName())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 otherPlan.getPlanDescription().equals(getPlanDescription())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 otherPlan.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 otherPlan.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 otherPlan.getTasks().equals(getTasks());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return Objects.hash(planName, planDescription, startDate, endDate, tasks);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        builder.append(getPlanName())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                .append(getPlanDescription())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(\" Start Date: \")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(\" End Date: \")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(getEndDate())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(\" Tasks: \");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        getTasks().forEach(builder::append);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 169,
      "Seris370": 18,
      "tiuweehan": 6
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/plan/PlanDescription.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Represents a Plan\u0027s description in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class PlanDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String DEFAULT_PLAN_DESCRIPTION_STRING \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final PlanDescription DEFAULT_PLAN_DESCRIPTION \u003d new PlanDescription();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Constructs an {@code PlanDescription}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanDescription(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private PlanDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        value \u003d DEFAULT_PLAN_DESCRIPTION_STRING;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Checks if a given string is the default description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param test a given string to test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @return true if a given string is the default description"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static boolean isDefaultDescription(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return test.equals(DEFAULT_PLAN_DESCRIPTION_STRING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof PlanDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 value.equals(((PlanDescription) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 60,
      "Seris370": 11
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/plan/PlanList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.exceptions.PlanNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * A list of plans."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * @see Plan#isSamePlan(Plan)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class PlanList implements Iterable\u003cPlan\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final ObservableList\u003cPlan\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final ObservableList\u003cPlan\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalTaskList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableTaskList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalTaskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final StringProperty currentPlan \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final IntegerProperty solvedCount \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final IntegerProperty unsolvedCount \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Adds a Plan to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void add(Plan toAdd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        setCurrentPlan(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Replaces the Plan {@code target} in the list with {@code editedPlan}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setPlan(Plan target, Plan updatedPlan) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(target, updatedPlan);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new PlanNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        internalList.set(index, updatedPlan);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        setCurrentPlan(updatedPlan);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Removes the equivalent Plan from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * The Plan must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void remove(Plan toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new PlanNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        currentPlan.set(\"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        solvedCount.set(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        unsolvedCount.set(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        internalTaskList.setAll();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Replaces the contents of this list with {@code replacement}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setPlans(PlanList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cPlan\u003e plans \u003d replacement.internalList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        setPlans(plans);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Replaces the contents of this list with {@code plans}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setPlans(List\u003cPlan\u003e plans) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(plans);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        internalList.setAll(plans);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (plans.size() \u003e 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            // Default to first plan in list"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            setCurrentPlan(plans.get(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns the current {@code Plan}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public StringProperty getCurrentPlan() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return currentPlan;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Sets the current {@code Plan}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setCurrentPlan(Plan plan) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        currentPlan.set(plan.getPlanName().fullName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        solvedCount.set(plan.getSolvedTaskCount());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        unsolvedCount.set(plan.getUnsolvedTaskCount());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        internalTaskList.setAll(plan.getTaskList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns the number of solved tasks in current plan."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public IntegerProperty getCurrentSolvedCount() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return solvedCount;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns the number of solved tasks in current plan."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public IntegerProperty getCurrentUnsolvedCount() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return unsolvedCount;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cPlan\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns the backing task list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTask\u003e getUnmodifiableObservableTaskList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return internalUnmodifiableTaskList;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Iterator\u003cPlan\u003e iterator() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof PlanList // instanceof handles nulls"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                        \u0026\u0026 internalList.equals(((PlanList) other).internalList));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns true if the list contains an equivalent Plan as the given argument."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean contains(Plan toCheck) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePlan);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 160,
      "Seris370": 9
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/plan/PlanName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Represents a Plan\u0027s name in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class PlanName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Constructs a {@code PlanName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof PlanName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 fullName.equals(((PlanName) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 4,
      "Seris370": 5,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/plan/exceptions/PlanNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.plan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Signals that the operation is unable to find the specified Plan."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class PlanNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 6
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Author.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a Problem\u0027s author number in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAuthor(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Author implements Comparable\u003cAuthor\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            \"Author numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String DEFAULT_AUTHOR_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final Author DEFAULT_AUTHOR \u003d new Author();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * The first character of the author\u0027s name must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Constructs a {@code Author}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param author A valid author number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Author(String author) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(author);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        checkArgument(isValidAuthor(author), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        value \u003d author;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Author() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        value \u003d DEFAULT_AUTHOR_STRING;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given String matches the default author String."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultAuthor(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test.equals(DEFAULT_AUTHOR_STRING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given {@code Author} is the default author."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultAuthor(Author author) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return author \u003d\u003d DEFAULT_AUTHOR;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string is a valid author."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static boolean isValidAuthor(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof Author // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 value.equals(((Author) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int compareTo(Author o) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this.value.compareTo(o.value);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 10,
      "le0tan": 8,
      "tiuweehan": 17,
      "LuWenQ": 14,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a Problem\u0027s description in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION_STRING \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final Description DEFAULT_DESCRIPTION \u003d new Description();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Description() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        value \u003d DEFAULT_DESCRIPTION_STRING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string matches the default description string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultDescription(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test.equals(DEFAULT_DESCRIPTION_STRING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given {@code Description} is the default description."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultDescription(Description test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test \u003d\u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 4,
      "tiuweehan": 17,
      "LuWenQ": 16,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Difficulty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Represents a Problem\u0027s difficulty in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDifficulty(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Difficulty implements Comparable\u003cDifficulty\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Difficulty should be numeric and between (0, 5].\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final double DIFFICULTY_LOWER_BOUND \u003d 0.0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final double DIFFICULTY_UPPER_BOUND \u003d 5.0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final double DEFAULT_DIFFICULTY_VALUE \u003d DIFFICULTY_LOWER_BOUND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Difficulty DEFAULT_DIFFICULTY \u003d new Difficulty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+.\\\\d+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs an {@code Difficulty} from a String representing a number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param difficulty A valid difficulty."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Difficulty(String difficulty) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        checkArgument(isValidDifficulty(difficulty), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        value \u003d Double.parseDouble(difficulty);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Difficulty() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        value \u003d DEFAULT_DIFFICULTY_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string matches the default difficulty value."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultDifficulty(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Double.parseDouble(test) \u003d\u003d DEFAULT_DIFFICULTY_VALUE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given {@code Difficulty} is the default difficulty."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultDifficulty(Difficulty test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test \u003d\u003d DEFAULT_DIFFICULTY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns true if a given string is a valid difficulty."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static boolean isValidDifficulty(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            double parseResult \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            // Difficulty cannot be 0.0, and 0.0 is reserved for default difficulty"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return parseResult \u003e DIFFICULTY_LOWER_BOUND"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    \u0026\u0026 parseResult \u003c\u003d DIFFICULTY_UPPER_BOUND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof Difficulty // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Difficulty) other).value); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Double.hashCode(value);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int compareTo(Difficulty o) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Double.compare(this.value, o.value);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 38,
      "Seris370": 3,
      "le0tan": 30,
      "tiuweehan": 20
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a Problem\u0027s name in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * A name is any combination of the following characters: A-Z, a-z, \u0027, . or whitespace."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * A name must contain at least one non-whitespace character."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([A-z\\\\\u0027\\\\.-ᶜ]+(\\\\s)*)*$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int compareTo(Name o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this.fullName.compareTo(o.fullName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 8,
      "tiuweehan": 3,
      "LuWenQ": 3,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Problem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a Problem in the algobase."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class Problem {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final Id id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Author author;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final WebLink webLink;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Difficulty difficulty;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Source source;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Problem(Name name, Author author, WebLink webLink, Description description, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                   Difficulty difficulty, Remark remark, Source source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireAllNonNull(name, author, webLink, description, tags, difficulty, remark, source);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.id \u003d Id.generateId();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.webLink \u003d webLink;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Problem(Id id, Name name, Author author, WebLink webLink, Description description, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                   Difficulty difficulty, Remark remark, Source source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(id, name, author, webLink, description, tags, difficulty, remark, source);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.webLink \u003d webLink;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Id getId() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Author getAuthor() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public WebLink getWebLink() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return webLink;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags.add(tag);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags.remove(tag);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Source getSource() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return source;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if both problems of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * This defines a weaker notion of equality between two problems."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean isSameProblem(Problem otherProblem) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (otherProblem \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return otherProblem !\u003d null"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 otherProblem.getName().equals(getName())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 (otherProblem.getAuthor().equals(getAuthor()) || otherProblem.getWebLink().equals(getWebLink()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if both problems have the same identity and data fields."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * This defines a stronger notion of equality between two problems."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!(other instanceof Problem)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Problem otherProblem \u003d (Problem) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return otherProblem.getName().equals(getName())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 otherProblem.getAuthor().equals(getAuthor())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 otherProblem.getWebLink().equals(getWebLink())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 otherProblem.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 otherProblem.getTags().equals(getTags())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 otherProblem.getRemark().equals(getRemark())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 otherProblem.getSource().equals(getSource());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return Objects.hash(name, author, webLink, description, difficulty, remark, source, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(\" Author: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(getAuthor())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(\" WebLink: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(getWebLink())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(\" Difficulty: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(getDifficulty())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                .append(\" Source: \")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(getSource())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 24,
      "le0tan": 30,
      "tiuweehan": 5,
      "LuWenQ": 46,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Remark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Represents a Problem\u0027s solution in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Remark can take any values, and it should not be blank.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DEFAULT_REMARK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Remark DEFAULT_REMARK \u003d new Remark();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * A remark is a combination of characters or whitespaces."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * The first character of the solution must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\S[\\\\s\\\\S]*$\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs an {@code Remark}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param remark A valid solution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        checkArgument(isValidRemark(remark), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code Remark} which is empty."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Since public constructor of Remark disallows empty remark,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * this private constructor uses empty string distinguish itself from normal remarks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Remark() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        value \u003d DEFAULT_REMARK_STRING;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given String matches the default remark String."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultRemark(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test.equals(DEFAULT_REMARK_STRING);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given {@code Remark} is the default remark."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultRemark(Remark test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test \u003d\u003d DEFAULT_REMARK;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if a given string is a valid remark."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static boolean isValidRemark(String test) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 67,
      "tiuweehan": 16
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Source.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Represents a Problem\u0027s source in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSource(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Source implements Comparable\u003cSource\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Source should be alphanumeric.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DEFAULT_SOURCE_STRING \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Source DEFAULT_SOURCE \u003d new Source();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code Source}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param source A valid source."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Source(String source) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        checkArgument(isValidSource(source), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        value \u003d source;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs an empty {@code Source}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Source() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        value \u003d DEFAULT_SOURCE_STRING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string matches the default source string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultSource(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test.equals(DEFAULT_SOURCE_STRING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given {@code Source} is the default source."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultSource(Source test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test \u003d\u003d DEFAULT_SOURCE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns true if a given string is a valid source."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static boolean isValidSource(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof Source // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 value.equals(((Source) other).value)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int compareTo(Source o) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this.value.compareTo(o.value);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 49,
      "le0tan": 19,
      "tiuweehan": 14
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/UniqueProblemList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.exceptions.DuplicateProblemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.exceptions.ProblemNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A list of problems that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A Problem is considered unique by comparing using {@code Problem#isSameProblem(Problem)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * updating of problems uses Problem#isSameProblem(Problem) for equality so as to ensure that the Problem being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * or updated is unique in terms of identity in the UniqueProblemList. However, the removal of a Problem uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Problem#equals(Object) so as to ensure that the Problem with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * @see Problem#isSameProblem(Problem)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class UniqueProblemList implements Iterable\u003cProblem\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final ObservableList\u003cProblem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final ObservableList\u003cProblem\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if the list contains an equivalent Problem as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean contains(Problem toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProblem);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds a Problem to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void add(Problem toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new DuplicateProblemException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the Problem {@code target} in the list with {@code editedProblem}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem identity of {@code editedProblem} must not be the same as another existing Problem in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setProblem(Problem target, Problem editedProblem) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(target, editedProblem);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ProblemNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!target.isSameProblem(editedProblem) \u0026\u0026 contains(editedProblem)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new DuplicateProblemException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.set(index, editedProblem);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Removes the equivalent Problem from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void remove(Problem toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ProblemNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setProblems(UniqueProblemList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the contents of this list with {@code problems}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code problems} must not contain duplicate problems."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setProblems(List\u003cProblem\u003e problems) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(problems);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!problemsAreUnique(problems)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new DuplicateProblemException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.setAll(problems);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ObservableList\u003cProblem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Iterator\u003cProblem\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof UniqueProblemList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueProblemList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if {@code problems} contains only unique problems."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private boolean problemsAreUnique(List\u003cProblem\u003e problems) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (int i \u003d 0; i \u003c problems.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            for (int j \u003d i + 1; j \u003c problems.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                if (problems.get(i).isSameProblem(problems.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 137
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/WebLink.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a Problem\u0027s weblink in the algobase."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWeblink(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class WebLink implements Comparable\u003cWebLink\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Weblinks should be parsable by java.net.URL\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            \"\u003c\\\\b(https?|ftp|file)://[-a-zA-Z0-9+\u0026@#/%?\u003d~_|!:,.;]*[-a-zA-Z0-9+\u0026@#/%\u003d~_|]\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String DEFAULT_WEBLINK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final WebLink DEFAULT_WEBLINK \u003d new WebLink();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Constructs an {@code WebLink}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param weblink A valid weblink."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public WebLink(String weblink) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(weblink);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        checkArgument(isValidWeblink(weblink), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        value \u003d weblink;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private WebLink() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        value \u003d DEFAULT_WEBLINK_STRING;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string matches the default weblink string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultWeblink(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test.equals(DEFAULT_WEBLINK_STRING);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given {@code Weblink} is a default weblink."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultWeblink(WebLink test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test \u003d\u003d DEFAULT_WEBLINK;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string is a valid weblink."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static boolean isValidWeblink(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            URL url \u003d new URL(test);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof WebLink // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 value.equals(((WebLink) other).value)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int compareTo(WebLink o) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this.value.compareTo(o.value);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 16,
      "le0tan": 8,
      "tiuweehan": 17,
      "LuWenQ": 13,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/exceptions/DuplicateProblemException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Signals that the operation will result in duplicate Problems (Problems are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class DuplicateProblemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public DuplicateProblemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        super(\"Operation would result in duplicate problems\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 11
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/exceptions/ProblemNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Signals that the operation is unable to find the specified Problem."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class ProblemNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 6
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/plansearchrule/FindPlanDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.model.searchrule.plansearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.model.searchrule.plansearchrule.PlanDescriptionContainsKeywordsPredicate.DEFAULT_PLAN_DESCRIPTION_PREDICATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.model.searchrule.plansearchrule.PlanNameContainsKeywordsPredicate.DEFAULT_PLAN_NAME_PREDICATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.model.searchrule.plansearchrule.TimeRangePredicate.DEFAULT_TIME_RANGE_PREDICATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Stores the details to find the {@code Plan}. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * corresponding field value of the {@code findPlanPredicate}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class FindPlanDescriptor {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private PlanNameContainsKeywordsPredicate planNamePredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private PlanDescriptionContainsKeywordsPredicate planDescriptionPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private TimeRangePredicate timeRangePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public FindPlanDescriptor() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        planNamePredicate \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        planDescriptionPredicate \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        timeRangePredicate \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public FindPlanDescriptor(PlanNameContainsKeywordsPredicate planNamePredicate,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                              PlanDescriptionContainsKeywordsPredicate planDescriptionPredicate,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                              TimeRangePredicate timeRangePredicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.planNamePredicate \u003d planNamePredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.planDescriptionPredicate \u003d planDescriptionPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.timeRangePredicate \u003d timeRangePredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public FindPlanDescriptor(FindPlanDescriptor toCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        setPlanNamePredicate(toCopy.planNamePredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        setPlanDescriptionPredicate(toCopy.planDescriptionPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        setTimeRangePredicate(toCopy.timeRangePredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean isAnyFieldProvided() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return CollectionUtil.isAnyNonNull(planNamePredicate, planDescriptionPredicate, timeRangePredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void setPlanNamePredicate(PlanNameContainsKeywordsPredicate planNameContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.planNamePredicate \u003d planNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public Optional\u003cPlanNameContainsKeywordsPredicate\u003e getPlanNamePredicate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return Optional.ofNullable(planNamePredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void setPlanDescriptionPredicate(PlanDescriptionContainsKeywordsPredicate planDescriptionPredicate) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.planDescriptionPredicate \u003d planDescriptionPredicate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public Optional\u003cPlanDescriptionContainsKeywordsPredicate\u003e getPlanDescriptionPredicate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return Optional.ofNullable(planDescriptionPredicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void setTimeRangePredicate(TimeRangePredicate timeRangePredicate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.timeRangePredicate \u003d timeRangePredicate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public Optional\u003cTimeRangePredicate\u003e getTimeRangePredicate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return Optional.ofNullable(timeRangePredicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Creates and returns a {@code findPlanPredicate} with the details of {@code findPlanDescriptor}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public Predicate\u003cPlan\u003e getFindPlanPredicate() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        PlanNameContainsKeywordsPredicate planNamePredicate \u003d getPlanNamePredicate()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                .orElse(DEFAULT_PLAN_NAME_PREDICATE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        PlanDescriptionContainsKeywordsPredicate planDescriptionPredicate \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                getPlanDescriptionPredicate().orElse(DEFAULT_PLAN_DESCRIPTION_PREDICATE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        TimeRangePredicate timeRangePredicate \u003d getTimeRangePredicate().orElse(DEFAULT_TIME_RANGE_PREDICATE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return planNamePredicate"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                .and(planDescriptionPredicate)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                .and(timeRangePredicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!(other instanceof FindPlanDescriptor)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        FindPlanDescriptor e \u003d (FindPlanDescriptor) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return getPlanNamePredicate().equals(e.getPlanNamePredicate())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 getPlanDescriptionPredicate().equals(e.getPlanDescriptionPredicate())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 getTimeRangePredicate().equals(e.getTimeRangePredicate());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 108
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/plansearchrule/Keyword.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.model.searchrule.plansearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Represents a Predicate\u0027s Keyword in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidKeyword(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class Keyword {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Keyword should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public final String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Constructs a {@code Keyword}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @param keyword"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public Keyword(String keyword) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        checkArgument(isValidKeyword(keyword), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns true if a given string is a valid keyword."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static boolean isValidKeyword(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return !test.isBlank();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof Keyword // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 keyword.equals(((Keyword) other).keyword)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return keyword.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 50
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/plansearchrule/PlanDescriptionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.model.searchrule.plansearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Tests that a {@code Plan}\u0027s {@code PlanDescription} includes all of the given keywords (ignoring cases)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class PlanDescriptionContainsKeywordsPredicate implements Predicate\u003cPlan\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final PlanDescriptionContainsKeywordsPredicate DEFAULT_PLAN_DESCRIPTION_PREDICATE \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        new PlanDescriptionContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            public boolean test(Plan plan) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final List\u003cKeyword\u003e keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanDescriptionContainsKeywordsPredicate(List\u003cKeyword\u003e keywords) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private PlanDescriptionContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.keywords \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public List\u003cKeyword\u003e getKeywords() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean test(Plan plan) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        assert keywords !\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                .allMatch(keyword -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(plan.getPlanDescription().value, keyword.toString()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        assert keywords !\u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof PlanDescriptionContainsKeywordsPredicate"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 keywords.equals(((PlanDescriptionContainsKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 51
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/plansearchrule/PlanNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.model.searchrule.plansearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Tests that a {@code Plan}\u0027s {@code PlanName} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class PlanNameContainsKeywordsPredicate implements Predicate\u003cPlan\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final PlanNameContainsKeywordsPredicate DEFAULT_PLAN_NAME_PREDICATE \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        new PlanNameContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            public boolean test(Plan plan) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final List\u003cKeyword\u003e keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanNameContainsKeywordsPredicate(List\u003cKeyword\u003e keywords) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private PlanNameContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.keywords \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public List\u003cKeyword\u003e getKeywords() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean test(Plan plan) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        assert keywords !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(plan.getPlanName().fullName, keyword.toString()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        assert keywords !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof PlanNameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 keywords.equals(((PlanNameContainsKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 50
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/plansearchrule/TimeRange.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.model.searchrule.plansearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.FORMATTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Represents a {@code TimeRangePredicate}\u0027s starting date and end date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class TimeRange {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Both start date and end date should be present.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public final LocalDate startDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public final LocalDate endDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Constructs a {@code TimeRange}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @param startDate starting date of time range"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @param endDate end date of time range"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public TimeRange(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        checkArgument(isValidRange(startDate, endDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns true if a given time range is valid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static boolean isValidRange(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return startDate !\u003d null \u0026\u0026 endDate !\u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return startDate.format(FORMATTER) + \" \" + endDate.format(FORMATTER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof TimeRange"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 startDate.equals(((TimeRange) other).startDate)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 endDate.equals(((TimeRange) other).endDate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean hasOverlap(TimeRange other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return this.startDate.isBefore(other.endDate) \u0026\u0026 other.startDate.isBefore(this.endDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 58
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/plansearchrule/TimeRangePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.model.searchrule.plansearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Tests that a {@code Plan}\u0027s time range has overlap with the given time range."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class TimeRangePredicate implements Predicate\u003cPlan\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final TimeRangePredicate DEFAULT_TIME_RANGE_PREDICATE \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        new TimeRangePredicate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            public boolean test(Plan plan) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final TimeRange timeRange;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public TimeRangePredicate(TimeRange timeRange) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.timeRange \u003d timeRange;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private TimeRangePredicate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.timeRange \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public TimeRange getTimeRange() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return timeRange;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean test(Plan plan) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        assert this.timeRange !\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return this.timeRange.hasOverlap(new TimeRange(plan.getStartDate(), plan.getEndDate()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(timeRange);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof TimeRangePredicate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 timeRange.equals(((TimeRangePredicate) other).timeRange));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 50
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/problemsearchrule/AuthorMatchesKeywordPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Tests that a {@code Problem}\u0027s {@code Author} matches the given keyword exactly."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class AuthorMatchesKeywordPredicate implements Predicate\u003cProblem\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final AuthorMatchesKeywordPredicate DEFAULT_AUTHOR_PREDICATE \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new AuthorMatchesKeywordPredicate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Keyword keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public AuthorMatchesKeywordPredicate(Keyword keyword) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private AuthorMatchesKeywordPredicate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Keyword getKeyword() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return problem.getAuthor().equals(new Author(keyword.toString()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                || (other instanceof AuthorMatchesKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 keyword.equals(((AuthorMatchesKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 47
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/problemsearchrule/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.compareTwoLists;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Tests that a {@code Problem}\u0027s {@code Description} includes all of the given keywords (ignoring cases)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cProblem\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final DescriptionContainsKeywordsPredicate DEFAULT_DESCRIPTION_PREDICATE \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new DescriptionContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final List\u003cKeyword\u003e keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cKeyword\u003e keywords) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(keywords);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private DescriptionContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public List\u003cKeyword\u003e getKeywords() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                .allMatch(keyword -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    StringUtil.containsWordIgnoreCase(problem.getDescription().value, keyword.toString()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 compareTwoLists(keywords, ((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 51
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/problemsearchrule/DifficultyIsInRangePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Tests that a {@code Problem}\u0027s {@code Difficulty} is in the range [{@code lowerBound}, {@code upperBound}]."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class DifficultyIsInRangePredicate implements Predicate\u003cProblem\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final DifficultyIsInRangePredicate DEFAULT_DIFFICULTY_PREDICATE \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new DifficultyIsInRangePredicate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Both the lower and upper bound for a valid difficulty range \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"should be between (0,5] and lower bound should be no greater than upper bound\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final double DEFAULT_BOUND \u003d -1.0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final double lowerBound;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final double upperBound;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public DifficultyIsInRangePredicate(double lowerBound, double upperBound) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        checkArgument(isValidDifficultyRange(lowerBound, upperBound), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.lowerBound \u003d lowerBound;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.upperBound \u003d upperBound;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private DifficultyIsInRangePredicate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.lowerBound \u003d DEFAULT_BOUND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.upperBound \u003d DEFAULT_BOUND;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if the given lower bound and upper bound is a valid difficulty range."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param lowerBound to be tested"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param upperBound to be tested"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static boolean isValidDifficultyRange(double lowerBound, double upperBound) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return lowerBound \u003e Difficulty.DIFFICULTY_LOWER_BOUND"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 upperBound \u003c\u003d Difficulty.DIFFICULTY_UPPER_BOUND"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 lowerBound \u003c\u003d upperBound;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public double getLowerBound() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return lowerBound;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public double getUpperBound() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return upperBound;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Difficulty difficulty \u003d problem.getDifficulty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return difficulty.value \u003e\u003d lowerBound \u0026\u0026 difficulty.value \u003c\u003d upperBound;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            || (other instanceof DifficultyIsInRangePredicate) // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 lowerBound \u003d\u003d ((DifficultyIsInRangePredicate) other).getLowerBound()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 upperBound \u003d\u003d ((DifficultyIsInRangePredicate) other).getUpperBound(); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 71
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/problemsearchrule/FindProblemDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.model.searchrule.problemsearchrule.AuthorMatchesKeywordPredicate.DEFAULT_AUTHOR_PREDICATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.model.searchrule.problemsearchrule.DescriptionContainsKeywordsPredicate.DEFAULT_DESCRIPTION_PREDICATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.model.searchrule.problemsearchrule.DifficultyIsInRangePredicate.DEFAULT_DIFFICULTY_PREDICATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.model.searchrule.problemsearchrule.NameContainsKeywordsPredicate.DEFAULT_NAME_PREDICATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.model.searchrule.problemsearchrule.SourceMatchesKeywordPredicate.DEFAULT_SOURCE_PREDICATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.model.searchrule.problemsearchrule.TagIncludesKeywordsPredicate.DEFAULT_TAG_PREDICATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Stores the details to find the {@code Problem}. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * corresponding field value of the {@code findProblemPredicate}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class FindProblemDescriptor {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private NameContainsKeywordsPredicate namePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private AuthorMatchesKeywordPredicate authorPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private DescriptionContainsKeywordsPredicate descriptionPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private SourceMatchesKeywordPredicate sourcePredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private DifficultyIsInRangePredicate difficultyPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private TagIncludesKeywordsPredicate tagPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindProblemDescriptor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        namePredicate \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        authorPredicate \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        descriptionPredicate \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        sourcePredicate \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        difficultyPredicate \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        tagPredicate \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindProblemDescriptor(NameContainsKeywordsPredicate namePredicate,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                                 AuthorMatchesKeywordPredicate authorPredicate,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                                 DescriptionContainsKeywordsPredicate descriptionPredicate,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                                 SourceMatchesKeywordPredicate sourcePredicate,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                                 DifficultyIsInRangePredicate difficultyPredicate,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                                 TagIncludesKeywordsPredicate tagPredicate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.namePredicate \u003d namePredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.authorPredicate \u003d authorPredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.descriptionPredicate \u003d descriptionPredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.sourcePredicate \u003d sourcePredicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.difficultyPredicate \u003d difficultyPredicate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.tagPredicate \u003d tagPredicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * A defensive copy constructor."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindProblemDescriptor(FindProblemDescriptor toCopy) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        setNamePredicate(toCopy.namePredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        setAuthorPredicate(toCopy.authorPredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        setDescriptionPredicate(toCopy.descriptionPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        setSourcePredicate(toCopy.sourcePredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        setDifficultyPredicate(toCopy.difficultyPredicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        setTagPredicate(toCopy.tagPredicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean isAnyFieldProvided() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return CollectionUtil.isAnyNonNull(namePredicate, authorPredicate, descriptionPredicate, sourcePredicate,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                difficultyPredicate, tagPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setNamePredicate(NameContainsKeywordsPredicate nameContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.namePredicate \u003d nameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Optional\u003cNameContainsKeywordsPredicate\u003e getNamePredicate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Optional.ofNullable(namePredicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setAuthorPredicate(AuthorMatchesKeywordPredicate authorPredicate) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.authorPredicate \u003d authorPredicate;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Optional\u003cAuthorMatchesKeywordPredicate\u003e getAuthorPredicate() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Optional.ofNullable(authorPredicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setDescriptionPredicate(DescriptionContainsKeywordsPredicate descriptionPredicate) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.descriptionPredicate \u003d descriptionPredicate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Optional\u003cDescriptionContainsKeywordsPredicate\u003e getDescriptionPredicate() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Optional.ofNullable(descriptionPredicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setSourcePredicate(SourceMatchesKeywordPredicate sourcePredicate) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.sourcePredicate \u003d sourcePredicate;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Optional\u003cSourceMatchesKeywordPredicate\u003e getSourcePredicate() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Optional.ofNullable(sourcePredicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setDifficultyPredicate(DifficultyIsInRangePredicate difficultyPredicate) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.difficultyPredicate \u003d difficultyPredicate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Optional\u003cDifficultyIsInRangePredicate\u003e getDifficultyPredicate() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Optional.ofNullable(difficultyPredicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setTagPredicate(TagIncludesKeywordsPredicate tagPredicate) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.tagPredicate \u003d tagPredicate;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Optional\u003cTagIncludesKeywordsPredicate\u003e getTagPredicate() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Optional.ofNullable(tagPredicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Creates and returns a {@code findProblemPredicate} with the details of {@code findProblemDescriptor}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Predicate\u003cProblem\u003e getFindProblemPredicate() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d getNamePredicate().orElse(DEFAULT_NAME_PREDICATE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AuthorMatchesKeywordPredicate authorPredicate \u003d getAuthorPredicate().orElse(DEFAULT_AUTHOR_PREDICATE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DescriptionContainsKeywordsPredicate descriptionPredicate \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                getDescriptionPredicate().orElse(DEFAULT_DESCRIPTION_PREDICATE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SourceMatchesKeywordPredicate sourcePredicate \u003d getSourcePredicate().orElse(DEFAULT_SOURCE_PREDICATE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DifficultyIsInRangePredicate difficultyPredicate \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                getDifficultyPredicate().orElse(DEFAULT_DIFFICULTY_PREDICATE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        TagIncludesKeywordsPredicate tagPredicate \u003d getTagPredicate().orElse(DEFAULT_TAG_PREDICATE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return namePredicate"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .and(authorPredicate)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .and(descriptionPredicate)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .and(sourcePredicate)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .and(difficultyPredicate)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .and(tagPredicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!(other instanceof FindProblemDescriptor)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindProblemDescriptor e \u003d (FindProblemDescriptor) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return getNamePredicate().equals(e.getNamePredicate())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 getAuthorPredicate().equals(e.getAuthorPredicate())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 getDescriptionPredicate().equals(e.getDescriptionPredicate())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 getSourcePredicate().equals(e.getSourcePredicate())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 getDifficultyPredicate().equals(e.getDifficultyPredicate())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 getTagPredicate().equals(e.getTagPredicate());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 158
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/problemsearchrule/Keyword.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Represents a Predicate\u0027s Keyword in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidKeyword(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Keyword {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Keyword should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public final String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code Keyword}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param keyword"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Keyword(String keyword) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        checkArgument(isValidKeyword(keyword), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if a given string is a valid keyword."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static boolean isValidKeyword(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return !test.isBlank();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            || (other instanceof Keyword // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 keyword.equals(((Keyword) other).keyword)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return keyword.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 51
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/problemsearchrule/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Represents a Problem\u0027s name in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * A name is any combination of the following characters: A-Z, a-z, \u0027, . or whitespace."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * A name must contain at least one non-whitespace character."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([A-z\\\\\u0027\\\\.-ᶜ]+(\\\\s)*)*$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int compareTo(Name o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this.name.compareTo(o.name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 66
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/problemsearchrule/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.compareTwoLists;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Tests that a {@code Problem}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cProblem\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final NameContainsKeywordsPredicate DEFAULT_NAME_PREDICATE \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new NameContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final List\u003cKeyword\u003e keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cKeyword\u003e keywords) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(keywords);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private NameContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public List\u003cKeyword\u003e getKeywords() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    StringUtil.containsWordIgnoreCase(problem.getName().fullName, keyword.toString()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 compareTwoLists(keywords, ((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 26,
      "LuWenQ": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/problemsearchrule/ProblemSearchRule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.optionalEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Represents a search rule on finding {@code Problem} in AlgoBase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class ProblemSearchRule extends FindProblemDescriptor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    // Identity field(s)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ProblemSearchRule(Name name, NameContainsKeywordsPredicate namePredicate,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                             AuthorMatchesKeywordPredicate authorPredicate,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                             DescriptionContainsKeywordsPredicate descriptionPredicate,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                             SourceMatchesKeywordPredicate sourcePredicate,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                             DifficultyIsInRangePredicate difficultyPredicate,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                             TagIncludesKeywordsPredicate tagPredicate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        super(namePredicate, authorPredicate, descriptionPredicate, sourcePredicate, difficultyPredicate, tagPredicate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true when {@code other} has the same identity field(s) as {@code this}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param other"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean isSameProblemSearchRule(ProblemSearchRule other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 other.getName().equals(getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            || (other instanceof ProblemSearchRule // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 name.equals(((ProblemSearchRule) other).getName()))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 optionalEquals(getNamePredicate(), ((ProblemSearchRule) other).getNamePredicate())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 optionalEquals(getAuthorPredicate(), ((ProblemSearchRule) other).getAuthorPredicate())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 optionalEquals(getDescriptionPredicate(), ((ProblemSearchRule) other).getDescriptionPredicate())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 optionalEquals(getDifficultyPredicate(), ((ProblemSearchRule) other).getDifficultyPredicate())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 optionalEquals(getSourcePredicate(), ((ProblemSearchRule) other).getSourcePredicate())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 optionalEquals(getTagPredicate(), ((ProblemSearchRule) other).getTagPredicate()); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 55
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/problemsearchrule/SourceMatchesKeywordPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Tests that a {@code Problem}\u0027s {@code Source} matches the given keyword exactly."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class SourceMatchesKeywordPredicate implements Predicate\u003cProblem\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final SourceMatchesKeywordPredicate DEFAULT_SOURCE_PREDICATE \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new SourceMatchesKeywordPredicate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Keyword keyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public SourceMatchesKeywordPredicate(Keyword keyword) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private SourceMatchesKeywordPredicate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Keyword getKeyword() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return problem.getSource().equals(new Source(keyword.toString()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                || (other instanceof SourceMatchesKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 keyword.equals(((SourceMatchesKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 48
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/problemsearchrule/TagIncludesKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.compareTwoLists;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Tests that the given set of keywords is a subset of a {@code Problem}\u0027s set of {@code Tag}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class TagIncludesKeywordsPredicate implements Predicate\u003cProblem\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final TagIncludesKeywordsPredicate DEFAULT_TAG_PREDICATE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new TagIncludesKeywordsPredicate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final List\u003cKeyword\u003e keywords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public TagIncludesKeywordsPredicate(List\u003cKeyword\u003e keywords) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(keywords);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private TagIncludesKeywordsPredicate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public List\u003cKeyword\u003e getKeywords() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return keywords.stream().allMatch(keyword -\u003e problem.getTags().contains(new Tag(keyword.toString())));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                || (other instanceof TagIncludesKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 compareTwoLists(keywords, ((TagIncludesKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 50
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/problemsearchrule/UniqueFindRuleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.exceptions.DuplicateProblemSearchRuleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.exceptions.ProblemSearchRuleNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * A list of find rules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * A find rule is considered unique by comparing using {@code ProblemSearchRule#isSameProblemSearchRule(other)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * As such, adding and updating of find rules uses ProblemSearchRule#isSameProblemSearchRule(other) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * so as to ensure that the find rule being added or updated is unique in terms of identity in the UniqueFindRuleList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * However, the removal of a find rule uses ProblemSearchRule#equals(Object) so as to ensure that the find rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * @see ProblemSearchRule#isSameProblemSearchRule(ProblemSearchRule)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class UniqueFindRuleList implements Iterable\u003cProblemSearchRule\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final ObservableList\u003cProblemSearchRule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final ObservableList\u003cProblemSearchRule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if the list contains an equivalent ProblemSearchRule as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param toCheck"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean contains(ProblemSearchRule toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProblemSearchRule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Adds a ProblemSearchRule to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * The ProblemSearchRule must not exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void add(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(rule);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (contains(rule)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new DuplicateProblemSearchRuleException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        internalList.add(rule);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Replaces the ProblemSearchRule {@code target} in the list with {@code editedRule}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * The ProblemSearchRule identity of {@code editedRule} must not be the same with any other ProblemSearchRule"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param editedRule"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setFindRule(ProblemSearchRule target, ProblemSearchRule editedRule) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireAllNonNull(target, editedRule);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ProblemSearchRuleNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!target.isSameProblemSearchRule(editedRule) \u0026\u0026 contains(editedRule)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new DuplicateProblemSearchRuleException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        internalList.set(index, editedRule);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Removes the equivalent ProblemSearchRule from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code toRemove} must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param toRemove"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void remove(ProblemSearchRule toRemove) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ProblemSearchRuleNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Replaces the contents of the list with {@code replacement}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code replacement} must not contain any"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param replacement"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setFindRules(UniqueFindRuleList replacement) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setFindRules(List\u003cProblemSearchRule\u003e rules) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireAllNonNull(rules);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!findRulesAreUnique(rules)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new DuplicateProblemSearchRuleException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        internalList.setAll(rules);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ObservableList\u003cProblemSearchRule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if {@code rules} contains only unique {@code ProblemSearchRule}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param rules"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private boolean findRulesAreUnique(List\u003cProblemSearchRule\u003e rules) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (int i \u003d 0; i \u003c rules.size() - 1; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c rules.size(); j++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                if (rules.get(i).isSameProblemSearchRule(rules.get(j))) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Iterator\u003cProblemSearchRule\u003e iterator() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            || (other instanceof UniqueFindRuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueFindRuleList) other).internalList));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 142
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/problemsearchrule/exceptions/DuplicateProblemSearchRuleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Signals that the operation would result in duplicate find rules."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class DuplicateProblemSearchRuleException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public DuplicateProblemSearchRuleException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        super(\"Operation would result in duplicate find rules.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 10
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/searchrule/problemsearchrule/exceptions/ProblemSearchRuleNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Signals that the operation is unable to find the specified ProblemSearchRule."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class ProblemSearchRuleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ProblemSearchRuleNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 10
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a Tag in the algobase."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \"Tags names should contain only alphabets, numbers, hyphen or underscore\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9_-]*$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public final Id id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.id \u003d Id.generateId();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Tag(Id id, String tagName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Id getId() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this.tagName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param otherTag"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @return whether the current tag the same as otherTag"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean isSameTag(Tag otherTag) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (otherTag \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return otherTag !\u003d null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 otherTag.getName().equals(getName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 9,
      "tiuweehan": 8,
      "LuWenQ": 19,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/tag/UniqueTagList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A list of tags that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A Tag is considered unique by comparing using {@code Tag#isSameTag(Tag)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * updating of tags uses Tag#isSameTag(Tag) for equality so as to ensure that the Tag being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * or updated is unique in terms of identity in the UniqueTagList. However, the removal of a Tag uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Tag#equals(Object) so as to ensure that the Tag with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * @see Tag#isSameTag(Tag)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if the list contains an equivalent Tag as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTag);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds a Tag to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void add(Tag toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the Tag {@code target} in the list with {@code editedTag}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag identity of {@code editedTag} must not be the same as another existing Tag in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!target.isSameTag(editedTag) \u0026\u0026 contains(editedTag)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.set(index, editedTag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Removes the equivalent Tag from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void remove(Tag toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTags(UniqueTagList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the contents of this list with {@code tags}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!tagsAreUnique(tags)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof UniqueTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTagList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if {@code tags} contains only unique tags."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private boolean tagsAreUnique(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tags.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                if (tags.get(i).isSameTag(tags.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @return toString"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 146
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/tag/exceptions/DuplicateTagException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Signals that the operation will result in duplicate Problems (Problems are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class DuplicateTagException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public DuplicateTagException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        super(\"Operation would result in duplicate tags\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 11
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/tag/exceptions/TagNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Signals that the operation is unable to find the specified Tag."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class TagNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 6
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.Remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Represents a Task in the algobase."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final Id id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final Problem problem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final Boolean isSolved;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final LocalDate targetDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Problem field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Task(Problem problem, LocalDate targetDate, boolean isSolved) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(problem);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.id \u003d Id.generateId();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.problem \u003d problem;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.isSolved \u003d isSolved;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Task(Id id, Problem problem, LocalDate targetDate, boolean isSolved) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(id, problem);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.problem \u003d problem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.isSolved \u003d isSolved;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToUpdate}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * with an updated {@code isSolved}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static Task updateStatus(Task taskToUpdate, boolean isSolved) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(taskToUpdate, isSolved);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Id id \u003d taskToUpdate.id;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Problem problem \u003d taskToUpdate.problem;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDate targetDate \u003d taskToUpdate.targetDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new Task(id, problem, targetDate, isSolved);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToUpdate}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * with an updated {@code targetDate}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static Task updateDueDate(Task taskToUpdate, LocalDate targetDate) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(taskToUpdate, targetDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Id id \u003d taskToUpdate.id;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Problem problem \u003d taskToUpdate.problem;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        boolean isSolved \u003d taskToUpdate.isSolved;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new Task(id, problem, targetDate, isSolved);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Id getId() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Problem getProblem() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return problem;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return problem.getName();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Author getAuthor() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return problem.getAuthor();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return problem.getDescription();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public WebLink getWebLink() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return problem.getWebLink();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return problem.getDifficulty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return problem.getRemark();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Source getSource() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return problem.getSource();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return problem.getTags();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Boolean getIsSolved() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return isSolved;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public LocalDate getTargetDate() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return targetDate;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns status icon of the task."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @return the tick icon [✓] if task is done, or cross icon [✗] otherwise."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        //CHECKSTYLE.OFF: AvoidEscapedUnicodeCharactersCheck"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return this.isSolved ? \"[\\u2713]\" : \"[\\u2718]\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        //CHECKSTYLE.ON: AvoidEscapedUnicodeCharactersCheck"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if both tasks have the same fields."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return otherTask.getProblem().equals(getProblem());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return Objects.hash(problem);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        builder.append(\"Problem: \")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            .append(getProblem())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            .append(\" Date: \")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            .append(getTargetDate())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            .append(\" isSolved: \")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            .append(getIsSolved());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 164,
      "le0tan": 6,
      "tiuweehan": 6
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.PlanDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.PlanName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Contains utility methods for populating {@code AlgoBase} with sample data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static Problem[] getSampleProblems() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new Problem[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            new Problem(Id.generateId(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                    new Name(\"Sequences\"), new Author(\"Tung Kam Chuen\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new WebLink(\"https://open.kattis.com/problems/sequences\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Description(\"Find the sum of the number of inversions of the 2k sequences, \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                            + \"modulo 1000000007(109+7).\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    getTagSet(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Difficulty.DEFAULT_DIFFICULTY,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Remark.DEFAULT_REMARK,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Source(\"Kattis\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            new Problem(Id.generateId(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                    new Name(\"Two Sum\"), Author.DEFAULT_AUTHOR,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new WebLink(\"https://leetcode.com/problems/two-sum/\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Description(\"Given an array of integers, \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                            + \"return indices of the two numbers such that they add up to a specific target.\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    getTagSet(\"array\", \"hash-table\", \"algorithm\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Difficulty(\"1.0\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    new Remark(\"You may assume that each input would have exactly one solution, \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                            + \"and you may not use the same element twice.\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Source(\"LeetCode\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            new Problem(Id.generateId(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                    new Name(\"Second Highest Salary\"), new Author(\"LeetCode\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new WebLink(\"https://leetcode.com/problems/second-highest-salary/\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Description(\"Write a SQL query to get the second highest salary from the Employee table.\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    getTagSet(\"MySQL\", \"database\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Difficulty(\"2.0\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Remark.DEFAULT_REMARK,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Source(\"LeetCode\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            new Problem(Id.generateId(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                    new Name(\"Sudoku Solver\"), Author.DEFAULT_AUTHOR,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new WebLink(\"https://leetcode.com/problems/sudoku-solver/\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    Description.DEFAULT_DESCRIPTION,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    getTagSet(\"hash-table\", \"backtracking\", \"algorithm\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Difficulty(\"5.0\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Remark(\"You may assume that the given Sudoku puzzle will have a single unique solution.\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Source(\"LeetCode\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            new Problem(Id.generateId(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                    new Name(\"A Dawid and Bags of Candies\"), Author.DEFAULT_AUTHOR,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new WebLink(\"https://codeforces.com/problemset/problem/1230/A\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    Description.DEFAULT_DESCRIPTION,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    getTagSet(\"brute-force\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Difficulty(\"4.0\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    new Remark(\"time limit per test1 second\" + \"memory limit per test256 megabytes\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Source(\"CodeForce\")),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            new Problem(Id.generateId(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                    new Name(\"Factorial\"), new Author(\"Wee Han\"), WebLink.DEFAULT_WEBLINK,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Description(\"define a function factorial that takes in a number n \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                            + \"and returns the factorial of the number.\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    getTagSet(\"recursion\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Difficulty.DEFAULT_DIFFICULTY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Remark.DEFAULT_REMARK,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Source.DEFAULT_SOURCE)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static ReadOnlyAlgoBase getSampleAlgoBase() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        AlgoBase sampleAb \u003d new AlgoBase();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e tasks \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (Problem sampleProblem : getSampleProblems()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            sampleAb.addProblem(sampleProblem);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            tasks.add(new Task(sampleProblem, LocalDate.now().plusMonths(1), false));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan samplePlan \u003d new Plan("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new PlanName(\"Data Structures\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new PlanDescription(\"CS2040 Data Structures\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            LocalDate.now(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            LocalDate.now().plusMonths(1),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            tasks"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        sampleAb.addPlan(samplePlan);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan samplePlan2 \u003d new Plan("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new PlanName(\"Graph Algorithms\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new PlanDescription(\"CS3230 Graph Algorithms\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            LocalDate.now(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            LocalDate.now().plusMonths(1),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            tasks"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        sampleAb.addPlan(samplePlan2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        sampleAb.getGuiState()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            .getTabManager()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            .addDetailsTabData("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                new TabData(ModelType.PROBLEM, sampleAb.getProblemList().get(0).getId())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 30,
      "Seris370": 28,
      "tiuweehan": 21,
      "le0tan": 14,
      "LuWenQ": 11,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/AlgoBaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a storage for {@link seedu.algobase.model.AlgoBase}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public interface AlgoBaseStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Path getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns AlgoBase data as a {@link ReadOnlyAlgoBase}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @see #getAlgoBaseFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Saves the given {@link ReadOnlyAlgoBase} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param algoBase cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void saveAlgoBase(ReadOnlyAlgoBase algoBase) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @see #saveAlgoBase(ReadOnlyAlgoBase)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void saveAlgoBase(ReadOnlyAlgoBase algoBase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 45
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedAuthorMatchesKeywordPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.AuthorMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Jackson-friendly version of {@link AuthorMatchesKeywordPredicate}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class JsonAdaptedAuthorMatchesKeywordPredicate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final JsonAdaptedKeyword keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code JsonAdaptedAuthorMatchesKeywordPredicate} with the given"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * AuthorMatchesKeywordPredicate details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedAuthorMatchesKeywordPredicate(@JsonProperty(\"keyword\") JsonAdaptedKeyword keyword) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts a given {@code AuthorMatchesKeywordPredicate} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedAuthorMatchesKeywordPredicate(AuthorMatchesKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d new JsonAdaptedKeyword(predicate.getKeyword());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts this Jackson-friendly adapted Problem object into the model\u0027s"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code AuthorMatchesKeywordPredicate} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * AuthorMatchesKeywordPredicate."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public AuthorMatchesKeywordPredicate toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new AuthorMatchesKeywordPredicate(keyword.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 43
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedDescriptionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Jackson-friendly version of {@link DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class JsonAdaptedDescriptionContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final List\u003cJsonAdaptedKeyword\u003e keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code JsonAdaptedDescriptionContainsKeywordsPredicate} with the given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * DescriptionContainsKeywordsPredicate details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedDescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @JsonProperty(\"keywords\") List\u003cJsonAdaptedKeyword\u003e keywords) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts a given {@code DescriptionContainsKeywordsPredicate} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedDescriptionContainsKeywordsPredicate(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d predicate.getKeywords().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .map(JsonAdaptedKeyword::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts this Jackson-friendly adapted Problem object into the model\u0027s"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code DescriptionContainsKeywordsPredicate} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * DescriptionContainsKeywordsPredicate."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public DescriptionContainsKeywordsPredicate toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final List\u003cKeyword\u003e predicateKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (JsonAdaptedKeyword keyword: keywords) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            predicateKeywords.add(keyword.toModelType());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(predicateKeywords);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 56
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedDifficultyIsInRangePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DifficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Jackson-friendly version of {@link DifficultyIsInRangePredicate}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class JsonAdaptedDifficultyIsInRangePredicate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final double lowerBound;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final double upperBound;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code JsonAdaptedDifficultyIsInRangePredicate} with the given"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * DifficultyIsInRangePredicate details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedDifficultyIsInRangePredicate(@JsonProperty(\"lowerBound\") double lowerBound,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                                                   @JsonProperty(\"upperBound\") double upperBound) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.lowerBound \u003d lowerBound;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.upperBound \u003d upperBound;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts a given {@code DifficultyIsInRangePredicate} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedDifficultyIsInRangePredicate(DifficultyIsInRangePredicate predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.lowerBound \u003d predicate.getLowerBound();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.upperBound \u003d predicate.getUpperBound();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts this Jackson-friendly adapted Problem object into the model\u0027s"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code DifficultyIsInRangePredicate} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public DifficultyIsInRangePredicate toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!DifficultyIsInRangePredicate.isValidDifficultyRange(lowerBound, upperBound)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException(DifficultyIsInRangePredicate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new DifficultyIsInRangePredicate(lowerBound, upperBound);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 47
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedGuiState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.GuiState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Jackson-friendly version of {@link GuiState}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class JsonAdaptedGuiState {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Gui State\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final JsonAdaptedTabManager tabManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Constructs a {@code JsonAdaptedGuiState} with the given Gui State."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public JsonAdaptedGuiState(@JsonProperty(\"tabManager\") JsonAdaptedTabManager tabManager) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabManager \u003d tabManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a given {@code GuiState} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public JsonAdaptedGuiState(GuiState guiState) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabManager \u003d new JsonAdaptedTabManager(guiState.getTabManager());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts this Jackson-friendly adapted GuiState object into the model\u0027s {@code GuiState} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted GuiState."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public GuiState toModelType(AlgoBase algoBase) throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new GuiState(tabManager.toModelType(algoBase));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 42
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedKeyword.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Jackson-friendly version of {@link Keyword}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class JsonAdaptedKeyword {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code JsonAdaptedKeyword} with the given Keyword details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedKeyword(@JsonProperty(\"keyword\") String keyword) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts a given {@code Keyword} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedKeyword(Keyword keyword) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d keyword.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts this Jackson-friendly adapted Problem object into the model\u0027s"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code Keyword} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Keyword."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Keyword toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!Keyword.isValidKeyword(keyword)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException(Keyword.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new Keyword(keyword);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 45
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Jackson-friendly version of {@link NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class JsonAdaptedNameContainsKeywordsPredicate {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final List\u003cJsonAdaptedKeyword\u003e keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code JsonAdaptedNameContainsKeywordsPredicate} with the given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * NameContainsKeywordsPredicate details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedNameContainsKeywordsPredicate(@JsonProperty(\"keywords\") List\u003cJsonAdaptedKeyword\u003e keywords) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts a given {@code NameContainsKeywordsPredicate} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedNameContainsKeywordsPredicate(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d predicate.getKeywords().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .map(JsonAdaptedKeyword::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts this Jackson-friendly adapted Problem object into the model\u0027s"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code NameContainsKeywordsPredicate} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * NameContainsKeywordsPredicate."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public NameContainsKeywordsPredicate toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final List\u003cKeyword\u003e predicateKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (JsonAdaptedKeyword keyword: keywords) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            predicateKeywords.add(keyword.toModelType());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new NameContainsKeywordsPredicate(predicateKeywords);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 56
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedPlan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.PlanDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.PlanName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Jackson-friendly version of {@link Plan}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "class JsonAdaptedPlan {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Plan\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Constructs a {@code JsonAdaptedPlan} with the given Plan details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public JsonAdaptedPlan(@JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                           @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                           @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                           @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                           @JsonProperty(\"taskList\") List\u003cJsonAdaptedTask\u003e taskList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (taskList !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.taskList.addAll(taskList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Converts a given {@code Plan} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public JsonAdaptedPlan(Plan plan) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        id \u003d plan.getId().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        name \u003d plan.getPlanName().fullName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        description \u003d plan.getPlanDescription().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        startDate \u003d plan.getStartDate().format(ParserUtil.FORMATTER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        endDate \u003d plan.getEndDate().format(ParserUtil.FORMATTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskList.addAll(plan.getTasks().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            .map(JsonAdaptedTask::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Converts this Jackson-friendly adapted Plan object into the model\u0027s {@code Plan} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Plan."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Plan toModelType(AlgoBase algoBase) throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        final List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        for (JsonAdaptedTask task : taskList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            tasks.add(task.toModelType(algoBase));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Id modelId \u003d retrieveId(id);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        final PlanName modelName \u003d retrieveName(name);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        final PlanDescription modelDescription \u003d retrieveDescription(description);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        final LocalDate modelStartDate \u003d retrieveDate(startDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        final LocalDate modelEndDate \u003d retrieveDate(endDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        final Set\u003cTask\u003e modelTasks \u003d new HashSet\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new Plan(modelId, modelName, modelDescription, modelStartDate, modelEndDate,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                modelTasks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Converts an id in string format to a long number."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param id id in String format."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @return id in long format."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Id retrieveId(String id) throws IllegalValueException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Id\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Id.generateId(id);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Id\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Converts a name in string format to a PlanName Object."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param name name in string format."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @return the corresponding PlanName Object."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public PlanName retrieveName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                    PlanName.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!PlanName.isValidName(name)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException(PlanName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new PlanName(name);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Converts a description in string format to a PlanDescription Object."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param description description in string format."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @return the corresponding PlanDescription Object."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public PlanDescription retrieveDescription(String description) throws IllegalValueException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                    PlanDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (PlanDescription.isDefaultDescription(description)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return PlanDescription.DEFAULT_PLAN_DESCRIPTION;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!PlanDescription.isValidDescription(description)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException(PlanDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new PlanDescription(description);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Converts a date in string format to a LocalDate Object."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param date date in string format."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @return the corresponding LocalDate Object."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws IllegalValueException if {@code date} is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private LocalDate retrieveDate(String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Date\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return LocalDate.parse(date, ParserUtil.FORMATTER);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException(ParserUtil.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 169,
      "Seris370": 2,
      "tiuweehan": 5
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedProblem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Jackson-friendly version of {@link Problem}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "class JsonAdaptedProblem {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Problem\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final String author;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final String weblink;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final String difficulty;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final String source;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Constructs a {@code JsonAdaptedProblem} with the given Problem details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public JsonAdaptedProblem(@JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                              @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                              @JsonProperty(\"author\") String author,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                              @JsonProperty(\"weblink\") String weblink,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                              @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                              @JsonProperty(\"difficulty\") String difficulty,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                              @JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                              @JsonProperty(\"source\") String source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.weblink \u003d weblink;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Converts a given {@code Problem} into this class for Jackson use."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedProblem(Problem problem) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        id \u003d problem.getId().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        name \u003d problem.getName().fullName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        author \u003d problem.getAuthor().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        weblink \u003d problem.getWebLink().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        description \u003d problem.getDescription().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        tagged.addAll(problem.getTags().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        difficulty \u003d Double.toString(problem.getDifficulty().value);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        remark \u003d problem.getRemark().value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        source \u003d problem.getSource().value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Converts this Jackson-friendly adapted Problem object into the model\u0027s {@code Problem} object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Problem."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Problem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        final List\u003cTag\u003e problemTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            problemTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Id modelId \u003d retrieveId(id);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Name modelName \u003d retrieveName(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Author modelAuthor \u003d retrieveAuthor(author);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final WebLink modelWebLink \u003d retrieveWeblink(weblink);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Description modelDescription \u003d retrieveDescription(description);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Difficulty modelDifficulty \u003d retrieveDifficulty(difficulty);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Remark modelRemark \u003d retrieveRemark(remark);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Source modelSource \u003d retrieveSource(source);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(problemTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new Problem(modelId, modelName, modelAuthor, modelWebLink, modelDescription, modelTags, modelDifficulty,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                modelRemark, modelSource);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Converts an id in string format to a long number."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param id id in String format."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @return id in long format."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Id retrieveId(String id) throws IllegalValueException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Id\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Id.generateId(id);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Id\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a name in string format to a Name Object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param name name in string format."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Name Object."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Name retrieveName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Name(name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts an author in string format to an Author Object."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param author author in string format."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Author Object."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Author retrieveAuthor(String author) throws IllegalValueException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (author \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Author.class.getSimpleName()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (Author.isDefaultAuthor(author)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Author.DEFAULT_AUTHOR;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!Author.isValidAuthor(author)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new IllegalValueException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Author(author);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a weblink in string format to a Weblink Object."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param weblink weblink in string format."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Weblink Object."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public WebLink retrieveWeblink(String weblink) throws IllegalValueException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (weblink \u003d\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, WebLink.class.getSimpleName()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (WebLink.isDefaultWeblink(weblink)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return WebLink.DEFAULT_WEBLINK;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!WebLink.isValidWeblink(weblink)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new IllegalValueException(WebLink.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new WebLink(weblink);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a description in string format to a Description Object."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param description description in string format."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Description Object."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Description retrieveDescription(String description) throws IllegalValueException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (Description.isDefaultDescription(description)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Description.DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a difficulty in string format to a Difficulty Object."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param difficulty difficulty in string format."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Difficulty Object."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Difficulty retrieveDifficulty(String difficulty) throws IllegalValueException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (difficulty \u003d\u003d null) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Difficulty.class.getSimpleName())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (Difficulty.isDefaultDifficulty(difficulty)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Difficulty.DEFAULT_DIFFICULTY;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!Difficulty.isValidDifficulty(difficulty)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException(Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Difficulty(difficulty);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a remark in string format to a Remark Object."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param remark remark in string format."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Remark Object."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Remark retrieveRemark(String remark) throws IllegalValueException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Remark.class.getSimpleName())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (Remark.isDefaultRemark(remark)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Remark.DEFAULT_REMARK;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!Remark.isValidRemark(remark)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Remark(remark);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a source in string format to a Source Object."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param source source in string format."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Source Object."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Source retrieveSource(String source) throws IllegalValueException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (source \u003d\u003d null) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Source.class.getSimpleName())"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (Source.isDefaultSource(source)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Source.DEFAULT_SOURCE;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!Source.isValidSource(source)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException(Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Source(source);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 28,
      "tiuweehan": 119,
      "le0tan": 57,
      "LuWenQ": 37,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedProblemSearchRule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.AuthorMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DifficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.SourceMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.TagIncludesKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Jackson-friendly version of {@link ProblemSearchRule}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class JsonAdaptedProblemSearchRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Find rule\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final JsonAdaptedNameContainsKeywordsPredicate nameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final JsonAdaptedAuthorMatchesKeywordPredicate authorMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final JsonAdaptedDescriptionContainsKeywordsPredicate descriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final JsonAdaptedSourceMatchesKeywordPredicate sourceMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final JsonAdaptedDifficultyIsInRangePredicate difficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final JsonAdaptedTagIncludesKeywordsPredicate tagIncludesKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code JsonAdaptedProblemSearchRule} with the given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * ProblemSearchRule details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedProblemSearchRule(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @JsonProperty(\"namePredicate\") JsonAdaptedNameContainsKeywordsPredicate namePredicate,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @JsonProperty(\"authorPredicate\") JsonAdaptedAuthorMatchesKeywordPredicate authorPredicate,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @JsonProperty(\"descriptionPredicate\") JsonAdaptedDescriptionContainsKeywordsPredicate descriptionPredicate,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @JsonProperty(\"sourcePredicate\") JsonAdaptedSourceMatchesKeywordPredicate sourcePredicate,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @JsonProperty(\"difficultyPredicate\") JsonAdaptedDifficultyIsInRangePredicate difficultyPredicate,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @JsonProperty(\"tagPredicate\") JsonAdaptedTagIncludesKeywordsPredicate tagPredicate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.nameContainsKeywordsPredicate \u003d namePredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.authorMatchesKeywordPredicate \u003d authorPredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.descriptionContainsKeywordsPredicate \u003d descriptionPredicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.sourceMatchesKeywordPredicate \u003d sourcePredicate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.difficultyIsInRangePredicate \u003d difficultyPredicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.tagIncludesKeywordsPredicate \u003d tagPredicate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts a given {@code ProblemSearchRule} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedProblemSearchRule(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        name \u003d rule.getName().name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.nameContainsKeywordsPredicate \u003d getAdaptedNamePredicate(rule);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.authorMatchesKeywordPredicate \u003d getAdaptedAuthorPredicate(rule);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.descriptionContainsKeywordsPredicate \u003d getAdaptedDescriptionPredicate(rule);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.sourceMatchesKeywordPredicate \u003d getAdaptedSourcePredicate(rule);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.difficultyIsInRangePredicate \u003d getAdaptedDifficultyPredicate(rule);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.tagIncludesKeywordsPredicate \u003d getAdaptedTagPredicate(rule);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns a {@link JsonAdaptedNameContainsKeywordsPredicate} from a {@link ProblemSearchRule}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param rule the find rule to extract JSON adapted predicate from"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @return JSON adapted predicate if it is present in {@code rule}, null otherwise."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private JsonAdaptedNameContainsKeywordsPredicate getAdaptedNamePredicate(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (rule.getNamePredicate().isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new JsonAdaptedNameContainsKeywordsPredicate(rule.getNamePredicate().get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns a {@link JsonAdaptedAuthorMatchesKeywordPredicate} from a {@link ProblemSearchRule}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param rule the find rule to extract JSON adapted predicate from"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @return JSON adapted predicate if it is present in {@code rule}, null otherwise."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private JsonAdaptedAuthorMatchesKeywordPredicate getAdaptedAuthorPredicate(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (rule.getAuthorPredicate().isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new JsonAdaptedAuthorMatchesKeywordPredicate(rule.getAuthorPredicate().get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns a {@link JsonAdaptedDescriptionContainsKeywordsPredicate} from a {@link ProblemSearchRule}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param rule the find rule to extract JSON adapted predicate from"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @return JSON adapted predicate if it is present in {@code rule}, null otherwise."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private JsonAdaptedDescriptionContainsKeywordsPredicate getAdaptedDescriptionPredicate(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (rule.getDescriptionPredicate().isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new JsonAdaptedDescriptionContainsKeywordsPredicate(rule.getDescriptionPredicate().get());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns a {@link JsonAdaptedSourceMatchesKeywordPredicate} from a {@link ProblemSearchRule}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param rule the find rule to extract JSON adapted predicate from"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @return JSON adapted predicate if it is present in {@code rule}, null otherwise."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private JsonAdaptedSourceMatchesKeywordPredicate getAdaptedSourcePredicate(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (rule.getSourcePredicate().isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new JsonAdaptedSourceMatchesKeywordPredicate(rule.getSourcePredicate().get());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns a {@link JsonAdaptedDifficultyIsInRangePredicate} from a {@link ProblemSearchRule}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param rule the find rule to extract JSON adapted predicate from"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @return JSON adapted predicate if it is present in {@code rule}, null otherwise."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private JsonAdaptedDifficultyIsInRangePredicate getAdaptedDifficultyPredicate(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (rule.getDifficultyPredicate().isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new JsonAdaptedDifficultyIsInRangePredicate(rule.getDifficultyPredicate().get());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns a {@link JsonAdaptedTagIncludesKeywordsPredicate} from a {@link ProblemSearchRule}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param rule the find rule to extract JSON adapted predicate from"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @return JSON adapted predicate if it is present in {@code rule}, null otherwise."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private JsonAdaptedTagIncludesKeywordsPredicate getAdaptedTagPredicate(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (rule.getTagPredicate().isPresent()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new JsonAdaptedTagIncludesKeywordsPredicate(rule.getTagPredicate().get());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts a name in string format to a Name Object."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param name name in string format."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @return the corresponding Name Object."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Name retrieveName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException(String.format(Name.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new Name(name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts this Jackson-friendly adapted Problem object into the model\u0027s"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code ProblemSearchRule} object."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * ProblemSearchRule."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ProblemSearchRule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final Name name \u003d retrieveName(this.name);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final NameContainsKeywordsPredicate namePredicate;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this.nameContainsKeywordsPredicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            namePredicate \u003d null;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            namePredicate \u003d this.nameContainsKeywordsPredicate.toModelType();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final AuthorMatchesKeywordPredicate authorPredicate;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this.authorMatchesKeywordPredicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            authorPredicate \u003d null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            authorPredicate \u003d this.authorMatchesKeywordPredicate.toModelType();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final DescriptionContainsKeywordsPredicate descriptionPredicate;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this.descriptionContainsKeywordsPredicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            descriptionPredicate \u003d null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            descriptionPredicate \u003d this.descriptionContainsKeywordsPredicate.toModelType();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final SourceMatchesKeywordPredicate sourcePredicate;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this.sourceMatchesKeywordPredicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            sourcePredicate \u003d null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            sourcePredicate \u003d this.sourceMatchesKeywordPredicate.toModelType();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final DifficultyIsInRangePredicate difficultyPredicate;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this.difficultyIsInRangePredicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            difficultyPredicate \u003d null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            difficultyPredicate \u003d this.difficultyIsInRangePredicate.toModelType();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final TagIncludesKeywordsPredicate tagPredicate;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this.tagIncludesKeywordsPredicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            tagPredicate \u003d null;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            tagPredicate \u003d this.tagIncludesKeywordsPredicate.toModelType();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new ProblemSearchRule(name, namePredicate, authorPredicate,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            descriptionPredicate, sourcePredicate, difficultyPredicate, tagPredicate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 216
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedSourceMatchesKeywordPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.SourceMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Jackson-friendly version of {@link SourceMatchesKeywordPredicate}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class JsonAdaptedSourceMatchesKeywordPredicate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final JsonAdaptedKeyword keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code JsonAdaptedSourceMatchesKeywordPredicate} with the given"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * SourceMatchesKeywordPredicate details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedSourceMatchesKeywordPredicate(@JsonProperty(\"keyword\") JsonAdaptedKeyword keyword) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts a given {@code SourceMatchesKeywordPredicate} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedSourceMatchesKeywordPredicate(SourceMatchesKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d new JsonAdaptedKeyword(predicate.getKeyword());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts this Jackson-friendly adapted Problem object into the model\u0027s"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code SourceMatchesKeywordPredicate} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * SourceMatchesKeywordPredicate."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public SourceMatchesKeywordPredicate toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new SourceMatchesKeywordPredicate(keyword.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 43
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedTab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Jackson-friendly version of {@link TabData}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class JsonAdaptedTab {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Tab Data\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final String modelType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final String modelId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Constructs a {@code JsonAdaptedTab} with the given TabData."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public JsonAdaptedTab(@JsonProperty(\"name\") String modelType,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                           @JsonProperty(\"index\") String modelId) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.modelType \u003d modelType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.modelId \u003d modelId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a given {@code TabData} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public JsonAdaptedTab(TabData tabData) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        modelType \u003d tabData.getModelType().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        modelId \u003d tabData.getModelId().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts this Jackson-friendly adapted TabData object into the model\u0027s {@code TabData} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted TabData."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public TabData toModelType(AlgoBase algoBase) throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelType modelType \u003d retrieveModelType(this.modelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Id modelIndex \u003d retrieveModelId(this.modelId);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new TabData(modelType, modelIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts an model type in string format to a ModelType enum."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param modelType Model Type in String format."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return id in long format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public ModelType retrieveModelType(String modelType) throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (modelType \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Model Type\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return ModelType.valueOf(modelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Model Type\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a model id in string format to an Id Object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param modelId model id in integer format."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Index Object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Id retrieveModelId(String modelId) throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return Id.generateId(modelId);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 83
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedTabManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Jackson-friendly version of {@link TabManager}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class JsonAdaptedTabManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final int displayTabIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final int detailsTabIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final List\u003cJsonAdaptedTab\u003e tabsData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Constructs a {@code JsonAdaptedTabManager} with the given Tab Manager."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public JsonAdaptedTabManager(@JsonProperty(\"displayTabIndex\") int displayTabIndex,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                                 @JsonProperty(\"detailsTabIndex\") int detailsTabIndex,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                                 @JsonProperty(\"tabsData\") List\u003cJsonAdaptedTab\u003e tabs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.displayTabIndex \u003d displayTabIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.detailsTabIndex \u003d detailsTabIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabsData.addAll(tabs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a given {@code TabManager} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public JsonAdaptedTabManager(TabManager tabManager) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.displayTabIndex \u003d tabManager.getDisplayTabPaneIndex().getValue().intValue();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.detailsTabIndex \u003d tabManager.getDetailsTabPaneIndex().getValue().intValue();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabsData.addAll(tabManager.getTabsDataList().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            .map(JsonAdaptedTab::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts this Jackson-friendly adapted TabManager object into the model\u0027s {@code TabManager} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted TabManager."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public TabManager toModelType(AlgoBase algoBase) throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        TabManager tabManager \u003d new TabManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        for (JsonAdaptedTab jsonAdaptedTab : tabsData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            tabManager.addDetailsTabData(jsonAdaptedTab.toModelType(algoBase));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabManager.setDisplayTabPaneIndex(Index.fromZeroBased(displayTabIndex));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabManager.setDetailsTabPaneIndex(Index.fromZeroBased(detailsTabIndex));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return tabManager;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 61
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedTagIncludesKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.TagIncludesKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Jackson-friendly version of {@link TagIncludesKeywordsPredicate}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class JsonAdaptedTagIncludesKeywordsPredicate {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final List\u003cJsonAdaptedKeyword\u003e keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code JsonAdaptedTagIncludesKeywordsPredicate} with the given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * TagIncludesKeywordsPredicate details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedTagIncludesKeywordsPredicate(@JsonProperty(\"keywords\") List\u003cJsonAdaptedKeyword\u003e keywords) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts a given {@code TagIncludesKeywordsPredicate} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedTagIncludesKeywordsPredicate(TagIncludesKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d predicate.getKeywords().stream().map(JsonAdaptedKeyword::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Converts this Jackson-friendly adapted Problem object into the model\u0027s"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code TagIncludesKeywordsPredicate} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * TagIncludesKeywordsPredicate."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public TagIncludesKeywordsPredicate toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final List\u003cKeyword\u003e predicateKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (JsonAdaptedKeyword keyword: keywords) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            predicateKeywords.add(keyword.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new TagIncludesKeywordsPredicate(predicateKeywords);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 54
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final String problemId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final String isSolved;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given Task details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                           @JsonProperty(\"problemId\") String problemId,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                           @JsonProperty(\"dateTime\") String dateTime,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                           @JsonProperty(\"isSolved\") String isSolved) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.problemId \u003d problemId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.isSolved \u003d isSolved;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public JsonAdaptedTask(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        id \u003d task.getId().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        problemId \u003d task.getProblem().getId().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        dateTime \u003d task.getTargetDate().format(ParserUtil.FORMATTER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        isSolved \u003d Boolean.toString(task.getIsSolved());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Converts this Jackson-friendly adapted Task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Task toModelType(AlgoBase algoBase) throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Id modelId \u003d retrieveId(id);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        final Problem modelProblem \u003d algoBase.findProblemById(retrieveId(problemId));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        final LocalDate modelDateTime \u003d retrieveDate(dateTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        final boolean modelIsSolved \u003d retrieveIsSolved(isSolved);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new Task(modelId, modelProblem, modelDateTime, modelIsSolved);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Converts an id in string format to a long number."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param id id in String format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @return id in long format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Id retrieveId(String id) throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Id\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Id.generateId(id);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Id\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Converts a date in string format to a LocalDate Object."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param date date in string format."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @return the corresponding LocalDate Object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws IllegalValueException if {@code date} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private LocalDate retrieveDate(String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Date\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return LocalDate.parse(date, ParserUtil.FORMATTER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException(ParserUtil.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Converts a boolean in string format to a boolean."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param isSolved boolean in string format."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @return the corresponding boolean."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws IllegalValueException if {@code date} is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private boolean retrieveIsSolved(String isSolved) throws IllegalValueException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (isSolved \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, \"IsSolved\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return Boolean.parseBoolean(isSolved);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 113,
      "Seris370": 2,
      "tiuweehan": 6
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAlgoBaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A class to access AlgoBase data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class JsonAlgoBaseStorage implements AlgoBaseStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAlgoBaseStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public JsonAlgoBaseStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Path getAlgoBaseFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return readAlgoBase(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Similar to {@link #readAlgoBase()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Optional\u003cJsonSerializableAlgoBase\u003e jsonAlgoBase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                filePath, JsonSerializableAlgoBase.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (jsonAlgoBase.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return Optional.of(jsonAlgoBase.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void saveAlgoBase(ReadOnlyAlgoBase algoBase) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        saveAlgoBase(algoBase, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Similar to {@link #saveAlgoBase(ReadOnlyAlgoBase)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void saveAlgoBase(ReadOnlyAlgoBase algoBase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(algoBase);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAlgoBase(algoBase), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 1,
      "LuWenQ": 25,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonSerializableAlgoBase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * An Immutable AlgoBase that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "@JsonRootName(value \u003d \"algobase\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class JsonSerializableAlgoBase {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROBLEM \u003d \"Problems list contains duplicate Problem(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Tags list contains duplicate Tag(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FIND_RULE \u003d \"Find rules list contains duplicate rules.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final List\u003cJsonAdaptedProblem\u003e problems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final List\u003cJsonAdaptedProblemSearchRule\u003e findRules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final List\u003cJsonAdaptedPlan\u003e plans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final JsonAdaptedGuiState guiState;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Constructs a {@code JsonSerializableAlgoBase} with the given problems."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public JsonSerializableAlgoBase(@JsonProperty(\"problems\") List\u003cJsonAdaptedProblem\u003e problems,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                                    @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                                    @JsonProperty(\"plans\") List\u003cJsonAdaptedPlan\u003e plans,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                                    @JsonProperty(\"guiState\") JsonAdaptedGuiState guiState,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                                    @JsonProperty(\"findRules\") List\u003cJsonAdaptedProblemSearchRule\u003e findRules) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.problems.addAll(problems);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.plans.addAll(plans);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.guiState \u003d guiState;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.findRules.addAll(findRules);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Converts a given {@code ReadOnlyAlgoBase} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAlgoBase}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public JsonSerializableAlgoBase(ReadOnlyAlgoBase source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problems.addAll(source.getProblemList().stream().map(JsonAdaptedProblem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags.addAll(source.getTagList().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        findRules.addAll("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            source.getFindRules().stream().map(JsonAdaptedProblemSearchRule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        plans.addAll(source.getPlanList().stream().map(JsonAdaptedPlan::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        guiState \u003d new JsonAdaptedGuiState(source.getGuiState());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Converts this algobase into the model\u0027s {@code AlgoBase} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        AlgoBase algoBase \u003d new AlgoBase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        for (JsonAdaptedTag jsonAdaptedTag : tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            Tag tag \u003d jsonAdaptedTag.toModelType();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            if (algoBase.hasTag(tag)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            algoBase.addTag(tag);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (JsonAdaptedProblem jsonAdaptedProblem : problems) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            Problem problem \u003d jsonAdaptedProblem.toModelType();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            if (algoBase.hasProblem(problem)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PROBLEM);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            algoBase.addProblem(problem);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        for (JsonAdaptedPlan jsonAdaptedPlan : plans) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            Plan plan \u003d jsonAdaptedPlan.toModelType(algoBase);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            algoBase.addPlan(plan);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        algoBase.setGuiState(guiState.toModelType(algoBase));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (JsonAdaptedProblemSearchRule jsonAdaptedProblemSearchRule: findRules) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            ProblemSearchRule rule \u003d jsonAdaptedProblemSearchRule.toModelType();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (algoBase.hasFindRule(rule)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FIND_RULE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            algoBase.addFindRule(rule);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBase;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 16,
      "le0tan": 13,
      "tiuweehan": 10,
      "LuWenQ": 65
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public interface Storage extends AlgoBaseStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Path getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void saveAlgoBase(ReadOnlyAlgoBase algoBase) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Manages storage of AlgoBase data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private AlgoBaseStorage algoBaseStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public StorageManager(AlgoBaseStorage algoBaseStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.algoBaseStorage \u003d algoBaseStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AlgoBase methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Path getAlgoBaseFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBaseStorage.getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return readAlgoBase(algoBaseStorage.getAlgoBaseFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBaseStorage.readAlgoBase(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void saveAlgoBase(ReadOnlyAlgoBase algoBase) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        saveAlgoBase(algoBase, algoBaseStorage.getAlgoBaseFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void saveAlgoBase(ReadOnlyAlgoBase algoBase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBaseStorage.saveAlgoBase(algoBase, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 21,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a storage for {@link seedu.algobase.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Saves the given {@link seedu.algobase.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.RewindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        commandTextField.addEventHandler(KeyEvent.KEY_PRESSED, new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            public void handle(KeyEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                if (event.getCode() \u003d\u003d KeyCode.UP \u0026\u0026 event.isControlDown()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                            commandExecutor.execute(RewindCommand.REWIND_TO_LAST_COMMAND_TEXT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        if (commandResult.isRewind()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                            commandTextField.setText(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setCommandText(String commandText) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        commandTextField.setText(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            CommandResult commandResult \u003d commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (commandResult.isRewind()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                commandTextField.setText(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "         * @see seedu.algobase.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 30,
      "LuWenQ": 5,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/FindRuleCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ResourceBundle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DifficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * An UI component that displays information of a {@code FindRule}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class FindRuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String FXML \u003d \"FindRuleListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String DEFAULT_PREDICATE \u003d \"No restriction.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public final ProblemSearchRule findRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private ResourceBundle resources;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private URL location;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Label ruleName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Label problemName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Label source;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Label tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindRuleCard(ProblemSearchRule findRule, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.findRule \u003d findRule;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        id.setWrapText(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        id.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ruleName.setText(findRule.getName().name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ruleName.setWrapText(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ruleName.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (findRule.getNamePredicate().isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            problemName.setText(DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            problemName.setText(findRule.getNamePredicate().get().getKeywords().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        problemName.setWrapText(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        problemName.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (findRule.getAuthorPredicate().isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            author.setText(DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            author.setText(findRule.getAuthorPredicate().get().getKeyword().keyword);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        author.setWrapText(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        author.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (findRule.getDescriptionPredicate().isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            description.setText(DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            description.setText(findRule.getDescriptionPredicate().get().getKeywords().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        description.setWrapText(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        description.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (findRule.getDifficultyPredicate().isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            difficulty.setText(DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            DifficultyIsInRangePredicate difficultyPredicate \u003d findRule.getDifficultyPredicate().get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            double lowerBound \u003d difficultyPredicate.getLowerBound();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            double upperBound \u003d difficultyPredicate.getUpperBound();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            String difficultyString \u003d String.format(\"%f - %f\", lowerBound, upperBound);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            difficulty.setText(difficultyString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        difficulty.setWrapText(true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        difficulty.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (findRule.getSourcePredicate().isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            source.setText(DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            source.setText(findRule.getSourcePredicate().get().getKeyword().keyword);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        source.setWrapText(true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        source.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (findRule.getTagPredicate().isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            tag.setText(DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            tag.setText(findRule.getTagPredicate().get().getKeywords().toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        tag.setWrapText(true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        tag.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Initialize the GUI and make sure that all expected components are present."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void initialize() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assert cardPane !\u003d null"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                : \"fx:id\u003d\\\"cardPane\\\" was not injected: check your FXML file \u0027FindRuleListCard.fxml\u0027.\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assert id !\u003d null"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                : \"fx:id\u003d\\\"id\\\" was not injected: check your FXML file \u0027FindRuleListCard.fxml\u0027.\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assert ruleName !\u003d null"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                : \"fx:id\u003d\\\"ruleName\\\" was not injected: check your FXML file \u0027FindRuleListCard.fxml\u0027.\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assert problemName !\u003d null"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                : \"fx:id\u003d\\\"problemName\\\" was not injected: check your FXML file \u0027FindRuleListCard.fxml\u0027.\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assert author !\u003d null"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                : \"fx:id\u003d\\\"author\\\" was not injected: check your FXML file \u0027FindRuleListCard.fxml\u0027.\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assert description !\u003d null"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                : \"fx:id\u003d\\\"description\\\" was not injected: check your FXML file \u0027FindRuleListCard.fxml\u0027.\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assert difficulty !\u003d null"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                : \"fx:id\u003d\\\"difficulty\\\" was not injected: check your FXML file \u0027FindRuleListCard.fxml\u0027.\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assert source !\u003d null"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                : \"fx:id\u003d\\\"source\\\" was not injected: check your FXML file \u0027FindRuleListCard.fxml\u0027.\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assert tag !\u003d null : \"fx:id\u003d\\\"tag\\\" was not injected: check your FXML file \u0027FindRuleListCard.fxml\u0027.\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!(other instanceof FindRuleCard)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindRuleCard card \u003d (FindRuleCard) other;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 findRule.equals(card.findRule);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 17,
      "le0tan": 135
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/FindRuleListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Panel containing the list of find rules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class FindRuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String FXML \u003d \"FindRuleListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FindRuleListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private ListView\u003cProblemSearchRule\u003e findRuleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindRuleListPanel(ObservableList\u003cProblemSearchRule\u003e findRuleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        findRuleListView.setItems(findRuleList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        findRuleListView.setCellFactory(listView -\u003e new FindRuleListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code ProblemSearchRule}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * using a {@code FindRuleCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    class FindRuleListViewCell extends ListCell\u003cProblemSearchRule\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        protected void updateItem(ProblemSearchRule item, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                setGraphic(new FindRuleCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 46
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-w11-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.RewindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.WriteOnlyTabManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.ui.details.DetailsTabPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.ui.display.DisplayTab;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.ui.display.DisplayTabPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private DisplayTabPane displayTabPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private DetailsTabPane detailsTabPane;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private TaskManagementPane taskManagementPane;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private ProblemListPanel problemListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private TagListPanel tagListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private PlanListPanel planListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private FindRuleListPanel findRuleListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private SplitPane layoutPanePlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        displayTabPane \u003d getDisplayTabPane(logic.getGuiState().getTabManager());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        detailsTabPane \u003d new DetailsTabPane(logic);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskManagementPane \u003d new TaskManagementPane("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            logic.getProcessedTaskList(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            logic.getCurrentPlan(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            logic.getCurrentSolvedCount(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            logic.getCurrentUnsolvedCount()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        layoutPanePlaceholder.getItems().add(displayTabPane.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        layoutPanePlaceholder.getItems().add(detailsTabPane.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        layoutPanePlaceholder.getItems().add(taskManagementPane.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        layoutPanePlaceholder.setDividerPositions(0.33, 0.66);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAlgoBaseFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private DisplayTabPane getDisplayTabPane(WriteOnlyTabManager writeOnlyTabManager) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        problemListPanel \u003d new ProblemListPanel(logic.getProcessedProblemList(), writeOnlyTabManager);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        planListPanel \u003d new PlanListPanel(logic.getProcessedPlanList(), writeOnlyTabManager);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        tagListPanel \u003d new TagListPanel(logic.getProcessedTagList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        findRuleListPanel \u003d new FindRuleListPanel(logic.getProcessedFindRuleList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        DisplayTab problemListPanelTab \u003d new DisplayTab(ModelType.PROBLEM.getTabName(), problemListPanel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        DisplayTab tagListPanelTab \u003d new DisplayTab(ModelType.TAG.getTabName(), tagListPanel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        DisplayTab planListPanelTab \u003d new DisplayTab(ModelType.PLAN.getTabName(), planListPanel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DisplayTab findRuleListPaneTab \u003d new DisplayTab(ModelType.FINDRULE.getTabName(), findRuleListPanel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new DisplayTabPane("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            logic.getGuiState(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            problemListPanelTab,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            tagListPanelTab,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planListPanelTab,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            findRuleListPaneTab"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemListPanel getProblemListPanel() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return problemListPanel;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public TagListPanel getTagListPanel() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return tagListPanel;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanListPanel getPlanListPanel() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return planListPanel;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindRuleListPanel getFindRuleListPanel() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return findRuleListPanel;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @see seedu.algobase.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            // For rewind commands, result displayed is not what .getFeedbackToUser() returns."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (commandResult.isRewind()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                resultDisplay.setFeedbackToUser(RewindCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 19,
      "Seris370": 5,
      "tiuweehan": 22,
      "le0tan": 12,
      "LuWenQ": 18,
      "-": 178
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/PlanCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.input.MouseButton;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.WriteOnlyTabManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * An UI component that displays information of a {@code Plan}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class PlanCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PlanCard.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private static final String FXML \u003d \"PlanListCard.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public final Plan plan;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Label planName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Label planDescription;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public PlanCard(Plan plan, int displayedIndex, WriteOnlyTabManager writeOnlyTabManager) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.plan \u003d plan;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        id.setWrapText(true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        id.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        planName.setText(plan.getPlanName().fullName + \" (\" + plan.getTasks().size() + \" tasks)\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        planName.setWrapText(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        planName.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        planDescription.setText(plan.getPlanDescription().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        planDescription.setWrapText(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        planDescription.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        startDate.setText(plan.getStartDate().format(ParserUtil.FORMATTER));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        startDate.setWrapText(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        startDate.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        endDate.setText(plan.getEndDate().format(ParserUtil.FORMATTER));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        endDate.setWrapText(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        endDate.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        addMouseClickListener(writeOnlyTabManager.addDetailsTabConsumer(ModelType.PLAN));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // checks if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // checks if object of same class"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // handles null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!(other instanceof PlanCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // check fields equality"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        PlanCard card \u003d (PlanCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 plan.equals(card.plan);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Spawns a new Tab when the cardPane registers a double click event."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param addDetailsTabConsumer"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void addMouseClickListener(Consumer\u003cId\u003e addDetailsTabConsumer) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        cardPane.setOnMouseClicked(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            public void handle(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                if (mouseEvent.getButton().equals(MouseButton.PRIMARY)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    if (mouseEvent.getClickCount() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        logger.fine(\"Double Clicked\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        addDetailsTabConsumer.accept(plan.getId());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 15,
      "Seris370": 55,
      "tiuweehan": 33
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/PlanListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.WriteOnlyTabManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Panel containing the list of plans."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class PlanListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private static final String FXML \u003d \"PlanListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PlanListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final WriteOnlyTabManager writeOnlyTabManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private ListView\u003cPlan\u003e planListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public PlanListPanel(ObservableList\u003cPlan\u003e planList, WriteOnlyTabManager writeOnlyTabManager) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        planListView.setItems(planList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        planListView.setCellFactory(listView -\u003e new PlanListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.writeOnlyTabManager \u003d writeOnlyTabManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Plan} using a {@code PlanCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    class PlanListViewCell extends ListCell\u003cPlan\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        protected void updateItem(Plan plan, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            super.updateItem(plan, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            if (empty || plan \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                setGraphic(new PlanCard(plan, getIndex() + 1, writeOnlyTabManager).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 45,
      "tiuweehan": 6
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/ProblemCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.input.MouseButton;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.WriteOnlyTabManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * An UI component that displays information of a {@code Problem}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class ProblemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ProblemCard.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static final String FXML \u003d \"ProblemListCard.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public final Problem problem;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Label weblink;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Label source;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public ProblemCard(Problem problem, int displayedIndex, WriteOnlyTabManager writeOnlyTabManager) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.problem \u003d problem;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        id.setWrapText(true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        id.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        name.setText(problem.getName().fullName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        name.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        author.setText(problem.getAuthor().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        author.setWrapText(true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        author.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        description.setText(problem.getDescription().value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        description.setWrapText(true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        description.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        weblink.setText(problem.getWebLink().value);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        weblink.setWrapText(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        weblink.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        difficulty.setText(problem.getDifficulty().toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        difficulty.setWrapText(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        difficulty.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        remark.setText(problem.getRemark().value);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        remark.setWrapText(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        remark.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        source.setText(problem.getSource().value);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        source.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        source.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problem.getTags().stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.addMouseClickListener(writeOnlyTabManager.addDetailsTabConsumer(ModelType.PROBLEM));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!(other instanceof ProblemCard)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        ProblemCard card \u003d (ProblemCard) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 problem.equals(card.problem);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Spawns a new Tab when the cardPane registers a double click event."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param addDetailsTabConsumer"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void addMouseClickListener(Consumer\u003cId\u003e addDetailsTabConsumer) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        cardPane.setOnMouseClicked(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            public void handle(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                if (mouseEvent.getButton().equals(MouseButton.PRIMARY)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    if (mouseEvent.getClickCount() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        logger.fine(\"Double Clicked\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        addDetailsTabConsumer.accept(problem.getId());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 17,
      "Seris370": 2,
      "tiuweehan": 41,
      "LuWenQ": 21,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/ProblemListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.WriteOnlyTabManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Panel containing the list of problems."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class ProblemListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static final String FXML \u003d \"ProblemListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProblemListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final WriteOnlyTabManager writeOnlyTabManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private ListView\u003cProblem\u003e problemListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public ProblemListPanel(ObservableList\u003cProblem\u003e problemList, WriteOnlyTabManager writeOnlyTabManager) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problemListView.setItems(problemList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problemListView.setCellFactory(listView -\u003e new ProblemListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.writeOnlyTabManager \u003d writeOnlyTabManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Problem} using a {@code ProblemCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    class ProblemListViewCell extends ListCell\u003cProblem\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        protected void updateItem(Problem problem, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            super.updateItem(problem, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            if (empty || problem \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                setGraphic(new ProblemCard(problem, getIndex() + 1, writeOnlyTabManager).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 7,
      "LuWenQ": 43
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/TagCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * An UI component that displays information of a {@code Tag}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class TagCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static final String FXML \u003d \"TagListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public final Tag tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Label tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public TagCard(Tag tag, int displayedIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        id.setWrapText(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        id.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tagName.setText(tag.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        tagName.setWrapText(true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        tagName.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        // checks if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        // checks if object of same class"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        // handles null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!(other instanceof TagCard)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        // check fields equality"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        TagCard card \u003d (TagCard) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 tag.equals(card.tag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 5,
      "LuWenQ": 51
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/TagListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Panel containing the list of tags."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class TagListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static final String FXML \u003d \"TagListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TagListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private ListView\u003cTag\u003e tagListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public TagListPanel(ObservableList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tagListView.setItems(tagList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tagListView.setCellFactory(listView -\u003e new TagListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Tag} using a {@code TagCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    class TagListViewCell extends ListCell\u003cTag\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        protected void updateItem(Tag tag, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            super.updateItem(tag, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            if (empty || tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                setGraphic(new TagCard(tag, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 47
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/TaskCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label targetDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label weblink;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label source;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        id.setWrapText(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        id.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        name.setText(task.getName().fullName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        name.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        name.setStyle(task.getIsSolved() ? \"-fx-text-fill: #96b946;\" : \"-fx-text-fill: #ff6973;\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        status.setText(task.getStatusIcon());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        status.setStyle(task.getIsSolved() ? \"-fx-text-fill: #96b946;\" : \"-fx-text-fill: #ff6973;\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        targetDate.setText(task.getTargetDate().format(ParserUtil.FORMATTER));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        targetDate.setWrapText(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        targetDate.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        author.setText(task.getAuthor().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        author.setWrapText(true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        author.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        description.setText(task.getDescription().value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        description.setWrapText(true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        description.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        weblink.setText(task.getWebLink().value);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        weblink.setWrapText(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        weblink.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        difficulty.setText(task.getDifficulty().toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        difficulty.setWrapText(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        difficulty.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        remark.setText(task.getRemark().value);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        remark.setWrapText(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        remark.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        source.setText(task.getSource().value);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        source.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        source.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        task.getTags().stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 111
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/TaskManagementPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.value.ObservableIntegerValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.value.ObservableStringValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.chart.PieChart.Data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class TaskManagementPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private static final String FXML \u003d \"TaskManagementPane.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskManagementPane.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private ObservableList\u003cData\u003e taskProgress \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label currentPlan;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private PieChart taskProgressChart;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public TaskManagementPane(ObservableList\u003cTask\u003e taskList, ObservableStringValue plan,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                              ObservableIntegerValue solvedCount, ObservableIntegerValue unsolvedCount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        currentPlan.setText(\"Current Plan: \" + plan.getValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskProgressChart.setData(getChartData((int) solvedCount.getValue(), (int) unsolvedCount.getValue()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskProgressChart.setClockwise(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskProgressChart.setLabelsVisible(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskProgressChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskProgressChart.setStartAngle(90);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        addListenerForPlanName(plan);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        addListenerForPieChart(solvedCount, unsolvedCount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Obtains data for pie chart."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private ObservableList\u003cData\u003e getChartData(int solvedCount, int unsolvedCount) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskProgress.addAll(new PieChart.Data(\"Solved\", solvedCount),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new PieChart.Data(\"Unsolved\", unsolvedCount));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return taskProgress;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Adds a listener to watch for changes for plan name."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param s The observable plan name string."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private void addListenerForPlanName(ObservableStringValue s) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        s.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            currentPlan.setText(\"Current Plan: \" + newValue);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Adds a listener to watch for changes for task progress."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param solvedCount The observable solved count."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param unsolvedCount The observable unsolved count."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private void addListenerForPieChart(ObservableIntegerValue solvedCount, ObservableIntegerValue unsolvedCount) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        solvedCount.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            for (Data d : taskProgress) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                if (d.getName().equals(\"Solved\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                    d.setPieValue((int) newValue);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        unsolvedCount.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            for (Data d : taskProgress) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                if (d.getName().equals(\"Unsolved\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                    d.setPieValue((int) newValue);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 109
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/algobase.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        primaryStage.setMaximized(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "LuWenQ": 5,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/details/DetailsTab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.ui.details;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.WriteOnlyTabManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * An UI component that displays tab content."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class DetailsTab extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final String FXML \u003d \"DetailsTab.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final Id modelId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Tab tabContentPlaceholder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public DetailsTab(String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabContentPlaceholder \u003d new Tab(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.modelId \u003d Id.generateId();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public DetailsTab("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        String name,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        UiPart\u003cRegion\u003e uiPart,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelType modelType,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Id modelId,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        WriteOnlyTabManager writeOnlyTabManager"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabContentPlaceholder \u003d new Tab(name, uiPart.getRoot());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.modelId \u003d modelId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        addOnCloseRequestListener(writeOnlyTabManager.removeDetailsTabConsumer(modelType));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Tab getTab() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return tabContentPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds an listener that registers when the tab closes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private void addOnCloseRequestListener(Consumer\u003cId\u003e removeDetailsTabConsumer) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabContentPlaceholder.setOnCloseRequest(e -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            removeDetailsTabConsumer.accept(modelId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            e.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 58
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/details/DetailsTabPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.ui.details;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.value.ObservableIntegerValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.ReadOnlyTabManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.WriteOnlyTabManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.ui.UiPart;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Contains details about a specific model."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class DetailsTabPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final String FXML \u003d \"DetailsTabPane.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final ReadOnlyAlgoBase algoBase;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final ReadOnlyTabManager readOnlyTabManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final WriteOnlyTabManager writeOnlyTabManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TabPane tabsPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public DetailsTabPane(Logic logic) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabsPlaceholder.setTabClosingPolicy(TabPane.TabClosingPolicy.SELECTED_TAB);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.algoBase \u003d logic.getAlgoBase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.readOnlyTabManager \u003d logic.getGuiState().getTabManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.writeOnlyTabManager \u003d logic.getGuiState().getTabManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        addTabsToTabPane(readOnlyTabManager.getTabsDataList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        selectTab(readOnlyTabManager.getDetailsTabPaneIndex().getValue().intValue());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        addListenerForTabChanges();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        addListenerForIndexChange(readOnlyTabManager.getDetailsTabPaneIndex());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        addListenerToTabPaneIndexChange(writeOnlyTabManager::setDetailsTabPaneIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds a list of TabData to the tab pane."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param tabsData List of tabs to be displayed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private void addTabsToTabPane(List\u003c? extends TabData\u003e tabsData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabsData.stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            .map(this::convertTabDataToDetailsTab)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            .collect(Collectors.toList())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            .forEach((tabData) -\u003e tabData.ifPresent(this::addTabToTabPane));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds a list of details tabs to the tab pane."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param detailsTab List of tabs to be displayed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private void addTabToTabPane(DetailsTab detailsTab) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabsPlaceholder.getTabs().add(detailsTab.getTab());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds a listener to the tab pane that watches for an index change."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param detailsTabPaneIndex The observable index."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private void addListenerForIndexChange(ObservableIntegerValue detailsTabPaneIndex) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        detailsTabPaneIndex.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            selectTab((newValue.intValue()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds an index change listener to the tab pane."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param indexChangeHandler A callback function for when the index of the tabPane changes."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private void addListenerToTabPaneIndexChange(Consumer\u003cIndex\u003e indexChangeHandler) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabsPlaceholder.getSelectionModel().selectedIndexProperty().addListener(new ChangeListener\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Number\u003e observable, Number oldValue, Number newValue) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                indexChangeHandler.accept(Index.fromZeroBased(newValue.intValue()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds a listener to handle tab changes."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private void addListenerForTabChanges() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        readOnlyTabManager.getTabsDataList().addListener(new ListChangeListener\u003cTabData\u003e() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            public void onChanged(Change\u003c? extends TabData\u003e change) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                clearTabs();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                addTabsToTabPane(change.getList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                tabsPlaceholder.requestLayout();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                selectLastTab();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private void clearTabs() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabsPlaceholder.getTabs().clear();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a {code: TabData} object into a {code: DetailsTab} object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param tabData The TabData to be converted."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Optional\u003cDetailsTab\u003e convertTabDataToDetailsTab(TabData tabData) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelType modelType \u003d tabData.getModelType();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Id modelId \u003d tabData.getModelId();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            switch (modelType) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            case PROBLEM:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                Problem problem \u003d algoBase.findProblemById(modelId);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                return Optional.of("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    new DetailsTab("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        problem.getName().fullName,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        new ProblemDetails(problem),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        modelType,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        modelId,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        writeOnlyTabManager"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                );"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            case PLAN:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                Plan plan \u003d algoBase.findPlanById(modelId);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                return Optional.of("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    new DetailsTab("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        plan.getPlanName().fullName,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        new PlanDetails(plan),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        modelType,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        modelId,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                        writeOnlyTabManager"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                );"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            case TAG:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                Tag tag \u003d algoBase.findTagById(modelId);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                return Optional.of(new DetailsTab(tag.getName()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                throw new IllegalArgumentException(\"Model does not exist\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Selects the tab to be displayed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param index the index of the tab in the tab pane to be selected."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void selectTab(int index) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabsPlaceholder.getSelectionModel().select(index);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Selects the last tab to be displayed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void selectLastTab() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        selectTab(tabsPlaceholder.getTabs().size() - 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 182
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/details/PlanDetails.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.ui.details;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * An UI component that displays detailed information of a {@code Problem}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class PlanDetails extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final String FXML \u003d \"PlanDetails.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final Plan plan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TextField planName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TextField startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TextField endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TextArea planDescription;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public PlanDetails(Plan plan) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.plan \u003d plan;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        planName.setText(plan.getPlanName().fullName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        startDate.setText(plan.getStartDate().toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        endDate.setText(plan.getEndDate().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        planDescription.setText(plan.getPlanDescription().value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 36
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/details/ProblemDetails.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.ui.details;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * An UI component that displays detailed information of a {@code Problem}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class ProblemDetails extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final String FXML \u003d \"ProblemDetails.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final Problem problem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TextField name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TextField author;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TextField weblink;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TextField difficulty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TextField remark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TextField source;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TextArea description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public ProblemDetails(Problem problem) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.problem \u003d problem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        name.setText(problem.getName().fullName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        author.setText(problem.getAuthor().value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        weblink.setText(problem.getWebLink().value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        description.setText(problem.getDescription().value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        remark.setText(problem.getRemark().value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        source.setText(problem.getRemark().value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 44
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/display/DisplayTab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.ui.display;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * An UI component that displays tab content."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class DisplayTab extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final String FXML \u003d \"DisplayTab.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Tab tabContentPlaceholder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public DisplayTab(String name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabContentPlaceholder \u003d new Tab(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public DisplayTab(String name, UiPart\u003cRegion\u003e uiPart) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabContentPlaceholder \u003d new Tab(name, uiPart.getRoot());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Tab getTab() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return tabContentPlaceholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 31
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/display/DisplayTabPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.ui.display;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.value.ObservableIntegerValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.GuiState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Pane containing the different tabs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class DisplayTabPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final String FXML \u003d \"DisplayTabPane.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TabPane tabsPlaceholder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public DisplayTabPane(GuiState guiState, DisplayTab... displayTabs) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        addTabsToTabPane(displayTabs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        selectTab(guiState.getTabManager().getDisplayTabPaneIndex().getValue().intValue());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        addListenerForIndexChange(guiState.getTabManager().getDisplayTabPaneIndex());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        addListenerToTabPaneIndexChange(guiState.getTabManager()::setDisplayTabPaneIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds a list of display tabs to the tab pane."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param displayTabs List of tabs to be displayed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private void addTabsToTabPane(DisplayTab... displayTabs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        for (DisplayTab displayTab: displayTabs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            this.tabsPlaceholder.getTabs().add(displayTab.getTab());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds a listener to the tab pane that watches for an index change."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param displayTabPaneIndex The observable index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private void addListenerForIndexChange(ObservableIntegerValue displayTabPaneIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        displayTabPaneIndex.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            selectTab((newValue.intValue()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds an index change listener to the tab pane."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param indexChangeHandler A callback function for when the index of the tabPane changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private void addListenerToTabPaneIndexChange(Consumer\u003cIndex\u003e indexChangeHandler) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabsPlaceholder.getSelectionModel().selectedIndexProperty().addListener(new ChangeListener\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Number\u003e observable, Number oldValue, Number newValue) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                indexChangeHandler.accept(Index.fromZeroBased(newValue.intValue()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Selects the tab to be displayed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param index the index of the tab in the tab pane to be selected."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void selectTab(int index) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabsPlaceholder.getSelectionModel().select(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 79
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-tab-min-width: 90px;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-background-color: #e6e6e6;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-background-color: #3c3c3c;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-text-fill: #828282;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-text-fill: #96b946;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".cell_big_label_white {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".scroll-pane \u003e .viewport {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-control-inner-background: #383838;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".scroll-pane-text {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-text-fill: #e9e9e9;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "#filterField, #problemListPanel, #problemWebpage {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".default-color0.chart-pie { -fx-pie-color: #96b946; }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".default-color1.chart-pie { -fx-pie-color: #ff6973; }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".chart-pie-label-line {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    -fx-stroke: #FFFFFF;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    -fx-fill: #FFFFFF;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".chart-pie-label {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    -fx-fill: #FFFFFF;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    -fx-font-size: 1em;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jiayushe": 20,
      "tiuweehan": 34,
      "LuWenQ": 1,
      "-": 348
    }
  },
  {
    "path": "src/main/resources/view/DetailsTab.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cTab xmlns:fx\u003d\"http://javafx.com/fxml/1\"  fx:id\u003d\"tabContentPlaceholder\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 5
    }
  },
  {
    "path": "src/main/resources/view/DetailsTabPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"detailsTabPanePlaceholder\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  \u003cTabPane AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "           minHeight\u003d\"360.0\" minWidth\u003d\"300.0\" side\u003d\"TOP\" tabClosingPolicy\u003d\"UNAVAILABLE\" fx:id\u003d\"tabsPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 9
    }
  },
  {
    "path": "src/main/resources/view/DisplayTab.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cTab xmlns:fx\u003d\"http://javafx.com/fxml/1\"  fx:id\u003d\"tabContentPlaceholder\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 5
    }
  },
  {
    "path": "src/main/resources/view/DisplayTabPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"displayTabPanePlaceholder\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  \u003cTabPane AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "         minHeight\u003d\"360.0\" minWidth\u003d\"300.0\" side\u003d\"TOP\" tabClosingPolicy\u003d\"UNAVAILABLE\"  fx:id\u003d\"tabsPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 9
    }
  },
  {
    "path": "src/main/resources/view/FindRuleListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u003cLabel fx:id\u003d\"ruleName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$ruleName\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "               \u003cLabel text\u003d\"Name: \" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "               \u003cLabel fx:id\u003d\"problemName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$problemName\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "               \u003cLabel text\u003d\"Author: \" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                  \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "               \u003cLabel text\u003d\"Description: \" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                  \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "               \u003cLabel text\u003d\"Difficulty: \" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                  \u003cLabel fx:id\u003d\"difficulty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "               \u003cLabel text\u003d\"Source: \" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                  \u003cLabel fx:id\u003d\"source\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$source\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         \u003cHBox layoutX\u003d\"25.0\" layoutY\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "               \u003cLabel text\u003d\"Tag:\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "               \u003cLabel fx:id\u003d\"tag\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$tag\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "le0tan": 70
    }
  },
  {
    "path": "src/main/resources/view/FindRuleListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    \u003cListView fx:id\u003d\"findRuleListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "le0tan": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Read User Guide\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "         title\u003d\"AlgoBase App\" minWidth\u003d\"1000\" minHeight\u003d\"700\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    \u003cImage url\u003d\"@/images/algobase.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cSplitPane fx:id\u003d\"layoutPanePlaceholder\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "tiuweehan": 5,
      "LuWenQ": 2,
      "-": 53
    }
  },
  {
    "path": "src/main/resources/view/PlanDetails.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  \u003cScrollPane AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              AnchorPane.rightAnchor\u003d\"0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"edge-to-edge\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c!-- Plan Name--\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cStackPane alignment\u003d\"CENTER_LEFT\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cInsets top\u003d\"10\" bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cLabel text\u003d\"Plan Name\" styleClass\u003d\"scroll-pane-text\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cStackPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cTextField fx:id\u003d\"planName\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c!-- Start Date--\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cStackPane alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cInsets top\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cLabel text\u003d\"Start Date\" styleClass\u003d\"scroll-pane-text\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cStackPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cTextField fx:id\u003d\"startDate\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c!-- End Date--\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cStackPane alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cInsets top\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cLabel text\u003d\"End Date\" styleClass\u003d\"scroll-pane-text\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cStackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cTextField fx:id\u003d\"endDate\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c!-- Plan Description--\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cStackPane alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cInsets top\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cLabel text\u003d\"Plan Description\" styleClass\u003d\"scroll-pane-text\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cStackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cTextArea fx:id\u003d\"planDescription\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 65
    }
  },
  {
    "path": "src/main/resources/view/PlanListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        \u003cLabel fx:id\u003d\"planName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "      \u003cLabel fx:id\u003d\"planDescription\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$planDescription\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "      \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "      \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Seris370": 4,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/PlanListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    \u003cListView fx:id\u003d\"planListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Seris370": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/ProblemDetails.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  \u003cScrollPane AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              AnchorPane.rightAnchor\u003d\"0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"edge-to-edge\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cVBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c!-- Name--\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane alignment\u003d\"CENTER_LEFT\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                  \u003cInsets top\u003d\"10\" bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cLabel text\u003d\"Name\" styleClass\u003d\"scroll-pane-text\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cTextField fx:id\u003d\"name\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c!-- Author--\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                  \u003cInsets top\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cLabel text\u003d\"Author\" styleClass\u003d\"scroll-pane-text\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cTextField fx:id\u003d\"author\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c!-- Weblink--\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                  \u003cInsets top\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cLabel text\u003d\"Weblink\" styleClass\u003d\"scroll-pane-text\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cTextField fx:id\u003d\"weblink\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c!-- Difficulty--\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                  \u003cInsets top\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cLabel text\u003d\"Difficulty\" styleClass\u003d\"scroll-pane-text\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cTextField fx:id\u003d\"difficulty\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c!-- Remark--\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                  \u003cInsets top\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cLabel text\u003d\"Remark\" styleClass\u003d\"scroll-pane-text\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cTextField fx:id\u003d\"remark\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c!-- Source--\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                  \u003cInsets top\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cLabel text\u003d\"Source\" styleClass\u003d\"scroll-pane-text\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cTextField fx:id\u003d\"source\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c!-- Description--\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                  \u003cInsets top\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            \u003cLabel text\u003d\"Description\" styleClass\u003d\"scroll-pane-text\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003cStackPane\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cTextArea fx:id\u003d\"description\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 98
    }
  },
  {
    "path": "src/main/resources/view/ProblemListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "      \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "      \u003cLabel fx:id\u003d\"weblink\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$webLink\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cLabel fx:id\u003d\"difficulty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cLabel fx:id\u003d\"source\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$source\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "le0tan": 1,
      "tiuweehan": 3,
      "LuWenQ": 2,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/ProblemListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "  \u003cListView fx:id\u003d\"problemListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "le0tan": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/TagListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u003cLabel fx:id\u003d\"tagName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 31
    }
  },
  {
    "path": "src/main/resources/view/TagListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    \u003cListView fx:id\u003d\"tagListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 7
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \u003cLabel fx:id\u003d\"status\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cLabel fx:id\u003d\"targetDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$targetDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cLabel fx:id\u003d\"weblink\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$webLink\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cLabel fx:id\u003d\"difficulty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cLabel fx:id\u003d\"source\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$source\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 40
    }
  },
  {
    "path": "src/main/resources/view/TaskManagementPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   \u003cStackPane prefHeight\u003d\"36.0\" prefWidth\u003d\"398.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "         \u003cLabel fx:id\u003d\"currentPlan\" styleClass\u003d\"cell_big_label_white\" text\u003d\"\\$currentPlan\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   \u003cStackPane layoutY\u003d\"36.0\" prefHeight\u003d\"270.0\" prefWidth\u003d\"398.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "          \u003cListView fx:id\u003d\"taskListView\" minHeight\u003d\"242.0\" minWidth\u003d\"200.0\" prefHeight\u003d\"272.0\" prefWidth\u003d\"398.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   \u003cStackPane layoutX\u003d\"14.0\" layoutY\u003d\"410.0\" prefHeight\u003d\"189.0\" prefWidth\u003d\"398.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "         \u003cPieChart fx:id\u003d\"taskProgressChart\" prefHeight\u003d\"178.0\" prefWidth\u003d\"398.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 25
    }
  },
  {
    "path": "src/test/java/seedu/algobase/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        final Index fifthProblemIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertTrue(fifthProblemIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertTrue(fifthProblemIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertTrue(fifthProblemIndex.equals(fifthProblemIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertFalse(fifthProblemIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertFalse(fifthProblemIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertFalse(fifthProblemIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/algobase.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "LuWenQ": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.AUTHOR_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.DESCRIPTION_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.NAME_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.REMARK_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.SOURCE_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.WEBLINK_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.storage.JsonAlgoBaseStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.testutil.ProblemBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAlgoBaseStorage algobaseBookStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new JsonAlgoBaseStorage(temporaryFolder.resolve(\"algobase.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(algobaseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // Setup LogicManager with JsonAlgobaseBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAlgoBaseStorage jsonAlgoBaseStorage \u003d new JsonalgobaseBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionAlgoBase.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(jsonAlgoBaseStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_QUICK_SORT + DESCRIPTION_DESC_QUICK_SORT"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                + AUTHOR_DESC_QUICK_SORT + WEBLINK_DESC_QUICK_SORT + REMARK_DESC_QUICK_SORT + SOURCE_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Problem expectedProblem \u003d new ProblemBuilder(QUICK_SORT).withTags().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        expectedModel.addProblem(expectedProblem);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // TODO: implementation"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e model.getFilteredProblemList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static class JsonalgobaseBookIoExceptionThrowingStub extends JsonAlgoBaseStorage {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private JsonalgobaseBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void saveAlgoBase(ReadOnlyAlgoBase algobaseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "le0tan": 42,
      "LuWenQ": 2,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.testutil.ProblemBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void constructor_nullProblem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_problemAcceptedByModel_addsSuccessful() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ModelStubAcceptingProblemAdded modelStub \u003d new ModelStubAcceptingProblemAdded();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Problem validProblem \u003d new ProblemBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validProblem).execute(modelStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            String.format(AddCommand.MESSAGE_SUCCESS, validProblem.getName()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            commandResult.getFeedbackToUser()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(Arrays.asList(validProblem), modelStub.problemsAdded);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * A Model stub that always accept the problem being added."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private class ModelStubAcceptingProblemAdded extends DefaultModelStub {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final ArrayList\u003cProblem\u003e problemsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final ArrayList\u003cTag\u003e tagsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public boolean hasProblem(Problem problem) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            requireNonNull(problem);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return problemsAdded.stream().anyMatch(problem::isSameProblem);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void addProblem(Problem problem) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            requireNonNull(problem);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            problemsAdded.add(problem);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            tagsAdded.add(tag);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void addTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            for (Tag tag : tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                addTag(tag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public ReadOnlyAlgoBase getAlgoBase() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new AlgoBase();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 8,
      "le0tan": 69
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/AddFindRuleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.ALL_PREDICATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.NAME_SEQUENCES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class AddFindRuleCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void constructor_nullProblemSearchRule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddFindRuleCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_findRuleAcceptedByModel_addSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ModelStubAcceptFindRuleAdded modelStub \u003d new ModelStubAcceptFindRuleAdded();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ProblemSearchRule validSearchRule \u003d ALL_PREDICATE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        CommandResult commandResult \u003d new AddFindRuleCommand(validSearchRule).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        assertEquals(String.format(AddFindRuleCommand.MESSAGE_SUCCESS, validSearchRule.getName()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(Arrays.asList(validSearchRule), modelStub.findRulesAdded);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_duplicateFindRules_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ProblemSearchRule validRule \u003d ALL_PREDICATE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AddFindRuleCommand command \u003d new AddFindRuleCommand(validRule);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ModelStubWithFindRule modelStubWithFindRule \u003d new ModelStubWithFindRule(validRule);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            CommandException.class,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            String.format(AddFindRuleCommand.MESSAGE_DUPLICATE_FIND_RULE, validRule.getName()), ()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                -\u003e command.execute(modelStubWithFindRule)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ProblemSearchRule validRuleOne \u003d ALL_PREDICATE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ProblemSearchRule validRuleTwo \u003d NAME_SEQUENCES;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AddFindRuleCommand commandOne \u003d new AddFindRuleCommand(validRuleOne);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AddFindRuleCommand commandTwo \u003d new AddFindRuleCommand(validRuleTwo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(commandOne, commandOne);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AddFindRuleCommand commandOneCopy \u003d new AddFindRuleCommand(validRuleOne);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(commandOneCopy, commandOne);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertNotEquals(1, commandOne);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertNotEquals(null, commandOne);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertNotEquals(commandOne, commandTwo);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private class ModelStubWithFindRule extends DefaultModelStub {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private final ProblemSearchRule findRule;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ModelStubWithFindRule(ProblemSearchRule findRule) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            requireNonNull(findRule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.findRule \u003d findRule;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public boolean hasFindRule(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            requireNonNull(rule);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return this.findRule.isSameProblemSearchRule(rule);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private class ModelStubAcceptFindRuleAdded extends DefaultModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final List\u003cProblemSearchRule\u003e findRulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public boolean hasFindRule(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            requireNonNull(rule);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return findRulesAdded.stream().anyMatch(rule::isSameProblemSearchRule);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void addFindRule(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            requireNonNull(rule);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findRulesAdded.add(rule);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public ReadOnlyAlgoBase getAlgoBase() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new AlgoBase();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 6,
      "le0tan": 108
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/AddTaskCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.getTypicalAlgoBase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "class AddTaskCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void constructor_nullDescriptor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTaskCommand(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void execute_invalidProblemIndex_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planIndex \u003d Index.fromOneBased(model.getFilteredProblemList().size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index outOfBoundProblemIndex \u003d Index.fromOneBased(model.getFilteredProblemList().size() + 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        AddTaskCommand.AddTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new AddTaskCommand.AddTaskDescriptor(planIndex, outOfBoundProblemIndex, LocalDate.now());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        AddTaskCommand addTaskCommand \u003d new AddTaskCommand(descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e addTaskCommand.execute(model));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 34
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/ApplyCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.getTypicalAlgoBase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class ApplyCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ProblemSearchRule ruleToApply \u003d model.getFilteredFindRuleList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ApplyCommand command \u003d new ApplyCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        String expectedMessage \u003d String.format(ApplyCommand.MESSAGE_SUCCESS, ruleToApply.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Predicate\u003cProblem\u003e findProblemPredicate \u003d ruleToApply.getFindProblemPredicate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        expectedModel.updateFilteredProblemList(findProblemPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFindRuleList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ApplyCommand command \u003d new ApplyCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandFailure(command, model, Messages.MESSAGE_INVALID_FIND_RULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ApplyCommand applyFirstCommand \u003d new ApplyCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ApplyCommand applySecondCommand \u003d new ApplyCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(applyFirstCommand, applyFirstCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ApplyCommand applyFirstCommandCopy \u003d new ApplyCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(applyFirstCommand, applyFirstCommandCopy);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertNotEquals(1, applyFirstCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertNotEquals(null, applyFirstCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertNotEquals(applyFirstCommand, applySecondCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "le0tan": 69
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/CloseTabCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.GuiState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "class CloseTabCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void constructor_nullProblem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CloseTabCommand(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * A Model stub that has a problem list with sample data and a GuiState with 2 tabs in its tab manager."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private class ModelStub extends DefaultModelStub {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        private GuiState guiState;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        private ObservableList\u003cProblem\u003e internalList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelStub() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            guiState \u003d new GuiState();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            TabData tabData1 \u003d new TabData(ModelType.PROBLEM, Id.generateId());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            TabData tabData2 \u003d new TabData(ModelType.PROBLEM, Id.generateId());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            guiState.getTabManager().addDetailsTabData(tabData1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            guiState.getTabManager().addDetailsTabData(tabData2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            Problem[] problems \u003d SampleDataUtil.getSampleProblems();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            internalList \u003d FXCollections.observableList(Arrays.asList(problems));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        public ObservableList\u003cProblem\u003e getFilteredProblemList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return internalList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        public GuiState getGuiState() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return guiState;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 53
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_AUTHOR_QUICK_SORT \u003d \"Steven Halim\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_DESCRIPTION_QUICK_SORT \u003d \"Sort an array quickly, in O(1) time \u003d)\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_DIFFICULTY_QUICK_SORT \u003d \"1.5\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_NAME_QUICK_SORT \u003d \"Quick sort\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_REMARK_QUICK_SORT \u003d \"Steven says this is easy.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_SOURCE_QUICK_SORT \u003d \"Kattis\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_WEBLINK_QUICK_SORT \u003d \"https://open.kattis.com/0\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String AUTHOR_DESC_QUICK_SORT \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_QUICK_SORT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DESCRIPTION_DESC_QUICK_SORT \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_QUICK_SORT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DIFFICULTY_DESC_QUICK_SORT \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_QUICK_SORT;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String NAME_DESC_QUICK_SORT \u003d \" \" + PREFIX_NAME + VALID_NAME_QUICK_SORT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String REMARK_DESC_QUICK_SORT \u003d \" \" + PREFIX_REMARK + VALID_REMARK_QUICK_SORT;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String SOURCE_DESC_QUICK_SORT \u003d \" \" + PREFIX_SOURCE + VALID_SOURCE_QUICK_SORT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String WEBLINK_DESC_QUICK_SORT \u003d \" \" + PREFIX_WEBLINK + VALID_WEBLINK_QUICK_SORT;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_AUTHOR_TWO_SUM \u003d \"Alice Halim\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_DESCRIPTION_TWO_SUM \u003d \"B\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_DIFFICULTY_TWO_SUM \u003d \"2.0\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_NAME_TWO_SUM \u003d \"Two sum\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_REMARK_TWO_SUM \u003d \"B\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_SOURCE_TWO_SUM \u003d \"B\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_WEBLINK_TWO_SUM \u003d \"https://open.kattis.com/1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String AUTHOR_DESC_TWO_SUM \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_TWO_SUM;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DESCRIPTION_DESC_TWO_SUM \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TWO_SUM;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DIFFICULTY_DESC_TWO_SUM \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_TWO_SUM;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String NAME_DESC_TWO_SUM \u003d \" \" + PREFIX_NAME + VALID_NAME_TWO_SUM;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String REMARK_DESC_TWO_SUM \u003d \" \" + PREFIX_REMARK + VALID_REMARK_TWO_SUM;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String SOURCE_DESC_TWO_SUM \u003d \" \" + PREFIX_SOURCE + VALID_SOURCE_TWO_SUM;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String WEBLINK_DESC_TWO_SUM \u003d \" \" + PREFIX_WEBLINK + VALID_WEBLINK_TWO_SUM;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_AUTHOR_FACTORIAL \u003d \"Clice Halim\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_DESCRIPTION_FACTORIAL \u003d \"C\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_DIFFICULTY_FACTORIAL \u003d \"2.5\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_NAME_FACTORIAL \u003d \"Factorial\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_REMARK_FACTORIAL \u003d \"C\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_SOURCE_FACTORIAL \u003d \"C\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_WEBLINK_FACTORIAL \u003d \"https://open.kattis.com/2\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String AUTHOR_DESC_FACTORIAL \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_FACTORIAL;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DESCRIPTION_DESC_FACTORIAL \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_FACTORIAL;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DIFFICULTY_DESC_FACTORIAL \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_FACTORIAL;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String NAME_DESC_FACTORIAL \u003d \" \" + PREFIX_NAME + VALID_NAME_FACTORIAL;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String REMARK_DESC_FACTORIAL \u003d \" \" + PREFIX_REMARK + VALID_REMARK_FACTORIAL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String SOURCE_DESC_FACTORIAL \u003d \" \" + PREFIX_SOURCE + VALID_SOURCE_FACTORIAL;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String WEBLINK_DESC_FACTORIAL \u003d \" \" + PREFIX_WEBLINK + VALID_WEBLINK_FACTORIAL;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    // TODO: Come up with valid invalid commands."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String INVALID_AUTHOR_DESC \u003d \" \" + PREFIX_AUTHOR + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in author"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    // empty string not allowed for description"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String INVALID_REMARK_DESC \u003d \" \" + PREFIX_REMARK; // empty string not allowed for remarks"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String INVALID_SOURCE_DESC \u003d \" \" + PREFIX_SOURCE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String INVALID_WEBLINK_DESC \u003d \" \" + PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * - the algobase, filtered problem list and selected problem in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        AlgoBase expectedAlgoBase \u003d new AlgoBase(actualModel.getAlgoBase());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cProblem\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredProblemList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        assertEquals(expectedAlgoBase, actualModel.getAlgoBase());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredProblemList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code model}\u0027s algobase."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredProblemList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Problem problem \u003d model.getFilteredProblemList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final String[] splitName \u003d problem.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        model.updateFilteredProblemList(new NameContainsKeywordsPredicate(Arrays.asList(new Keyword(splitName[0]))));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(1, model.getFilteredProblemList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 4,
      "le0tan": 143
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/DefaultModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.commandhistory.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.GuiState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class DefaultModelStub implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPref \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Path getAlgoBaseFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setAlgoBaseFilePath(Path algobaseFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UI \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public GuiState getGuiState() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AlgoBase \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setAlgoBase(ReadOnlyAlgoBase newData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ReadOnlyAlgoBase getAlgoBase() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Problem \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void addProblem(Problem problem) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean hasProblem(Problem problem) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void deleteProblem(Problem problem) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setProblem(Problem target, Problem editedProblem) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cProblem\u003e getFilteredProblemList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void updateFilteredProblemList(Predicate\u003cProblem\u003e predicate) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void updateSortedProblemList(Comparator\u003cProblem\u003e problemComparator) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Plan \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean hasPlan(Plan plan) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void deletePlan(Plan target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void addPlan(Plan plan) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void setPlan(Plan target, Plan editedPlan) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cPlan\u003e getFilteredPlanList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void updateFilteredPlanList(Predicate\u003cPlan\u003e predicate) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tag \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void deleteTag(Tag target) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void deleteTags(Tag target) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void addTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setTags(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setCurrentPlan(Plan plan) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTask\u003e getCurrentTaskList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public StringProperty getCurrentPlan() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public IntegerProperty getCurrentSolvedCount() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public IntegerProperty getCurrentUnsolvedCount() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Find Rule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean hasFindRule(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void addFindRule(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void deleteFindRule(ProblemSearchRule rule) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setFindRule(ProblemSearchRule target, ProblemSearchRule editedRule) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ObservableList\u003cProblemSearchRule\u003e getFilteredFindRuleList() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Rewind \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ObservableList\u003cCommandHistory\u003e getCommandHistoryList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void addCommandHistory(CommandHistory history) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 148,
      "Seris370": 24,
      "le0tan": 84,
      "tiuweehan": 5
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/DeleteFindRuleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.getTypicalAlgoBase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * {@code DeleteFindRuleCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class DeleteFindRuleCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ProblemSearchRule ruleToDelete \u003d model.getFilteredFindRuleList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DeleteFindRuleCommand command \u003d new DeleteFindRuleCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteFindRuleCommand.MESSAGE_SUCCESS, ruleToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        expectedModel.deleteFindRule(ruleToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFindRuleList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DeleteFindRuleCommand command \u003d new DeleteFindRuleCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandFailure(command, model, Messages.MESSAGE_INVALID_FIND_RULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DeleteFindRuleCommand deleteFirstCommand \u003d new DeleteFindRuleCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DeleteFindRuleCommand deleteSecondCommand \u003d new DeleteFindRuleCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DeleteFindRuleCommand deleteFirstCommandCopy \u003d new DeleteFindRuleCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommandCopy);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertNotEquals(1, deleteFirstCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertNotEquals(null, deleteFirstCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertNotEquals(deleteFirstCommand, deleteSecondCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 71
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/DeleteTagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.commands.DeleteTagCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class DeleteTagCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void testcommandword() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertEquals(\"deletetag\", COMMAND_WORD);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 13
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_DESCRIPTION_QUICK_SORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_NAME_QUICK_SORT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.getTypicalAlgoBase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.AuthorMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DifficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.FindProblemDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.SourceMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.TagIncludesKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.testutil.FindProblemDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final List\u003cString\u003e VALID_NAME_KEYWORDS \u003d Arrays.asList(VALID_NAME_QUICK_SORT.split(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String VALID_AUTHOR_KEYWORD \u003d QUICK_SORT.getAuthor().value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final List\u003cString\u003e VALID_DESCRIPTION_KEYWORDS \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Arrays.asList(VALID_DESCRIPTION_QUICK_SORT.split(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String VALID_SOURCE_KEYWORD \u003d QUICK_SORT.getSource().value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final List\u003cString\u003e VALID_TAG_STRING_LIST \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Arrays.stream(QUICK_SORT.getTags().toArray(new Tag[] {}))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private List\u003cKeyword\u003e stringListToKeywordList(List\u003cString\u003e strings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return strings.stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .map(Keyword::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void constructor_nullDescriptor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FindCommand(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_caseInsensitiveNameMatch_problemFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PROBLEMS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new NameContainsKeywordsPredicate(VALID_NAME_KEYWORDS.stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                .map(keyword -\u003e new Keyword(keyword.toUpperCase()))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindProblemDescriptor descriptor \u003d new FindProblemDescriptorBuilder().withNamePredicate(predicate).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        expectedModel.updateFilteredProblemList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(Collections.singletonList(QUICK_SORT), model.getFilteredProblemList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_authorExactMatch_problemFound() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PROBLEMS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AuthorMatchesKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new AuthorMatchesKeywordPredicate(new Keyword(VALID_AUTHOR_KEYWORD));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindProblemDescriptor descriptor \u003d new FindProblemDescriptorBuilder().withAuthorPredicate(predicate).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        expectedModel.updateFilteredProblemList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(Collections.singletonList(QUICK_SORT), model.getFilteredProblemList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    // TODO: description case insensitive match"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_descriptionExactMatch_problemFound() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PROBLEMS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new DescriptionContainsKeywordsPredicate(stringListToKeywordList(VALID_DESCRIPTION_KEYWORDS));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindProblemDescriptor descriptor \u003d new FindProblemDescriptorBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .withDescriptionPredicate(predicate).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        expectedModel.updateFilteredProblemList(predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(Collections.singletonList(QUICK_SORT), model.getFilteredProblemList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_sourceExactMatch_problemFound() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PROBLEMS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SourceMatchesKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new SourceMatchesKeywordPredicate(new Keyword(VALID_SOURCE_KEYWORD));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindProblemDescriptor descriptor \u003d new FindProblemDescriptorBuilder().withSourcePredicate(predicate).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        expectedModel.updateFilteredProblemList(predicate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(Collections.singletonList(QUICK_SORT), model.getFilteredProblemList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    // TODO: tag inclusive match - find t/Recursion Brute-Force will match Recursion+Brute-Force+Playful"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    // TODO: tag exclusive mismatch - but not Recursion+Adhoc"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_tagExactMatch_problemFound() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PROBLEMS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        TagIncludesKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new TagIncludesKeywordsPredicate(stringListToKeywordList(VALID_TAG_STRING_LIST));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindProblemDescriptor descriptor \u003d new FindProblemDescriptorBuilder().withTagPredicate(predicate).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        expectedModel.updateFilteredProblemList(predicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(Collections.singletonList(QUICK_SORT), model.getFilteredProblemList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_difficultyExactMatch_problemFound() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PROBLEMS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DifficultyIsInRangePredicate predicate \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new DifficultyIsInRangePredicate(QUICK_SORT.getDifficulty().value, QUICK_SORT.getDifficulty().value);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindProblemDescriptor descriptor \u003d new FindProblemDescriptorBuilder()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .withDifficultyPredicate(predicate).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        expectedModel.updateFilteredProblemList(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(Collections.singletonList(QUICK_SORT), model.getFilteredProblemList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DifficultyIsInRangePredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new DifficultyIsInRangePredicate(QUICK_SORT.getDifficulty().value, QUICK_SORT.getDifficulty().value);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindProblemDescriptor firstDescriptor \u003d new FindProblemDescriptorBuilder()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .withDifficultyPredicate(firstPredicate).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        TagIncludesKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new TagIncludesKeywordsPredicate(stringListToKeywordList(VALID_TAG_STRING_LIST));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindProblemDescriptor secondDescriptor \u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new FindProblemDescriptorBuilder().withTagPredicate(secondPredicate).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(findFirstCommand, findFirstCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstDescriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(findFirstCommand, findFirstCommandCopy);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertNotEquals(1, findFirstCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertNotEquals(null, findFirstCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertNotEquals(findFirstCommand, findSecondCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "le0tan": 174
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.getTypicalAlgoBase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private static final String EXPECTED_COMMAND_LIST \u003d \"Available commands are: [add, addplan, addtag, addtask, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        + \"clear, copytask, delete, deleteplan, deletetag, deletetask, donetask, edit, editplan, edittag, edittask, \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        + \"exit, find, findplan, help, list, listplan, listtag, movetask, setplan, sort, switchtab, undonetask]\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"More information can be found in the popup window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void constructor_nullCommandClassWithoutListingAllCommands_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new HelpCommand(null, false));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void constructor_nullCommandClassWithListingAllCommands_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        HelpCommand command \u003d new HelpCommand(null, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, model,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new CommandResult(EXPECTED_COMMAND_LIST, true, false, false), expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void execute_correctCommandWord_showsMessageUsage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        HelpCommand command \u003d new HelpCommand(AddCommand.class, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, model, AddCommand.MESSAGE_USAGE, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 4,
      "le0tan": 36
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/OpenTabCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.GuiState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "class OpenTabCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void constructor_nullProblem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new OpenTabCommand(null, null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void execute_openProblemTabAcceptedByModel_openSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelType modelType \u003d ModelType.PROBLEM;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Id id \u003d modelStub.getFilteredProblemList().get(index.getZeroBased()).getId();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        CommandResult commandResult \u003d new OpenTabCommand(modelType, index).execute(modelStub);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        int detailsTabIndex \u003d modelStub.getGuiState().getTabManager().getDetailsTabPaneIndex().getValue().intValue();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        TabData lastTabData \u003d modelStub.getGuiState().getTabManager().getTabsDataList().get(detailsTabIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            lastTabData,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            new TabData(ModelType.PROBLEM, id)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            String.format(OpenTabCommand.MESSAGE_SUCCESS, index.getOneBased()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            commandResult.getFeedbackToUser()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void execute_openProblemTabIndexOutOfRange_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelType modelType \u003d ModelType.PROBLEM;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index \u003d Index.fromZeroBased(modelStub.getFilteredProblemList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new OpenTabCommand(modelType, index)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            .execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void execute_openExistingProblemTabAcceptedByModel_switchSuccessful() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index1 \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index2 \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelType modelType \u003d ModelType.PROBLEM;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Id id1 \u003d modelStub.getFilteredProblemList().get(index1.getZeroBased()).getId();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Id id2 \u003d modelStub.getFilteredProblemList().get(index2.getZeroBased()).getId();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        int detailsTabIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        TabData currentTabData;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        // Open tab for model at index1"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        CommandResult commandResult1 \u003d new OpenTabCommand(modelType, index1).execute(modelStub);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        detailsTabIndex \u003d modelStub.getGuiState().getTabManager().getDetailsTabPaneIndex().getValue().intValue();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        currentTabData \u003d modelStub.getGuiState().getTabManager().getTabsDataList().get(detailsTabIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            currentTabData,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            new TabData(ModelType.PROBLEM, id1)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            String.format(OpenTabCommand.MESSAGE_SUCCESS, index1.getOneBased()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            commandResult1.getFeedbackToUser()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        // Open tab for model at index2"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        CommandResult commandResult2 \u003d new OpenTabCommand(modelType, index2).execute(modelStub);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        detailsTabIndex \u003d modelStub.getGuiState().getTabManager().getDetailsTabPaneIndex().getValue().intValue();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        currentTabData \u003d modelStub.getGuiState().getTabManager().getTabsDataList().get(detailsTabIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            currentTabData,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            new TabData(ModelType.PROBLEM, id2)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            String.format(OpenTabCommand.MESSAGE_SUCCESS, index2.getOneBased()),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            commandResult2.getFeedbackToUser()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        // Open tab for model at index1 again"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        CommandResult commandResult1Copy \u003d new OpenTabCommand(modelType, index1).execute(modelStub);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        detailsTabIndex \u003d modelStub.getGuiState().getTabManager().getDetailsTabPaneIndex().getValue().intValue();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        currentTabData \u003d modelStub.getGuiState().getTabManager().getTabsDataList().get(detailsTabIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            currentTabData,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            new TabData(ModelType.PROBLEM, id1)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            String.format(OpenTabCommand.MESSAGE_SWITCH_SUCCESS, index1.getOneBased()),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            commandResult1Copy.getFeedbackToUser()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * A Model stub that has a problem list with sample data and a GuiState with 2 tabs in its tab manager."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private class ModelStub extends DefaultModelStub {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        private GuiState guiState;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        private ObservableList\u003cProblem\u003e internalList;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelStub() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            guiState \u003d new GuiState();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            TabData tabData1 \u003d new TabData(ModelType.PROBLEM, Id.generateId());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            TabData tabData2 \u003d new TabData(ModelType.PROBLEM, Id.generateId());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            guiState.getTabManager().addDetailsTabData(tabData1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            guiState.getTabManager().addDetailsTabData(tabData2);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            Problem[] problems \u003d SampleDataUtil.getSampleProblems();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            internalList \u003d FXCollections.observableList(Arrays.asList(problems));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        public ObservableList\u003cProblem\u003e getFilteredProblemList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return internalList;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        public GuiState getGuiState() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return guiState;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 154
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/SortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.commands.problem.SortCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.getTypicalAlgoBase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.SortCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class SortCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * - the {@code filteredProblemList} matches the original list sorted with {@code comparator}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * in content and order."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private void assertSuccessfullySorted(SortCommand command, Comparator\u003cProblem\u003e comparator) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        CommandResult actualResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), actualResult);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cProblem\u003e expectedList \u003d new ArrayList\u003c\u003e(expectedModel.getFilteredProblemList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        expectedList.sort(comparator);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ObservableList\u003cProblem\u003e actualList \u003d model.getFilteredProblemList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(expectedList.size(), actualList.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedList.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            assertEquals(expectedList.get(i), actualList.get(i));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void constructor_nullMethod_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SortCommand(null, SortCommand.SortingOrder.ascend));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void constructor_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SortCommand(SortCommand.SortingMethod.byName, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byNameAscend_success() throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byName, SortCommand.SortingOrder.ascend);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_NAME_COMPARATOR);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byAuthorAscend_success() throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byAuthor, SortCommand.SortingOrder.ascend);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_AUTHOR_COMPARATOR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byWebLinkAscend_success() throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byWebLink, SortCommand.SortingOrder.ascend);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_WEB_LINK_COMPARATOR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byDifficultyAscend_success() throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byDifficulty, SortCommand.SortingOrder.ascend);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_DIFFICULTY_COMPARATOR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_bySourceAscend_success() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.bySource, SortCommand.SortingOrder.ascend);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_SOURCE_COMPARATOR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byNameDescend_success() throws CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byName, SortCommand.SortingOrder.descend);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_NAME_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byAuthorDescend_success() throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byAuthor, SortCommand.SortingOrder.descend);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_AUTHOR_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byWebLinkDescend_success() throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byWebLink, SortCommand.SortingOrder.descend);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_WEB_LINK_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byDifficultyDescend_success() throws CommandException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byDifficulty, SortCommand.SortingOrder.descend);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_DIFFICULTY_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_bySourceDescend_success() throws CommandException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.bySource, SortCommand.SortingOrder.descend);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_SOURCE_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "le0tan": 112
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/SwitchTabCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.GuiState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.gui.TabType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "class SwitchTabCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void constructor_nullProblem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SwitchTabCommand(null, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void execute_displayTabIndexAcceptedByModel_switchSuccessful() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelStubAcceptingDisplayTabIndex modelStub \u003d new ModelStubAcceptingDisplayTabIndex();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index \u003d ModelType.PLAN.getDisplayTabPaneIndex();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        CommandResult commandResult \u003d new SwitchTabCommand(TabType.DISPLAY, index).execute(modelStub);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            String.format(SwitchTabCommand.MESSAGE_SUCCESS, TabType.DISPLAY.getName(), index.getOneBased()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            commandResult.getFeedbackToUser()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void execute_displayTabIndexRejectedByModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelStubAcceptingDisplayTabIndex modelStub \u003d new ModelStubAcceptingDisplayTabIndex();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index \u003d Index.fromZeroBased(ModelType.values().length);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new SwitchTabCommand(TabType.DISPLAY, index)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            .execute(modelStub));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void execute_detailsTabIndexAcceptedByModel_switchSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelStubAcceptingDetailsTabIndex modelStub \u003d new ModelStubAcceptingDetailsTabIndex();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        CommandResult commandResult \u003d new SwitchTabCommand(TabType.DETAILS, index).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            String.format(SwitchTabCommand.MESSAGE_SUCCESS, TabType.DETAILS.getName(), index.getOneBased()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            commandResult.getFeedbackToUser()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void execute_detailsTabIndexRejectedByModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelStubAcceptingDetailsTabIndex modelStub \u003d new ModelStubAcceptingDetailsTabIndex();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new SwitchTabCommand(TabType.DETAILS, index)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            .execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * A Model stub that always accepts the display tab index being added."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private class ModelStubAcceptingDisplayTabIndex extends DefaultModelStub {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        public GuiState getGuiState() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return new GuiState();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * A Model stub that always accepts the problem being added."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private class ModelStubAcceptingDetailsTabIndex extends DefaultModelStub {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        public GuiState getGuiState() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            GuiState guiState \u003d new GuiState();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            TabData tabData1 \u003d new TabData(ModelType.PROBLEM, Id.generateId());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            TabData tabData2 \u003d new TabData(ModelType.PROBLEM, Id.generateId());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            guiState.getTabManager().addDetailsTabData(tabData1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            guiState.getTabManager().addDetailsTabData(tabData2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return guiState;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 91
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class FindCommandParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 6
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/parser/HelpCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class HelpCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String INVALID_COMMAND_WORD \u003d \"1nval1dC0mmand\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String VALID_COMMAND_WORD \u003d AddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final Class VALID_COMMAND_CLASS \u003d AddCommand.class;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private HelpCommandParser helpCommandParser \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void parse_emptyInput_returnsListAllHelpCommand() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        HelpCommand helpCommand \u003d helpCommandParser.parse(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(helpCommand.isListAllCommands());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void parse_wrongCommandWord_throwsInvalidCommandWordException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_NAME, INVALID_COMMAND_WORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertParseFailure(helpCommandParser, INVALID_COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void parse_correctCommandWord_returnsHelpCommandForTheCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertParseSuccess(helpCommandParser, VALID_COMMAND_WORD,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new HelpCommand(VALID_COMMAND_CLASS, false));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "le0tan": 36
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/gui/TabManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class TabManagerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final Index OLD_VALUE \u003d ModelType.PROBLEM.getDisplayTabPaneIndex();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final Index NEW_VALUE \u003d ModelType.TAG.getDisplayTabPaneIndex();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final Index ILLEGAL_VALUE \u003d Index.fromZeroBased(ModelType.values().length);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setDisplayTabPaneIndex_indexWithinRange_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        TabManager tabManager \u003d new TabManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index[] testValues \u003d new Index[] { OLD_VALUE };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabManager.getDisplayTabPaneIndex().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            testValues[0] \u003d Index.fromZeroBased((newValue.intValue()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabManager.setDisplayTabPaneIndex(NEW_VALUE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals(NEW_VALUE, testValues[0], \"Listener does not update value correctly\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setDisplayTabPaneIndex_indexOutsideRange_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        TabManager tabManager \u003d new TabManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index[] testValues \u003d new Index[] { OLD_VALUE };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabManager.getDisplayTabPaneIndex().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            testValues[0] \u003d Index.fromZeroBased((newValue.intValue()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e tabManager.setDisplayTabPaneIndex(ILLEGAL_VALUE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setDetailsTabPaneIndex_indexWithinRange_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        TabManager tabManager \u003d new TabManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        TabData tabData1 \u003d new TabData(ModelType.PROBLEM, Id.generateId());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        TabData tabData2 \u003d new TabData(ModelType.PROBLEM, Id.generateId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabManager.addDetailsTabData(tabData1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabManager.addDetailsTabData(tabData2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index[] testValues \u003d new Index[] { OLD_VALUE };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabManager.getDetailsTabPaneIndex().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            testValues[0] \u003d Index.fromZeroBased((newValue.intValue()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabManager.setDetailsTabPaneIndex(NEW_VALUE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals(NEW_VALUE, testValues[0], \"Listener does not update value correctly\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setDetailsTabPaneIndex_indexOutsideRange_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        TabManager tabManager \u003d new TabManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index[] testValues \u003d new Index[] { OLD_VALUE };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabManager.getDetailsTabPaneIndex().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            testValues[0] \u003d Index.fromZeroBased((newValue.intValue()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e tabManager.setDetailsTabPaneIndex(ILLEGAL_VALUE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 71
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/problem/AuthorMatchesKeywordPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.AuthorMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class AuthorMatchesKeywordPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_authorMatches_returnTrue() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AuthorMatchesKeywordPredicate predicate \u003d new AuthorMatchesKeywordPredicate("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new Keyword(QUICK_SORT.getAuthor().value));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_authorDoesNotMatch_returnFalse() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AuthorMatchesKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new AuthorMatchesKeywordPredicate(new Keyword(QUICK_SORT.getAuthor().value.toUpperCase()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 26
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/problem/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String KEYWORD_NOT_IN_QUICK_SORT_DESCRIPTION \u003d \"1mP0ss1ble\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_problemDescriptionContainsKeywords_returnTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cKeyword\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (String s : Arrays.asList(QUICK_SORT.getDescription().value.split(\" \"))) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            Keyword keyword \u003d new Keyword(s);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            list.add(keyword);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                list);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(true, predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_constraintKeywordNotSeparatedBySpaces_returnFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        Arrays.asList(new Keyword(QUICK_SORT.getDescription().value.replace(\" \", \"\"))));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(false, predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_constraintContainsExtraKeywords_returnFalse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        Arrays.asList(new Keyword(QUICK_SORT.getDescription().value.split(\" \")[0]),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                            new Keyword(KEYWORD_NOT_IN_QUICK_SORT_DESCRIPTION)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(false, predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 49
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/problem/DifficultyIsInRangePredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DifficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class DifficultyIsInRangePredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_difficultyInRange_returnTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DifficultyIsInRangePredicate predicate \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new DifficultyIsInRangePredicate(QUICK_SORT.getDifficulty().value, QUICK_SORT.getDifficulty().value);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_difficultyOutOfRange_returnFalse() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DifficultyIsInRangePredicate predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new DifficultyIsInRangePredicate(QUICK_SORT.getDifficulty().value * 2,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    QUICK_SORT.getDifficulty().value * 3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 26
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/problem/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String KEYWORD_NOT_IN_QUICK_SORT_NAME \u003d \"1mP0ss1ble\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_problemNameContainsKeywords_returnTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cKeyword\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (String s : Arrays.asList(QUICK_SORT.getName().fullName.split(\" \"))) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            Keyword keyword \u003d new Keyword(s);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            list.add(keyword);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    list);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(true, predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_constraintKeywordNotSeparatedBySpaces_returnFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Arrays.asList(new Keyword(QUICK_SORT.getName().fullName.replace(\" \", \"\"))));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(false, predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_constraintContainsExtraKeywords_returnTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Arrays.asList(new Keyword(QUICK_SORT.getName().fullName.split(\" \")[0]),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        new Keyword(KEYWORD_NOT_IN_QUICK_SORT_NAME)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(true, predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 49
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/problem/SourceMatchesKeywordPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.SourceMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class SourceMatchesKeywordPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_sourcerMatches_returnTrue() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SourceMatchesKeywordPredicate predicate \u003d new SourceMatchesKeywordPredicate("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new Keyword(QUICK_SORT.getSource().value));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_sourceDoesNotMatch_returnFalse() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SourceMatchesKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new SourceMatchesKeywordPredicate(new Keyword(QUICK_SORT.getSource().value.toUpperCase()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 26
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/problem/TagIncludesKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.TagIncludesKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class TagIncludesKeywordsPredicateTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String KEYWORD_NOT_IN_QUICK_SORT_TAGS \u003d \"exttttremely_impossible\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_tagIncludesKeywords_returnTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Set\u003cTag\u003e tags \u003d QUICK_SORT.getTags();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cString\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (Tag tag: tags) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            tagList.add(tag.tagName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        TagIncludesKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new TagIncludesKeywordsPredicate(tagList.stream().map(Keyword::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_tagDoesNotIncludeKeywords_returnFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        TagIncludesKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new TagIncludesKeywordsPredicate(Arrays.asList(new Keyword(KEYWORD_NOT_IN_QUICK_SORT_TAGS)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 40
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/searchrule/problemsearchrule/AuthorMatchesKeywordPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class AuthorMatchesKeywordPredicateTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final AuthorMatchesKeywordPredicate VALID_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new AuthorMatchesKeywordPredicate(new Keyword(\"Steven Halim\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final AuthorMatchesKeywordPredicate VALID_PREDICATE_ONE_COPY \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new AuthorMatchesKeywordPredicate(new Keyword(\"Steven Halim\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final AuthorMatchesKeywordPredicate VALID_PREDICATE_TWO \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new AuthorMatchesKeywordPredicate(new Keyword(\"Tan Sun Teck\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_ONE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_TWO));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(5));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_ONE_COPY));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 26
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/searchrule/problemsearchrule/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final DescriptionContainsKeywordsPredicate VALID_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new DescriptionContainsKeywordsPredicate(Arrays.asList(new Keyword(\"Steven Halim\")));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final DescriptionContainsKeywordsPredicate VALID_PREDICATE_ONE_COPY \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new DescriptionContainsKeywordsPredicate(Arrays.asList(new Keyword(\"Steven Halim\")));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final DescriptionContainsKeywordsPredicate VALID_PREDICATE_TWO \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new DescriptionContainsKeywordsPredicate(Arrays.asList(new Keyword(\"Tan Sun Teck\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_ONE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_TWO));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(5));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_ONE_COPY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 27
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/searchrule/problemsearchrule/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final NameContainsKeywordsPredicate VALID_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new NameContainsKeywordsPredicate(Arrays.asList(new Keyword(\"Steven Halim\")));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final NameContainsKeywordsPredicate VALID_PREDICATE_ONE_COPY \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new NameContainsKeywordsPredicate(Arrays.asList(new Keyword(\"Steven Halim\")));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final NameContainsKeywordsPredicate VALID_PREDICATE_TWO \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new NameContainsKeywordsPredicate(Arrays.asList(new Keyword(\"Tan Sun Teck\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_ONE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_TWO));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(5));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_ONE_COPY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 27
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/searchrule/problemsearchrule/ProblemSearchRuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.ALL_PREDICATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.MEDIUM_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.NAME_SEQUENCES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.NAME_SEQUENCES_DUPLICATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.NAME_SEQUENCES_SAME_NAME_DIFFERENT_PREDICATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class ProblemSearchRuleTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void isSameProblemSearchRule() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(ALL_PREDICATE.isSameProblemSearchRule(ALL_PREDICATE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(ALL_PREDICATE.isSameProblemSearchRule(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // different names -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(MEDIUM_DIFFICULTY.isSameProblemSearchRule(NAME_SEQUENCES));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // different names -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(NAME_SEQUENCES.isSameProblemSearchRule(MEDIUM_DIFFICULTY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same names but different content -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(NAME_SEQUENCES.isSameProblemSearchRule(NAME_SEQUENCES_SAME_NAME_DIFFERENT_PREDICATE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(NAME_SEQUENCES.equals(NAME_SEQUENCES_DUPLICATE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(ALL_PREDICATE.equals(ALL_PREDICATE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(ALL_PREDICATE.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(ALL_PREDICATE.equals(5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // different objects -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(ALL_PREDICATE.equals(NAME_SEQUENCES));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same name but different predicates -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(NAME_SEQUENCES.equals(NAME_SEQUENCES_SAME_NAME_DIFFERENT_PREDICATE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // same content -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(NAME_SEQUENCES.equals(NAME_SEQUENCES_DUPLICATE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 57
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/searchrule/problemsearchrule/SourceMatchesKeywordPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class SourceMatchesKeywordPredicateTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final SourceMatchesKeywordPredicate VALID_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new SourceMatchesKeywordPredicate(new Keyword(\"Steven Halim\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final SourceMatchesKeywordPredicate VALID_PREDICATE_ONE_COPY \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new SourceMatchesKeywordPredicate(new Keyword(\"Steven Halim\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final SourceMatchesKeywordPredicate VALID_PREDICATE_TWO \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new SourceMatchesKeywordPredicate(new Keyword(\"Tan Sun Teck\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_ONE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_TWO));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(5));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_ONE_COPY));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 26
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/searchrule/problemsearchrule/TagIncludesKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.searchrule.problemsearchrule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class TagIncludesKeywordsPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final TagIncludesKeywordsPredicate VALID_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new TagIncludesKeywordsPredicate(Arrays.asList(new Keyword(\"Steven Halim\")));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final TagIncludesKeywordsPredicate VALID_PREDICATE_ONE_COPY \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new TagIncludesKeywordsPredicate(Arrays.asList(new Keyword(\"Steven Halim\")));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final TagIncludesKeywordsPredicate VALID_PREDICATE_TWO \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new TagIncludesKeywordsPredicate(Arrays.asList(new Keyword(\"Tan Sun Teck\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_ONE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_TWO));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(5));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(VALID_PREDICATE_ONE.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(VALID_PREDICATE_ONE.equals(VALID_PREDICATE_ONE_COPY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 26
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void testGetName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Tag tag \u003d new Tag(\"Difficult\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertEquals(\"Difficult\", tag.getName());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Tag tag \u003d new Tag(\"Easy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertEquals(false, tag.equals(new Tag(\"easy\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertEquals(true, tag.equals(new Tag(\"Easy\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void testIsValidTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertEquals(false, Tag.isValidTagName(\"very difficult\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertEquals(true, Tag.isValidTagName(\"Sort\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 27
    }
  },
  {
    "path": "src/test/java/seedu/algobase/storage/JsonAdaptedAuthorMatchesKeywordPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.INVALID_ADAPTED_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class JsonAdaptedAuthorMatchesKeywordPredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_invalidAdaptedKeyword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedAuthorMatchesKeywordPredicate jsonAdaptedAuthorMatchesKeywordPredicate \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new JsonAdaptedAuthorMatchesKeywordPredicate(INVALID_ADAPTED_KEYWORD);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d Keyword.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            jsonAdaptedAuthorMatchesKeywordPredicate::toModelType);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 22
    }
  },
  {
    "path": "src/test/java/seedu/algobase/storage/JsonAdaptedDescriptionContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.INVALID_ADAPTED_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class JsonAdaptedDescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_invalidAdaptedKeyword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedDescriptionContainsKeywordsPredicate adaptedDescriptionContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new JsonAdaptedDescriptionContainsKeywordsPredicate(Arrays.asList(INVALID_ADAPTED_KEYWORD));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d Keyword.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            adaptedDescriptionContainsKeywordsPredicate::toModelType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 24
    }
  },
  {
    "path": "src/test/java/seedu/algobase/storage/JsonAdaptedKeywordTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.INVALID_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class JsonAdaptedKeywordTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_invalidKeyword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedKeyword jsonAdaptedKeyword \u003d new JsonAdaptedKeyword(INVALID_KEYWORD);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d Keyword.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, jsonAdaptedKeyword::toModelType);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 20
    }
  },
  {
    "path": "src/test/java/seedu/algobase/storage/JsonAdaptedNameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.INVALID_ADAPTED_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class JsonAdaptedNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_invalidAdaptedKeyword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedNameContainsKeywordsPredicate jsonAdaptedNameContainsKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new JsonAdaptedNameContainsKeywordsPredicate(Arrays.asList(INVALID_ADAPTED_KEYWORD));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d Keyword.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            jsonAdaptedNameContainsKeywordsPredicate::toModelType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 24
    }
  },
  {
    "path": "src/test/java/seedu/algobase/storage/JsonAdaptedProblemSearchRuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.storage.JsonAdaptedProblemSearchRule.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.ALL_PREDICATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.MEDIUM_DIFFICULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.NAME_SEQUENCES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DifficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class JsonAdaptedProblemSearchRuleTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String INVALID_NAME \u003d \"*%^SAD\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final JsonAdaptedDifficultyIsInRangePredicate INVALID_ADAPTED_DIFFICULTY_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new JsonAdaptedDifficultyIsInRangePredicate(0.0, 3.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final JsonAdaptedDifficultyIsInRangePredicate INVALID_ADAPTED_DIFFICULTY_PREDICATE_TWO \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new JsonAdaptedDifficultyIsInRangePredicate(1.0, 5.1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final JsonAdaptedDifficultyIsInRangePredicate INVALID_ADAPTED_DIFFICULTY_PREDICATE_THREE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new JsonAdaptedDifficultyIsInRangePredicate(3.0, 1.0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final JsonAdaptedDifficultyIsInRangePredicate INVALID_ADAPTED_DIFFICULTY_PREDICATE_FOUR \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new JsonAdaptedDifficultyIsInRangePredicate(-1.0, 3.0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final JsonAdaptedDifficultyIsInRangePredicate INVALID_ADAPTED_DIFFICULTY_PREDICATE_FIVE \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new JsonAdaptedDifficultyIsInRangePredicate(-3.0, -1.0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String VALID_NAME \u003d ALL_PREDICATE.getName().name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final JsonAdaptedNameContainsKeywordsPredicate VALID_ADAPTED_NAME_PREDICATE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new JsonAdaptedNameContainsKeywordsPredicate(ALL_PREDICATE.getNamePredicate().get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final JsonAdaptedAuthorMatchesKeywordPredicate VALID_ADAPTED_AUTHOR_PREDICATE \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new JsonAdaptedAuthorMatchesKeywordPredicate(ALL_PREDICATE.getAuthorPredicate().get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final JsonAdaptedDescriptionContainsKeywordsPredicate VALID_ADAPTED_DESCRIPTION_PREDICATE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new JsonAdaptedDescriptionContainsKeywordsPredicate(ALL_PREDICATE.getDescriptionPredicate().get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final JsonAdaptedSourceMatchesKeywordPredicate VALID_ADAPTED_SOURCE_PREDICATE \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new JsonAdaptedSourceMatchesKeywordPredicate(ALL_PREDICATE.getSourcePredicate().get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final JsonAdaptedDifficultyIsInRangePredicate VALID_ADAPTED_DIFFICULTY_PREDICATE \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new JsonAdaptedDifficultyIsInRangePredicate(ALL_PREDICATE.getDifficultyPredicate().get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final JsonAdaptedTagIncludesKeywordsPredicate VALID_ADAPTED_TAG_PREDICATE \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new JsonAdaptedTagIncludesKeywordsPredicate(ALL_PREDICATE.getTagPredicate().get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_validPartialDetailsOne_returnsProblemSearchRule() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedProblemSearchRule adaptedProblemSearchRule \u003d new JsonAdaptedProblemSearchRule(MEDIUM_DIFFICULTY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(MEDIUM_DIFFICULTY, adaptedProblemSearchRule.toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_validPartialDetailsTwo_returnsProblemSearchRule() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedProblemSearchRule adaptedProblemSearchRule \u003d new JsonAdaptedProblemSearchRule(NAME_SEQUENCES);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(NAME_SEQUENCES, adaptedProblemSearchRule.toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_validFullDetails_returnsProblemSearchRule() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedProblemSearchRule adaptedProblemSearchRule \u003d new JsonAdaptedProblemSearchRule(ALL_PREDICATE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(ALL_PREDICATE, adaptedProblemSearchRule.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedProblemSearchRule adaptedProblemSearchRule \u003d new JsonAdaptedProblemSearchRule(INVALID_NAME,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_NAME_PREDICATE, VALID_ADAPTED_AUTHOR_PREDICATE, VALID_ADAPTED_DESCRIPTION_PREDICATE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_SOURCE_PREDICATE, VALID_ADAPTED_DIFFICULTY_PREDICATE, VALID_ADAPTED_TAG_PREDICATE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedProblemSearchRule::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedProblemSearchRule adaptedProblemSearchRule \u003d new JsonAdaptedProblemSearchRule(null,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_NAME_PREDICATE, VALID_ADAPTED_AUTHOR_PREDICATE, VALID_ADAPTED_DESCRIPTION_PREDICATE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_SOURCE_PREDICATE, VALID_ADAPTED_DIFFICULTY_PREDICATE, VALID_ADAPTED_TAG_PREDICATE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedProblemSearchRule::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    // Note that all null predicates should only be achievable if the user manually changed the JSON file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    // In order not to break the entire save file, we choose to accept such \"illegal\" case."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_allNullPredicates_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedProblemSearchRule adaptedProblemSearchRule \u003d new JsonAdaptedProblemSearchRule(VALID_NAME,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            null, null, null, null, null, null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        adaptedProblemSearchRule.toModelType();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_zeroLowerBound_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedProblemSearchRule adaptedProblemSearchRule \u003d new JsonAdaptedProblemSearchRule(VALID_NAME,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_NAME_PREDICATE, VALID_ADAPTED_AUTHOR_PREDICATE, VALID_ADAPTED_DESCRIPTION_PREDICATE,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_SOURCE_PREDICATE, INVALID_ADAPTED_DIFFICULTY_PREDICATE_ONE, VALID_ADAPTED_TAG_PREDICATE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d DifficultyIsInRangePredicate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedProblemSearchRule::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_tooHighLowerBound_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedProblemSearchRule adaptedProblemSearchRule \u003d new JsonAdaptedProblemSearchRule(VALID_NAME,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_NAME_PREDICATE, VALID_ADAPTED_AUTHOR_PREDICATE, VALID_ADAPTED_DESCRIPTION_PREDICATE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_SOURCE_PREDICATE, INVALID_ADAPTED_DIFFICULTY_PREDICATE_TWO, VALID_ADAPTED_TAG_PREDICATE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d DifficultyIsInRangePredicate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedProblemSearchRule::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_inversedBounds_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedProblemSearchRule adaptedProblemSearchRule \u003d new JsonAdaptedProblemSearchRule(VALID_NAME,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_NAME_PREDICATE, VALID_ADAPTED_AUTHOR_PREDICATE, VALID_ADAPTED_DESCRIPTION_PREDICATE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_SOURCE_PREDICATE, INVALID_ADAPTED_DIFFICULTY_PREDICATE_THREE, VALID_ADAPTED_TAG_PREDICATE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d DifficultyIsInRangePredicate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedProblemSearchRule::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_negativeLowerBound_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedProblemSearchRule adaptedProblemSearchRule \u003d new JsonAdaptedProblemSearchRule(VALID_NAME,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_NAME_PREDICATE, VALID_ADAPTED_AUTHOR_PREDICATE, VALID_ADAPTED_DESCRIPTION_PREDICATE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_SOURCE_PREDICATE, INVALID_ADAPTED_DIFFICULTY_PREDICATE_FOUR, VALID_ADAPTED_TAG_PREDICATE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d DifficultyIsInRangePredicate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedProblemSearchRule::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_negativeBounds_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedProblemSearchRule adaptedProblemSearchRule \u003d new JsonAdaptedProblemSearchRule(VALID_NAME,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_NAME_PREDICATE, VALID_ADAPTED_AUTHOR_PREDICATE, VALID_ADAPTED_DESCRIPTION_PREDICATE,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            VALID_ADAPTED_SOURCE_PREDICATE, INVALID_ADAPTED_DIFFICULTY_PREDICATE_FIVE, VALID_ADAPTED_TAG_PREDICATE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d DifficultyIsInRangePredicate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, adaptedProblemSearchRule::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 134
    }
  },
  {
    "path": "src/test/java/seedu/algobase/storage/JsonAdaptedSourceMatchesKeywordPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.INVALID_ADAPTED_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class JsonAdaptedSourceMatchesKeywordPredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_invalidAdaptedKeyword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedSourceMatchesKeywordPredicate jsonAdaptedSourceMatchesKeywordPredicate \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new JsonAdaptedSourceMatchesKeywordPredicate(INVALID_ADAPTED_KEYWORD);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d Keyword.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            jsonAdaptedSourceMatchesKeywordPredicate::toModelType);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 20
    }
  },
  {
    "path": "src/test/java/seedu/algobase/storage/JsonAdaptedTagIncludesKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblemSearchRules.INVALID_ADAPTED_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class JsonAdaptedTagIncludesKeywordsPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void toModelType_invalidAdaptedKeyword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAdaptedTagIncludesKeywordsPredicate adaptedTagIncludesKeywordsPredicate \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new JsonAdaptedTagIncludesKeywordsPredicate(Arrays.asList(INVALID_ADAPTED_KEYWORD));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d Keyword.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            adaptedTagIncludesKeywordsPredicate::toModelType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 24
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/AlgoBaseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A utility class to help with building Algobase objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " *     {@code AlgoBase ab \u003d new AlgoBaseBuilder().withProblem(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class AlgoBaseBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private AlgoBase algoBase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBaseBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase \u003d new AlgoBase();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBaseBuilder(AlgoBase algoBase) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.algoBase \u003d algoBase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds a new {@code Problem} to the {@code AlgoBase} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBaseBuilder withProblem(Problem problem) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.addProblem(problem);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBase build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBase;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 34
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/EditProblemDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.EditCommand.EditProblemDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A utility class to help with building EditProblemDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class EditProblemDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private EditProblemDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor \u003d new EditProblemDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder(EditProblemDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.descriptor \u003d new EditProblemDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns an {@code EditProblemDescriptor} with fields containing {@code Problem}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder(Problem problem) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor \u003d new EditProblemDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setName(problem.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setAuthor(problem.getAuthor());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setWebLink(problem.getWebLink());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setDescription(problem.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setTags(problem.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code Name} of the {@code EditProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code Author} of the {@code EditProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setAuthor(new Author(author));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code WebLink} of the {@code EditProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder withWeblink(String weblink) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setWebLink(new WebLink(weblink));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code Description} of the {@code EditProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditProblemDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "LuWenQ": 86
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/FindProblemDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.AuthorMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DifficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.FindProblemDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.SourceMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.TagIncludesKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * A utility class to help with building FindProblemDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class FindProblemDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private FindProblemDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindProblemDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        descriptor \u003d new FindProblemDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindProblemDescriptorBuilder(FindProblemDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.descriptor \u003d descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Sets the {@code NameContainsKeywordsPredicate} of the {@code FindProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindProblemDescriptorBuilder withNamePredicate(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        descriptor.setNamePredicate(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Sets the {@code AuthorMatchesKeywordPredicate} of the {@code FindProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindProblemDescriptorBuilder withAuthorPredicate(AuthorMatchesKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        descriptor.setAuthorPredicate(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Sets the {@code DescriptionContainsKeywordsPredicate} of the {@code FindProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindProblemDescriptorBuilder withDescriptionPredicate(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        descriptor.setDescriptionPredicate(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Sets the {@code DifficultyIsInRangePredicate} of the {@code FindProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindProblemDescriptorBuilder withDifficultyPredicate(DifficultyIsInRangePredicate predicate) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        descriptor.setDifficultyPredicate(predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Sets the {@code SourceMatchesKeywordPredicate} of the {@code FindProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindProblemDescriptorBuilder withSourcePredicate(SourceMatchesKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        descriptor.setSourcePredicate(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Sets the {@code TagIncludesKeywordsPredicate} of the {@code FindProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindProblemDescriptorBuilder withTagPredicate(TagIncludesKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        descriptor.setTagPredicate(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns the built {@code FindProblemDescriptor}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindProblemDescriptor build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 80
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/ProblemBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A utility class to help with building Problem objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class ProblemBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String DEFAULT_AUTHOR \u003d \"85355255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DEFAULT_WEBLINK \u003d \"http://open.kattis.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DEFAULT_DIFFICULTY \u003d \"3.0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"remark placeholder\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DEFAULT_SOURCE \u003d \"UVa\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Author author;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private WebLink webLink;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Difficulty difficulty;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Source source;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        author \u003d new Author(DEFAULT_AUTHOR);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        webLink \u003d new WebLink(DEFAULT_WEBLINK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        difficulty \u003d new Difficulty(DEFAULT_DIFFICULTY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        source \u003d new Source(DEFAULT_SOURCE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Initializes the ProblemBuilder with the data of {@code problemToCopy}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder(Problem problemToCopy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        name \u003d problemToCopy.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        author \u003d problemToCopy.getAuthor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        webLink \u003d problemToCopy.getWebLink();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        description \u003d problemToCopy.getDescription();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(problemToCopy.getTags());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        difficulty \u003d problemToCopy.getDifficulty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        remark \u003d problemToCopy.getRemark();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        source \u003d problemToCopy.getSource();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code Name} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder withName(String name) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Problem} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code Description} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code Author} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.author \u003d new Author(author);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code WebLink} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder withWeblink(String weblink) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.webLink \u003d new WebLink(weblink);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ProblemBuilder withDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.difficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Sets the {@code Remark} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ProblemBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Sets the {@code Source} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ProblemBuilder withSource(String source) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.source \u003d new Source(source);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Problem build() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new Problem(name, author, webLink, description, tags, difficulty, remark, source);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 41,
      "LuWenQ": 40,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/ProblemUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.problem.EditCommand.EditProblemDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A utility class for Problem."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class ProblemUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns an add command string for adding the {@code Problem}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static String getAddCommand(Problem problem) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getProblemDetails(problem);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the part of command string for the given {@code Problem}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static String getProblemDetails(Problem problem) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        sb.append(PREFIX_NAME + problem.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        sb.append(PREFIX_AUTHOR + problem.getAuthor().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        sb.append(PREFIX_WEBLINK + problem.getWebLink().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + problem.getDescription().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problem.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the part of command string for the given {@code EditProblemDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static String getEditProblemDescriptorDetails(EditProblemDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.getAuthor().ifPresent(author -\u003e sb.append(PREFIX_AUTHOR).append(author.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.getWebLink().ifPresent(weblink -\u003e sb.append(PREFIX_WEBLINK).append(weblink.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION).append(description.value)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "LuWenQ": 26,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the middle index of the Problem in the {@code model}\u0027s Problem list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return Index.fromOneBased(model.getFilteredProblemList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the last index of the Problem in the {@code model}\u0027s Problem list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return Index.fromOneBased(model.getFilteredProblemList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the Problem in the {@code model}\u0027s Problem list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static Problem getProblem(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return model.getFilteredProblemList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 3,
      "LuWenQ": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/TypicalProblemSearchRules.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.getTypicalProblems;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.AuthorMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.DifficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.ProblemSearchRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.SourceMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.searchrule.problemsearchrule.TagIncludesKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.storage.JsonAdaptedKeyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * A utility class containing a list of {@code ProblemSearchRule} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class TypicalProblemSearchRules {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final ProblemSearchRule MEDIUM_DIFFICULTY \u003d new ProblemSearchRule("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new Name(\"Medium difficulty\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new DifficultyIsInRangePredicate(1.0, 3.0),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final ProblemSearchRule NAME_SEQUENCES \u003d new ProblemSearchRule("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new Name(\"Sequences\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new NameContainsKeywordsPredicate(Arrays.asList(new Keyword(\"Sequences\"))),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final ProblemSearchRule NAME_SEQUENCES_DUPLICATE \u003d new ProblemSearchRule("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new Name(\"Sequences\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new NameContainsKeywordsPredicate(Arrays.asList(new Keyword(\"Sequences\"))),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final ProblemSearchRule NAME_SEQUENCES_SAME_NAME_DIFFERENT_PREDICATE \u003d new ProblemSearchRule("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new Name(\"Sequences\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new NameContainsKeywordsPredicate(Arrays.asList(new Keyword(\"Hello\"))),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new DifficultyIsInRangePredicate(1.0, 3.0),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final ProblemSearchRule ALL_PREDICATE \u003d new ProblemSearchRule("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new Name(\"All predicates search rule\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new NameContainsKeywordsPredicate(Arrays.asList(new Keyword(\"hello\"))),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new AuthorMatchesKeywordPredicate(new Keyword(\"steven\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new DescriptionContainsKeywordsPredicate(Arrays.asList(new Keyword(\"des\"))),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new SourceMatchesKeywordPredicate(new Keyword(\"src\")),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new DifficultyIsInRangePredicate(1.0, 3.0),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new TagIncludesKeywordsPredicate(Arrays.asList(new Keyword(\"tags\")))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final ProblemSearchRule QUICK_SORT_PREDICATE \u003d new ProblemSearchRule("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new Name(\"Quick sort predicate\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new NameContainsKeywordsPredicate(Arrays.stream(QUICK_SORT.getName().fullName.split(\" \"))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .map(Keyword::new)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .collect(Collectors.toList())),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String INVALID_KEYWORD \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final JsonAdaptedKeyword INVALID_ADAPTED_KEYWORD \u003d new JsonAdaptedKeyword(INVALID_KEYWORD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns an {@code AlgoBase} with all typical find rules and problems."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static AlgoBase getTypicalAlgoBase() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AlgoBase algoBase \u003d new AlgoBase();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (ProblemSearchRule rule : getTypicalFindRules()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            algoBase.addFindRule(rule);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (Problem problem : getTypicalProblems()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            algoBase.addProblem(problem);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return algoBase;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static List\u003cProblemSearchRule\u003e getTypicalFindRules() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // Please always keep QUICK_SORT_PREDICATE as the first predicate."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(QUICK_SORT_PREDICATE, MEDIUM_DIFFICULTY, NAME_SEQUENCES, ALL_PREDICATE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 112
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/TypicalProblems.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_AUTHOR_FACTORIAL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_AUTHOR_QUICK_SORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_AUTHOR_TWO_SUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_DESCRIPTION_FACTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_DESCRIPTION_QUICK_SORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TWO_SUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_DIFFICULTY_FACTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_DIFFICULTY_QUICK_SORT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_DIFFICULTY_TWO_SUM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_NAME_FACTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_NAME_QUICK_SORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_NAME_TWO_SUM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_REMARK_FACTORIAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_REMARK_QUICK_SORT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_REMARK_TWO_SUM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_SOURCE_FACTORIAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_SOURCE_QUICK_SORT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_SOURCE_TWO_SUM;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_WEBLINK_FACTORIAL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_WEBLINK_QUICK_SORT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_WEBLINK_TWO_SUM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * A utility class containing a list of {@code Problem} objects to be used in tests."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class TypicalProblems {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Problem QUICK_SORT \u003d new ProblemBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withName(VALID_NAME_QUICK_SORT)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withDescription(VALID_DESCRIPTION_QUICK_SORT)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withAuthor(VALID_AUTHOR_QUICK_SORT)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withWeblink(VALID_WEBLINK_QUICK_SORT)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withRemark(VALID_REMARK_QUICK_SORT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withSource(VALID_SOURCE_QUICK_SORT)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withDifficulty(VALID_DIFFICULTY_QUICK_SORT)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withTags(\"Sorting\", \"Recursion\", \"Basics\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Problem TWO_SUM \u003d new ProblemBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withName(VALID_NAME_TWO_SUM)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withDescription(VALID_DESCRIPTION_TWO_SUM)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withAuthor(VALID_AUTHOR_TWO_SUM)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withWeblink(VALID_WEBLINK_TWO_SUM)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withRemark(VALID_REMARK_TWO_SUM)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withSource(VALID_SOURCE_TWO_SUM)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withDifficulty(VALID_DIFFICULTY_TWO_SUM)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Problem FACTORIAL \u003d new ProblemBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withName(VALID_NAME_FACTORIAL)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withDescription(VALID_DESCRIPTION_FACTORIAL)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withAuthor(VALID_AUTHOR_FACTORIAL)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withWeblink(VALID_WEBLINK_FACTORIAL)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withRemark(VALID_REMARK_FACTORIAL)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withSource(VALID_SOURCE_FACTORIAL)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withDifficulty(VALID_DIFFICULTY_FACTORIAL)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns an {@code AlgoBase} with all typical problems."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static AlgoBase getTypicalAlgoBase() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AlgoBase algoBase \u003d new AlgoBase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (Problem problem : getTypicalProblems()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            algoBase.addProblem(problem);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return algoBase;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static List\u003cProblem\u003e getTypicalProblems() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(QUICK_SORT, TWO_SUM, FACTORIAL));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 81
    }
  },
  {
    "path": "src/test/java/seedu/algobase/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/invalidFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "Not a valid FXML file"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c!--suppress ALL --\u003e"
      }
    ],
    "authorContributionMap": {
      "le0tan": 1,
      "-": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import seedu.algobase.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import seedu.algobase.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003cfx:root type\u003d\"seedu.algobase.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 5
    }
  }
]
