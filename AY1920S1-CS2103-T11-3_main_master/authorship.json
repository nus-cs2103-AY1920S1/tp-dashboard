[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d Powerlifting Competition Coordinator"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-T11-3/main[image:https://travis-ci.org/AY1920S1-CS2103-T11-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "A powerlifting competition consists of 3 lifts, the Squat, Bench, and Deadlift."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "With 3 attempts, athletes will try to outdo and challenge themselves and lift as heavy as they can. +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The *Powerlifting Competition Coordinator* (PCC) is for powerlifting competitions organisers."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The desktop application will help event organisers keep a record of past competitions and competitors."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "It can also facilitate the competition during the actual session,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "by continuously updating records of the athletes attempts on their lifts."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Finally, PCC will keep its leader board up to date,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "to keep spectators and athletes hyped up and to find out who is the strongest lifter. +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "To support the ease of data-entry, we have provided a Command Line Interface (CLI) that is augmented with a"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Graphical User Interface (GUI) to help them better administer such powerlifting competitions. +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* AddressBook-Level3 project is created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* Some parts of this sample application were inspired by the excellent"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by _Marco Jakob_."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "belbel98": 25,
      "-": 17
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "mainClassName \u003d \u0027seedu.system.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        \u0027site-name\u0027: \u0027Powerlifting Competition Coordinator\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103-T11-3/main\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 2,
      "-": 151,
      "ooimingsheng": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Powerlifting Competition Coordinator (PCC) is being developed by https://github.com/AY1920S1-CS2103-T11-3[T11-Team 3]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d PCC Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Professor Damith C. Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Ho Wei Chin"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::HoWeiChin.png[width\u003d\"180\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[https://github.com/HoWeiChin[github]] [\u003c\u003choweichin#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Responsibilities: Deliverable, Tracking, User Interface +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Component IC: Person, Competition"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Ooi Ming Sheng"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::ooimingsheng.png[width\u003d\"180\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[https://github.com/ooimingsheng[github]] [\u003c\u003cooimingsheng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Responsibilities: Integration, Code Quality +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Component IC: Storage, Context-Switching"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Shawn Koh"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::shawnkoh.png[width\u003d\"180\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[https://github.com/shawnkoh[github]] [\u003c\u003cshawnkoh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Responsibilities: Project Workflow, User interface +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Component IC: Leaderboard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Christabel Teo"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::belbel98.png[width\u003d\"180\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[https://github.com/belbel98[github]] [\u003c\u003cchristabelteo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Responsibilities: Documentation, Deliverable, Deadlines +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Component IC: Session Handling, Participation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "belbel98": 25,
      "-": 34
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-T11-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "// * *Email us* : You can also reach us at `damith [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "belbel98": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d PowerLifting Competition Coordinator - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T11-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "By: `Team T11-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d What is Powerlifting Competition Coordinator?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Powerlifting Competition Coordinator is a free application for powerlifting competition event organizers"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "that is simple, fast, and easy to use. It is targeted at organizers of small to medium sized powerlifting"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "competitions who require a hassle-free way of managing and tracking the lifts of participants in and out"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "of the powerlifting competitions. During competition mode, the system has real time maintenance of athlete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "rankings within their respective weight classes allowing the organizer track the participants\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "standings at all times throughout the duration of the competition."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Core team"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Powerlifting Competition Coordinator  was developed and is maintained by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "https://github.com/AY1920S1-CS2103-T11-3[Team T11-3]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Feel free to https://github.com/AY1920S1-CS2103-T11-3/main/issues[contact us] for any enquries."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Contributing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Powerlifting Competition Coordinator is an open source project and we would love to involve any contributor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "who has a passion for powerlifting."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "To get involved, start by reading \u003c\u003cSettingUp#, Section 2, “Setting up”\u003e\u003e."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This section documents the design and interaction of components in Powerlifting Competition Coordinator."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Please take a moment to understand the different components before making any code changes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "quick overview of each component."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Model component (needs to change)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Context-Switching feature between sessions"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Our features are mainly split into 2 contexts. An in-competition, and an out-of-competition session mode."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "belbel98"
        },
        "content": "A session is started when the user wants to start an existing competition to call lifters to perform their attempt,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "belbel98"
        },
        "content": "record them, and finally to view the ranking leader board for the competition, all within in-session mode."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "belbel98"
        },
        "content": "On the other hand, an out-session mode, when the user exits the competition session mode,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "belbel98"
        },
        "content": "is where all create, read, update delete of the Person, Competition, and Participation is done."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The reason for this context-switching feature is to prevent users from using out-session commands that are strictly for"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "belbel98"
        },
        "content": "in-session mode and vice versa."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "belbel98"
        },
        "content": ".Activity Diagram for average user flow from out to in-session."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::ActivityDiagram.png[]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Figure 9 shows the average user flow of how the user can go in-session,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "belbel98"
        },
        "content": "and also distinctly shows the commands that can be done in each state."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "belbel98"
        },
        "content": "However, the end of every competition session does not signify the end of a user\u0027s activity."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The user can still go in and out of the competition session (start and end), to perform the different commands"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "belbel98"
        },
        "content": "from the different states."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How it is being implemented (mingsheng)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d In-Session"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "belbel98"
        },
        "content": "In-Session is the state where the user enters competition mode, where users can command the app to generate"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "belbel98"
        },
        "content": "the next lifter, as well as record any attempt. At the end of the competition, the rank of the participants"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "and competition can be viewed too, as long as a competition session has yet to end."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "belbel98"
        },
        "content": "To handle the state of the competition, we have created a new `Session` class that is packaged into model and"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "belbel98"
        },
        "content": "managed by the ModelManager. The `Session` class is a singleton class, and only has one instance in the ModelManager."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The reason behind the use of a singleton class to handle sessions, is that we only want one ongoing session at any"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "belbel98"
        },
        "content": "point in time. The singleton class will also only temporarily store its participation list, and participationAttempt"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "belbel98"
        },
        "content": "list in relation to the ongoing session. Once the session ends, all data is reset."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Any update in any objects such as the attempts or participation details will be handled by the ModelManager,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "belbel98"
        },
        "content": "which will be explained in more details in the respective features below."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "belbel98"
        },
        "content": ".Class Diagram of the Session package in the Model"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::SessionClassDiagram.png[]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Next feature"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "belbel98"
        },
        "content": "One of the main purpose of the in-session function is to generate the next lifter and his attempt details accordingly."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "belbel98"
        },
        "content": "In the `Session` class, the list of `ParticipationAttempt` is maintained so that athletes can make their attempt"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "belbel98"
        },
        "content": "in order of the type of lift, attempt number, and in increasing weight to be attempted. Upon calling the `next` command,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "belbel98"
        },
        "content": "the next lifter is called up, and the following lifter should be asked to prepare for his lift, after the next lifter."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `next`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Given below is the example flow of what the model does when the `NextLifterCommand` is executed after being parsed"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "belbel98"
        },
        "content": "through the LogicManager."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "belbel98"
        },
        "content": "*Step 1:* A new `NextLifterCommand` is constructed when the user inputs `next` in the command box."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "belbel98"
        },
        "content": "When `NextLifterCommand#execute()` is called, the model will get the following lifter, and store the"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "belbel98"
        },
        "content": "ParticipationAttempt retrieved from `Session#getFollowingLifter()` in a local variable,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "belbel98"
        },
        "content": "to be returned together with the CommandResult later on."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "belbel98"
        },
        "content": "*Step 2:* The `ModelManager` will call `Session#NextLifter()` to generate the next lifter and attempt in the form of a"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "belbel98"
        },
        "content": "`ParticipationAttempt` object. If the `Session` is not prepared, which means that the imported `ParticipationAttempts`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "belbel98"
        },
        "content": "are not sorted, `prepare()` will be called internally. When this method is called, the ParticipationAttempt list in the"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Session will be sorted according to the new `ParticipationAttemptComparator`. When this is done, the session is now"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "belbel98"
        },
        "content": "prepared, and next or following lifters can be generated based on this sorted list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "belbel98"
        },
        "content": "(This method is usually called once just after starting the session.)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "belbel98"
        },
        "content": "*Step 3:* The `Session#NextLifter()` method will then return the first `ParticipationAttempt` in the list."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "belbel98"
        },
        "content": "This is equivalent to the next lifter to make his attempt, since he is the top most in the sorted list."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "belbel98"
        },
        "content": "*Step 4:* A new `CommandResult` will be returned. Details of the next and following ParticipationAttempt will be"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "belbel98"
        },
        "content": "included and displayed in the Dialogue Box to the user."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "belbel98"
        },
        "content": ".Sequence Diagram for the NextLifterCommand"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::NextSequenceDiagram.png[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Lift feature"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "belbel98"
        },
        "content": "This command allows the user to update and record the result of the attempt that was just made."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The participation\u0027s dependent attempts as well as scores will be automatically updated according to the lifts made and"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "belbel98"
        },
        "content": "recording using this command."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `lift Y/N`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Given below is the example flow of how the model executes the `AttemptLiftedCommand` in the model after it is"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "belbel98"
        },
        "content": "parsed through the `LogicManager`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "belbel98"
        },
        "content": "*Step 1:* An `AttemptLiftedCommand` is created with a boolean parameter to indicate the success of the lift."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "belbel98"
        },
        "content": "An input `lift y` by the user will create an `AttemptLiftedCommand`, taking in boolean `true`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "belbel98"
        },
        "content": "*Step 2:* The following lifter and attempt is retrieved and stored in a local variable in the execute method of the"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "belbel98"
        },
        "content": "command, so that we can prompt the user of the following lifter, before any changes are made to the existing attempts."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "belbel98"
        },
        "content": "*Step 3:* `model#makeAttempt()` is called in the execute method of the command. The `ModelManager` will then call"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "belbel98"
        },
        "content": "`Session#attemptMade()` to indicate the attempt has been made. This method will return a `ParticipationAttempt` object"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "belbel98"
        },
        "content": "that has just been made, and stored in a local variable named `next`. If this particular attempt has already been made,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "belbel98"
        },
        "content": "an exception will be thrown to inform the user in the form of a `CommandResult`."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "belbel98"
        },
        "content": "*Step 4:* The `Participation` of the `next` will be retrieved, so that we can update the participant\u0027s attempt by"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "belbel98"
        },
        "content": "calling `Participation#updateAttempt()`. `ModelManager#setParticipation()` will then update the participation\u0027s attempt"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "belbel98"
        },
        "content": "in the storage accordingly."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "belbel98"
        },
        "content": "*Step 5:* `AttemptLiftedCommand#execute()` will then return a new `CommandResult` containing the associated result,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "belbel98"
        },
        "content": "together with the following lifter."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "belbel98"
        },
        "content": ".Sequence Diagram for the AttemptLiftedCommand"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::LiftSequenceDiagram.png[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Rank feature"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "A RankCommand class is created to facilitate ranking of an athlete for a given competition he or she participates in."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "RankCommand extends the Command Abstract Class, the rationale is explained in `Choice of Design Pattern` sub-section of the Rank feature."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Rank feature has 2 sequential checks:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "1. Checks if a competition session is ongoing, rank command can only be used if a competition session persists."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "2. Checks if an athlete participates in a competition, rank command can only be used if an athlete participates in a competition."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Finally, the feature returns an athlete\u0027s report card for a competition. For example,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " Athlete: Alex Yeoh"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " Competition: NUS Powerlifting Open 2019"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " Rank: 1"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " Total Score: 1"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " Max Squat: 1"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " Max Bench Press: 0"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " Max Deadlift: 0"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "belbel98"
        },
        "content": "When the rank feature is used, RankCommand interacts with other classes to return an athlete\u0027s report card. See the"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "sequence diagram for a high level depiction of how RankCommand interacts with other classes."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ".Sequence Diagram of the RankCommand"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "image::RankCommand.png[]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Choice of Design Pattern"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Original AB3 code base uses a Command Design Pattern, which facilitates execution of different commands,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "belbel98"
        },
        "content": "without the programme knowing which type of command is being executed. Furthermore, the original AB3 code base achieves"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "belbel98"
        },
        "content": "a Command Design Pattern by requiring different types of command classes to extend from a Command Abstract Class."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Due to time constraint and to achieve consistency with the Command Design Pattern of the original Code Base,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "belbel98"
        },
        "content": "we decide to apply the Command Design Pattern for the Rank command too."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Rank list feature"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d End session feature"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "belbel98"
        },
        "content": "This feature ends the session, and shifts the user back to the out-session state."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "belbel98"
        },
        "content": "All data stored in the session will be reset to default."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `endSession`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "belbel98"
        },
        "content": "When we first implemented the session feature, the session can only be ended when a competition has ended,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "belbel98"
        },
        "content": "which means there are no more attempts to be made. However, we have now made it such that the user can switch"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "belbel98"
        },
        "content": "between sessions as and when, even in the middle of the competition. This gives users more flexibility to switch between"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "belbel98"
        },
        "content": "session states, without worrying about the state of the competition."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Out-Session"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Start Session feature"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The start session feature is a command to start a new competition session, when a user is not in competition state."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "belbel98"
        },
        "content": "As mentioned in Section 4.2. above, `Session` allows the user to start any competition session as and when, even when a"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "belbel98"
        },
        "content": "competition has not ended (there are still attempts left to be made). To start a session, the user can enter"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "belbel98"
        },
        "content": "the command with the specified competition."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `startSession c/COMPETITION_NAME`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Given below is the flow of execution in the model after a `StartSessionCommand#execute()` is called."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "belbel98"
        },
        "content": "*Step 1:* `Model#startSession(comp, partList)` is called, where `comp` is the `Competition` object to start the session"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "belbel98"
        },
        "content": "with, and `partList` is the list of `Participation` who will be participating in this competition session."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The method then calls `Session#start(comp, partList)`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "belbel98"
        },
        "content": "*Step 2:* An internal call in the `start()` method, `loadAttempts(p, p.getAttempts())`, is made for every"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "belbel98"
        },
        "content": "`Participation` object, `p`, by looping through the `partList`, loading all unattempted attempts into the"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "belbel98"
        },
        "content": "participationAttemptList temporarily stored in the Session instance."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "belbel98"
        },
        "content": "(`p.getAttempts()` retrieves the list of all 9 `Attempt` instance that the participation has submitted at the start.)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "belbel98"
        },
        "content": "*Step 3:* The `loadAttempts()` method will loop through all the 9 `Attempt` objects taken in as parameter, and checks if"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "belbel98"
        },
        "content": "each has been attempted. If an `Attempt` by that `Participation` has not been attempted, a new `ParticipationAttempt`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "belbel98"
        },
        "content": "object will be created and added to the list."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Because of the way `Session` handles the initialising of every new session, be it starting a new competition, resuming a"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "belbel98"
        },
        "content": "competition, or even starting a session with a competition that has already ended (all attempts have been made by the"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "belbel98"
        },
        "content": "athletes) is made possible."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "belbel98"
        },
        "content": ".Sequence Diagram for the StartSessionCommand"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::StartSequenceDiagram.png[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Competition/Person features"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "There are 4 competition/person features: adding, deleting, editing and listing competitions/persons."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "The features are briefly described below. Except for the listing and deleting competition/persons commands, the crux of"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "adding and editing a competition/person commands is the CustomDate class (which will be discussed later)."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Adding a competition/person"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "To add a competition, supply the name of a competition and it\u0027s start and end dates. But, start date must be equal or"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "before end date."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "To add a person, supply a person\u0027s name, a date of birth and a gender (male or female only). A person must have"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "already been born. Example, if today os 11/09/2019, a user cannot add a person who is borned in 15/09/2019 (in the"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "future)."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Deleting a competition/person"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "To delete a competition, supply the index of that competition."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "To delete a person, supply the index of that person."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Editing a competition/person"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "For competition, a user has the choice of editing either the competition name, start date of a competition or end date"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "of a competition."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "But, start date cannot be after end date after editing a competition information."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "For person, a user has the choice of editing either the person name, date of birth or a gender."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "But,  person must have already been born."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Listing a competition/person"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "To list all competitions/person stored in the programme."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Choice of Design Pattern"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Similar to the Rank feature."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "To ensure the dates given for a competition/person are valid, we created a CustomDate class which has the following"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "important attributes: a Java Date object and a string which stores a date format (hard-coded)."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "1. By storing a hard-coded date format, our programme can ensure consistency of the date format for all"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "competition events."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "2. By storing a Date object, we allow the our programme to use a method from Java Date class: before(). As mentioned"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "previously, this allows our programme to check if a competition start date is before or equals to the end date."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Similarly, to allow a input person\u0027s date of birth is before or equal to the current date. For example, if today\u0027s"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "date is 11/09/2019, a person\u0027s date of birth must be equal or before 11/09/2019"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Con:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "1. We need to ensure exceptions due to inappropriate date format and due to start date occurring after an end date are"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "handled properly by functions which depend on CustomDate."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "2. Users may wish to have their own date format."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Alternative:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "We have considered using just the Java Date object, but we think it will be neater to have a CustomDate class to keep a"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "date object and its associated date format string together in a CustomDate object. Furthermore, we can use the"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "functions available in the CustomDate class for competition and person objects. In particular, we can use the get"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "method to obtain the Date objects for two different CustomDate objects and compare them to decide if a user input for"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "dates is valid or not."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Please see the following activity diagram to understand the utility of CustomDate class in the context of adding a"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "person."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ".Sequence Diagram of the addPerson Command"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "image::addPerson.png[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Participation features"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "belbel98"
        },
        "content": "A Participation is an association class we have created for every Person who has participation in a particular"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Competition. A person can take part in many competitions, and for each competition he/she takes part in, there will be a"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "belbel98"
        },
        "content": "corresponding Participation class associated to that Person and Competition instance."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Create a new Participation"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "belbel98"
        },
        "content": "To create a new Participation, the associated Person and Competition must exist. If either doesnt,"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "belbel98"
        },
        "content": "an exception will be thrown to the user through the result box to prompt the user to input an existing one."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `addParticipation n/PERSON_NAME c/COMPETITION_NAME s/S1/S2/S3 b/B1/B2/B3 d/D1/D2/D3`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Note: S1 means the 1st attempted weight for the Squat and so on."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d List Participation"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The list participation feature allows the user to filter the participation list on the PCC app based on a particular"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "belbel98"
        },
        "content": "competition. If no parameters (competition name) are taken in,"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "belbel98"
        },
        "content": "the command will list out all of the participations stored in the system."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `listParticipation` or `listParticipation c/COMPETITION_NAME`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Delete Existing Participation"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The user can delete an existing participation, maybe in the case he/she has withdrawn or is disqualified"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "belbel98"
        },
        "content": "from that competition."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `deleteParticipation INDEX`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "belbel98"
        },
        "content": "We have decided to use the index of the participation in the list to delete a participation instead of"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "belbel98"
        },
        "content": "other parameter types, like the name or competition of the participation. The main reason is because,"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "belbel98"
        },
        "content": "there may exist more than one participation with the same name and different competition,"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "belbel98"
        },
        "content": "or different name and same competition."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* Takes in less parameters, user can type less."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* Avoid complications between unmatched name and competition."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* Easy to implement."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* User will have to scroll through the participation list on the app to type in the index."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Overall Rank feature"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* organizes small to medium sized powerlifting competitions"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* has a need to manage a significant number athletes during the competition"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* has a need to see the ranking of the participants of each competition"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* prefer desktop applicationss over other types"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Value proposition*: manage powerlifting competitions faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` | new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | create a new competition |"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "start and organize a new competition"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | sort athletes according to their attempted weights for different lifting events |"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "adjust the weight on stage call for the next athlete to come and attempt their lift"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | find which athletes are currently in the lead (individual lifts and aggregate score) |"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "so that I can let the competitors know who is in the lead for their resepective weight classes and  let them calculate"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "what they need to do to win the competition"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | the relative position of an athlete as compared to other athletes in their weight class |"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "see which athletes are in the same competition"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "belbel98"
        },
        "content": "|`* * *` | event organizer | create participation between a person and a competition |"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "belbel98"
        },
        "content": "so as to know the participants for the respective competitions"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | update an athlete’s score after a successful lift |"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "so that the ranking of the athletes can be updated"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | edit an athlete\u0027s name |"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "update the athlete\u0027s name in case the athletes have change their names or they were inputted incorrectly previously"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | record when a lifter fails/succeed in his/her lift |"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "update the athlete\u0027s score and ranking accordingly and to keep a record for how each athlete\u0027s"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "score was derived"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`*` | event organizer |find which club/country an athlete is affiliated with |"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "so that I know which countries/clubs can be ranked across the various weight classess"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Use Cases (To Do)"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "(For all use cases below, the *System* is the `Powerlifting Competition Competitor` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Out of competition mode"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Use case: UC1 - View my competition list"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User requests to list all competitions in the system."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  System shows a list of competitions held based on the files in the folder."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC2 - Add a new competition"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests for a new powerlifting competition to be started."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User inputs the initial competition data (e.g. name, particpants) to be inputted."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System adds the new competition to the user\u0027s competition list."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "4. System shows a success message."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. Competition data is invalid."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2b. The competition name has already been used in user\u0027s competition list."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2b1. System tells user that the competition is already in his competition list."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC3 - Delete a competition"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User obtains a list of competitions by listing (\u003c\u003cUse case: UC1 - View my competition list, *UC1*\u003e\u003e)"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests for a new powerlifting competition to be deleted."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System adds the new competition to the user\u0027s competition list."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "4. System shows a success message."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. User gives an invalid index."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC4 - Enter competition mode for a particular competition"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User obtains a list of competitions by listing (\u003c\u003cUse case: UC1 - View my competition list, *UC1*\u003e\u003e)"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests to enter competition mode for a particular competition."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System enters competition mode for a particular competition."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. User gives an invalid index."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC5 - View my athlete list"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User requests to list all athletes in the system."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  Powerlifting Competition Coordinator shows a list of all athletes in the system."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC6 - Search for athletes"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User performs a search with some constraints (e.g. id, country, age, etc.)."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  System lists athletes satisfying all the constraints."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. System does not find any athletes satisfying all the constraints."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an empty list."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC7 - View a specific athlete"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User obtains a list of athletes by listing (\u003c\u003cUse case: UC5 - View my athlete list, *UC5*\u003e\u003e)."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "or searching (\u003c\u003cUse case: UC6 - Search for athletes,*UC6*\u003e\u003e)."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests to view more information on a specific athlete in the list."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows detailed information of the book."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. System does not find the athlete in the list."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case restarts from step 1."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2b. User gives an invalid index."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2b1. System shows an error message."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC8 - Add an athlete"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests for an athlete to be added."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User inputs athlete data."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. User confirms that the addition of the athlete cannot be reversed."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "4. System adds the new athlete to the user\u0027s athlete list."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "5. System shows a success message."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. Athlete data is invalid."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2b. The athlete is already in user\u0027s athlete list."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2b1. System tells user that the athlete is already in his athlete list."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC9 - Edit a specific athlete"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User views a specific athlete (\u003c\u003cUse case: UC7 - View a specific athlete, *UC7*\u003e\u003e)"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests certain data about the athlete to be updated."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows success message."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. User gives invalid data."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC10 - Delete a specific athlete"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User views a specific athlete (\u003c\u003cUse case: UC7 - View a specific athlete, *UC7*\u003e\u003e)"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests for an athlete to be deleted from the athlete list."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows success message."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d In competition mode"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC11 - View my participant list"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User requests to list all participants in the competition."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  System shows a list of all participants in the competition."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC12 - Search/rank for participants"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User performs a search with some constraints (e.g. id, country, age, ranking criteria etc.)."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  System lists participants satisfying all the constraints."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. System does not find any athletes satisfying all the constraints."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an empty list."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC13 - View a specific participant"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User obtains a list of athletes by listing (\u003c\u003cUse case: UC11 - View my participant list, *UC11*\u003e\u003e)."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "or searching (\u003c\u003cUse case: UC12 - Search for participants, *UC12*\u003e\u003e)."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests to view more information on a specific athlete in the list."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows detailed information of the book."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. System does not find the athlete in the list."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case restarts from step 1."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2b. User gives an invalid index."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2b1. System shows an error message."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC14 - Edit a specific participant"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User views a specific athlete (\u003c\u003cUse case: UC13 - View a specific participant, *UC13*\u003e\u003e)"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests certain data about the athlete to be updated."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows success message."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. User gives invalid data."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC15 - Disqualify a specific participant"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User views a specific participant (\u003c\u003cUse case: UC13 - View a specific participant, *UC13*\u003e\u003e)"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests for a particular athlete to be disqualified from the competition."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows success message."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC16 - Call for next participant in lifting order"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests for next athlete to attempt lift."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. System shows athlete that is lifting next."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. User updates system after athlete attempts lift."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "4. System shows success message."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. No more participants in lifting order."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC16 - Exit competition"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests to exit competition mode."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. System exits competition mode."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC16 - Finalize competition"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests to finalize competition data."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. System finalizes competition and prevents any further updating of the competition data."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. There are still participants that have not finished their lifts"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should come with automated unit tests and open source code."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should come with a user guide and a developer guide."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should favor \u003c\u003cdos-style-commands,DOS style commands\u003e\u003e over Unix-style commands."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should be intuitive such that a new user can learn to search and organize a powerlifting competition within 10 minutes."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Instructions for Manual Testing (To Do)"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "belbel98": 157,
      "HoWeiChin": 82,
      "-": 377,
      "ooimingsheng": 390
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d PowerLifting Competition Coordinator- User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T11-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "By: `Team CS2103-T11`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "A powerlifting competition/meet consists of 3 lifts, the Squat, Bench and Deadlift. With 3 attempts, athletes will try to outdo and challenge themselves and lift as heavy as they can."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "This software is for organisers who organise powerlifting competitions. To facilitate the ease of data-entry, we have provided a command line interface that is augmented with a Graphical User Interface to help them better administer powerlifting competitions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d Powerlifting Background: Read this if you are new to powerlifting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d What is Powerlifting?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Powerlifting athletes compete in 3 events: The Squat, The Deadlift and The Bench Press."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "For each event, all athletes have 3 tries: they declare a weight which they want to attempt for each try."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example: John declares the following 3 weights for the 1st, 2nd and 3rd attempt of the squat respectively: 100kg, 150kg, 200kg."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "The athletes will usually compete in the different events and perform all 3 attempts for an event in the following order:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "The Squat, The Bench Press and finally, The Deadlift."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d How are scores computed for Powerlifting?"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Suppose that John declares 100kg for the 1st attempt of the squat."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "If he succeeds in clearing the 1st attempt, 100kg will be considered for the overall score for the squat event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Consequently, if John declares 200kg for the 2nd attempt of the squat and succeeds in clearing that attempt, 200kg will be considered for the overall score for the squat event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "For each event, an athlete obtains a score which is the maximum weight of the 3 attempts."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example: Suppose John fails the 3rd attempt, the weight he has declared for that attempt will not be considered for the overall score."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "So, the John\u0027s final score for the squat attempt is max(200kg, 100kg), which is 200kg."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d How is the overall score determined for Powerlifting?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "For each athlete, just sum the maximum weight obtained for each event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Suppose John has the following results:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "The maximum weight for squat: 200kg"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "The maximum weight for bench press: 150kg"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "The maximum weight for deadlift: 300kg"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "The total score for John: 200kg + 150kg + 300kg \u003d 650kg"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d How are winners determined for Powerlifting?"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Just find which athlete has the highest overall score."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Download the software from our git repo."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Ensure Java 11 is downloaded into your machine."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Open application and maximize window if you cannot see the entire screen fully"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "as shown in the picture below."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "image::Ui.PNG[width\u003d\"790\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Note that Powerlifting Coordinator has different commands for different contexts."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  There are only two contexts: During Competition (In-session) and Outside of Competition (Out-session)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d Context: Outside Of Competition (Out-session)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d Commands related to competition"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Commands related to managing competitions outside of a competition setting shall be introduced first."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a new competition: addCompetition"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `addCompetition n/COMPETITION NAME startDate/START DATE OF COMPETITION endDate/END DATE OF COMPETITION`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "`addCompetition n/IPF World Championships startDate/12/02/1995 endDate/15/02/1995`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an existing competition: deleteCompetition"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Deletes the competition identified by the index number, used in Competition list (shown in the GUI)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `deleteCompetition INDEX`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "`deleteCompetition 1`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Editing information of a competition: `editCompetition`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Edits the details of the competition identified by the index number, used in the Competition list (shown in the GUI)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Existing values will be overwritten by the input values."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "In addition to INDEX, you must supply a value for at least one of the following fields:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "1. COMPETITION NAME"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "2. START DATE OF COMPETITION"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "3. END DATE OF COMPETITION"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `editCompetition INDEX (must be a positive integer) [n/COMPETITION NAME] [startDate/START DATE OF COMPETITION] [endDate/END DATE OF COMPETITION]`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "1.When all fields are supplied:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* `editCompetition 1 n/IPF World Championships startDate/12/02/1995 endDate/15/02/1995`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "2.When only 1 field is supplied:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* `editCompetition 1 n/IPF World Championships`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `editCompetition 1 endDate/15/02/1995`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all records of current and past competitions: listCompetition"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "This command has no parameters"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `listCompetition`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d Commands related to person (athlete)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Commands related to managing persons (athletes) outside of a competition setting shall be introduced now."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a new person: `addPerson`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `addPerson n/NAME dob/DATE OF BIRTH g/GENDER`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `addPerson n/John Doe dob/12/02/1995 g/male`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an existing person: `deletePerson`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Deletes the person identified by the index number, used in Person list (shown in the GUI)."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `deletePerson INDEX`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `deletePerson 1`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Editing information of an existing person: `editPerson`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Edits the details of the person identified by the index number, used in the Person list (shown in the GUI)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Existing values will be overwritten by the input values."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "In addition to INDEX, you must supply a value for at least one of the following fields:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "1. NAME"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "2. DATEOFBIRTH"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "3. GENDER"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `editPerson INDEX (must be a positive integer) [n/NAME] [dob/DATEOFBIRTH] [g/GENDER]`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "1.When all fields are supplied:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `editPerson 1 n/John Doe dob/12/02/1995 g/MALE`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "2.When only 1 field is supplied:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `editPerson 1 n/John Doe`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `editPerson 1 dob/12/02/1995`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Finding person(s): `findPerson`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Finds all persons whose names contain any of the specified keywords (case-insensitive) and displays them as a numerically ordered list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `findPerson [KEYWORD 1] [KEYWORD 2] ... [KEYWORD N]`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Find Alex Yeoh only:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `findPerson Alex`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Find Alex Yeoh only:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `findPerson alex`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Find Alex Yeoh only:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `findPerson yeoh`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Find Alex Yeoh and Bernice Yu:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `findPerson yeoh yu`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all existing persons: `listPerson`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `listPerson`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d Commands related to participation (linking persons and competitions together)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Commands related to managing persons participating in competitions will be introduced now."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a new participation: `addParticipation`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Adds an existing person displayed in the Person list on the user interface into an"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "existing competition displayed in the Competition list on the user interface."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "User also needs to supply 3 weight attempts for each of the following events:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "1. Squat"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "2. Bench"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "3. Deadlift"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `addParticipation n/Athlete Name c/Competition Name s/S1/S2/S3 b/B1/B2/B3 d/D1/D2/D3`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `addParticipation n/Ho c/NUS 2022 s/100/101/102 b/300/400/500 d/1000/2000/3000`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Note: S1 means the 1st attempted weight for the Squat and so on."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all persons who are participating in all competitions or for one competition: `listParticipation`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Note that the user can choose to provide a competition name or not."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `listParticipation c/COMPETITION_NAME`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "To display all persons for all competitions:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `listParticipation`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "To display all persons for NUS 2022 competition only:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* `listParticipation c/NUS 2022`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an existing participation: `deleteParticipation`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Deletes the participation identified by the index number, used in Participation list (shown in the GUI)."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `deleteParticipation INDEX`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* `deleteParticipation 2`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d Auxiliary commands"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Cleaning entire data from the system: `clear`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Removes all persons, participations and competitions information from the system"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting and closing the GUI: `exit`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Showing help instructions: `help`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Display URL to this User Guide to teach users how to use the appropriate commands for Outside Of Competition."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Showing overall ranking: `overallRank`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Sorts and displays ranking of athletes according to the amount of times they are the overall champions for any competition."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `overallRank`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Starting a competition event along with its competing athletes (person): `startSession`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Only display athletes who are participating for a specified competition."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `startSession COMPETITION NAME`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* `startSession NUS 2022`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d Context: During Competition (In-session)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d Handling Competition During a Competition event"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "This feature handles the entire flow of each session during Meet Day. It allows event"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "organisers to submit a person(athlete)’s Squat, Bench, Deadlift attempts, as well as the"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "success of their lifts. It will show the relevant information to prepare for the"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "athletes lift (displaying name, weight, etc). The flow of events, and the commands to"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "facilitate the competition session will be presented in order below:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "This feature handles the entire flow of each session during Meet Day. It allows event organisers to submit a person’s Squat, Bench, Deadlift attempts, as well as the success of their lifts. It will show the relevant information to prepare for the athletes lift (displaying name, weight, etc)."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The flow of events, and the commands to facilitate the competition session will be presented in order below:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Get the next lifter in line: `next`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Retrieves the next lifter according to weight lifted for that attempt, the weights he/she is going for that particular lift and attempt."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "belbel98"
        },
        "content": "If there are no more attempts to be made by any lifter, this command will trigger the end of the competition."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format/Example: `next`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Updating success or failure of a lift: `lift`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Updates whether the person (athlete) succeeds in his/her attempt, or fails it."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "The lift updated will be the one that was just called up."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `lift Y/N`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `lift N`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `lift Y`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Getting the rank of a person (athlete) for a given competition: `rank`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Retrieves the rank of a person relative other competitors in the competition."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `rank n/NAME`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `rank n/Ho`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Getting the rank of a person (athlete) for a given competition, using a specific criterion: `ranklist`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Retrieves the rank of a person relative other competitors in the competition using a condition."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Available conditions are:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "1. Squat"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "2. Deadlift"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "3. Bench Press"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "4. Overall (overall score)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `ranklist by/CRITERION`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `ranklist by/overall`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `ranklist by/squat`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Ending and exiting the session `endSession`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Ends the session, and shifts the user back to the out-of-session state."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "belbel98"
        },
        "content": "This command is also automatically triggered when a competition has ended,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "belbel98"
        },
        "content": "which means there are no more attempts for any lifters."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `endSession`"
      }
    ],
    "authorContributionMap": {
      "belbel98": 37,
      "HoWeiChin": 186,
      "-": 83,
      "ooimingsheng": 15
    }
  },
  {
    "path": "docs/team/ooimingsheng.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d Ooi Ming Sheng- Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d PROJECT: Powerlifting Competition Coordinator"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Powerlifting Competition Coordinator is a free application for powerlifting competition event organizers"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "that is simple, fast, and easy to use. It is targeted at organizers of small to medium sized powerlifting"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "competitions who require a hassle-free way of managing and tracking the lifts of participants in and out"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "of the powerlifting competitions. During competition mode, the system has real time maintenance of athlete"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "rankings within their respective weight classes allowing the organizer track the participants\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "standings at all times throughout the duration of the competition. The user interacts with it using a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 18 kLoC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* *Major enhancement 1*: added *the ability to support the many-to-many relationships between the competitions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "and persons*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** What it does: allows the user to create participations (i.e. a person takes part in a particular"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "competition) that can be store and retrieved from the JSON storage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** Justification: This feature improves the product significantly because a user can have flexibility over"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "the number of people participating in a particular competition while persisting their respective"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "competition results in the JSON storage for future reference and use. Data of athletes over various"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "competitions can be tracked and used to track performance across time and competition."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** Highlights: Given the original architecture of address book, saving association classes was not"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "immediately enabled as the storage that was intended was mainly for entities"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "with a one-to-one/one-to-many relationship and definitely not a many-to-many relationship."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "It required an in-depth analysis of design alternatives, one of which was to possible store the data in XML form, since using a"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "database was not allowed for the project. I did not user the XML storage as it would require too"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "much time to implement. The modification of the JSON storage was still challenging as it required a deep"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "understanding of the underlying JSON storage infrastructure and how everything was saved in order to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "be able to save the association class properly."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* *Major enhancement 2*: added *the ability to enter and exit a competition session (i.e. context switching)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** What it does: controls user actions/commands depending on the context that the application is in (i.e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "whether a competition is in ongoing/in-session)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** Justification: This feature improves the product significantly even though we have actually limited"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "user actions depending on the context of the application. The control of the user flow actually focuses"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "the user to performing the right actions during the competition session and hence, optimizes the user to perform"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "the necessary commands on the application to record the results of the competition as efficiently as possible."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future as the context"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "limits what kind of commands can be done at any one point of time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This required an in-depth analysis of understanding of how powerlifting competitions function and how the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "user flow could be optimized for efficient recording of competition results, especially since delays in powerlifting"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "competitions can be very unprofessional and damaging to the reputation of the user who is organizing this event."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* *Major enhancement 3*: added *the ability to give a ranking of the athletes using different ranking methods"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** What it does: allows the user to list the participations in a selected competition in a sorted order"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "as determined by the rank method (i.e. overall score or maximum weight lifted for a given exercise like"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "bench press or squat)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** Justification: This feature improves the product significantly as competitions are only relevant if we"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "can determine a winner and track relative performance. This feature is therefore central to the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "as it gives the user and therefore, the participants of the competition knowledge of their standings among their fellow"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "competitors. This encourages their competitive spirit and adds to the excitement of the competition."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** Highlights: This enhancement gives extreme flexibility and extensibility to future ranking methods"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "that need to be added in the future as the developer can just add a new ranking methods and scoring function in"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "order to use this new ranking methods to order the participants."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* *Minor enhancement*: Used java generics to support the various lists of entities and is therefore extensible"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "for additional entities to be added should a developer require"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* *Minor enhancement*: Updated the user interface to support 3 different lists"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*** Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*** Managed the integration of the various features from other group members"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*** Updated the layout to the application (Pull request https://github.com[#59])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*** Wrote tests for new features to increase coverage (Pull requests https://github.com[#127])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*** Updated the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*** Integrated Travis and Netlify to the team repo for Continuous integration purposes"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d PROJECT: NUSanswers"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This application was written on a react frontend and an elixir-phoenix backend. This application"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "was created with the intention of creating an online platform for NUS exam questions to be posted"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "there and allow for a crowd sourcing of answers to NUS exam questions which are not released to"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "the student body. Please refer to https://github.com/cs3216/a3-mobile-cloud-group-08 for more information."
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 130
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "-": 422,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/main/java/seedu/system/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/main/java/seedu/system/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.storage.JsonSystemStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.storage.SystemStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.ui.Ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.ui.UiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Data ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        SystemStorage systemStorage \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSystemStorage("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                userPrefs.getPersonDataFilePath(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                userPrefs.getCompetitionDataFilePath(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                userPrefs.getParticipationDataFilePath()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        storage \u003d new StorageManager(systemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e initialPersonData \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Optional\u003cReadOnlyData\u003cPerson\u003e\u003e personDataOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e competitionDataOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e initialCompetitionData \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e participationDataOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cParticipation\u003e initialParticipationData \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            personDataOptional \u003d storage.readPersonData();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            competitionDataOptional \u003d storage.readCompetitionData();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (personDataOptional.isPresent() \u0026\u0026 competitionDataOptional.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                initialPersonData \u003d personDataOptional.get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                initialCompetitionData \u003d competitionDataOptional.get();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                participationDataOptional \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    storage.readParticipationData(personDataOptional.get(), initialCompetitionData);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                if (participationDataOptional.isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    initialParticipationData \u003d participationDataOptional.get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                logger.info(\"Not all data files were found. Will be starting with a sample Data\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                initialPersonData \u003d SampleDataUtil.getSamplePersonData();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                initialCompetitionData \u003d SampleDataUtil.getSampleCompetitionData();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                initialParticipationData \u003d SampleDataUtil.getSampleParticipationData(initialPersonData,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    initialCompetitionData);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Data\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            initialPersonData \u003d new Data();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            initialCompetitionData \u003d new Data();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            initialParticipationData \u003d new Data();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Data\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            initialPersonData \u003d new Data();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            initialCompetitionData \u003d new Data();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            initialParticipationData \u003d new Data();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new ModelManager(initialPersonData, initialCompetitionData, initialParticipationData, userPrefs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Data\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.info(\"Starting Data \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 143,
      "ooimingsheng": 70
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_INVALID_COMPETITION_DISPLAYED_INDEX \u003d \"The competition index provided is \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_INVALID_PARTICIPATION_DISPLAYED_INDEX \u003d \"The competition index provided is \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + \"invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_INVALID_START_END_DATES \u003d \"The start date is after end date.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSONS_DOB \u003d \"Person must be born already!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_NO_ONGOING_COMPETITION_SESSION \u003d \"There is no ongoing competition session.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + \" Please start one before making commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_INVALID_NEGATIVE_ATTEMPT_WEIGHT \u003d \"Negative attempt weights are not allowed.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 5,
      "HoWeiChin": 4,
      "-": 12,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 140,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/main/java/seedu/system/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns the Data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @see seedu.system.model.Model#getPersons()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ReadOnlyData getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    ObservableList\u003cCompetition\u003e getFilteredCompetitionList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of participations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    ObservableList\u003cParticipation\u003e getFilteredParticipationList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 8,
      "HoWeiChin": 2,
      "-": 39,
      "ooimingsheng": 12
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.SystemParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final SystemParser systemParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        systemParser \u003d new SystemParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Command command \u003d systemParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            storage.savePersonData(model.getPersons());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            storage.saveCompetitionData(model.getCompetitions());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            storage.saveParticipationData(model.getParticipations());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ReadOnlyData getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return model.getPersons();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public ObservableList\u003cCompetition\u003e getFilteredCompetitionList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return model.getFilteredCompetitionList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ObservableList\u003cParticipation\u003e getFilteredParticipationList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return model.getFilteredParticipationList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return model.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 5,
      "HoWeiChin": 7,
      "-": 59,
      "ooimingsheng": 20
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 1,
      "-": 16,
      "ooimingsheng": 4
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /** Command type that produced the command result. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, CommandType commandType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.commandType \u003d CommandType.GENERAL;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and  {@code commandType},"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult(String feedbackToUser, CommandType commandType) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "ooimingsheng": 27
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/CommandType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents different categories of commands. Intended for varying the display in v2.0."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    COMPETITION,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    PARTICIPATION,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    PERSON,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    GENERAL"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 12
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/RankMethod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents different ranking methods of participants in a competition."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public enum RankMethod {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    BENCH(\"bench\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    DEADLIFT(\"deadlift\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    SQUAT(\"squat\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    OVERALL(\"overall\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \"Rank method should be provided as either bench, deadlift, squat or overall\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private RankMethod(String name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Checks {@code gender} corresponds to a  format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static boolean isValidRankMethod(String rankMethod) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return rankMethod.toLowerCase().equals(BENCH.toString())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || rankMethod.toLowerCase().equals(SQUAT.toString())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || rankMethod.toLowerCase().equals(DEADLIFT.toString())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || rankMethod.toLowerCase().equals(OVERALL.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static RankMethod getRankMethodCorrespondingToName(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (name.equals((BENCH.toString()))) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return BENCH;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } else if (name.equals((SQUAT.toString()))) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return SQUAT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } else if (name.equals((DEADLIFT.toString()))) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return DEADLIFT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } else if (name.equals((OVERALL.toString()))) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return OVERALL;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 51
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/comparators/OverallScoreComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Compares two participations for sorting"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class OverallScoreComparator implements Comparator\u003cParticipation\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int compare(Participation p1, Participation p2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return p2.getTotalScore() - p1.getTotalScore();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 16
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/comparators/ParticipationRankMethodComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.RankMethod;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Compares two participations for ordering, where the participation with the higher maximum score for a particular"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * lift or overall score goes earlier in the ordering. The method of calculating the score depends on the rank method"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * inputted."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class ParticipationRankMethodComparator implements Comparator\u003cParticipation\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final RankMethod rankMethod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ParticipationRankMethodComparator(RankMethod rankMethod) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.rankMethod \u003d rankMethod;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int compare(Participation p1, Participation p2) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return p2.getScore(rankMethod) - p1.getScore(rankMethod);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 26
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/exceptions/InSessionCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents an error which occurs when a {@link Command} that should only be called outside a competition session"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * is called during a competition session."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class InSessionCommandException extends CommandException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public InSessionCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        super(\"Invalid: This command should only be called outside of a competition session.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 11
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/exceptions/OutOfSessionCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents an error which occurs when a {@link Command} that should only be called during a competition session"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * is called outside a competition session."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class OutOfSessionCommandException extends CommandException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public OutOfSessionCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        super(\"Invalid: This command should only be called during a competition session.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 11
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/insession/AttemptLiftedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.insession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.OutOfSessionCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.attempt.exceptions.AttemptHasBeenAttemptedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.ParticipationAttempt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.IncompleteAttemptSubmissionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.NoOngoingSessionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Records and updates the success of failure of the attempt that was lifted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class AttemptLiftedCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lift\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PARTICIPATION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + \" Y/N (where \u0027Y\u0027 represents success and \u0027N\u0027 represents failure)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_NEXT_LIFTER \u003d \"The next lifter is \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final boolean isSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ParticipationAttempt next \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ParticipationAttempt following \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public AttemptLiftedCommand(boolean isSuccess) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.isSuccess \u003d isSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Executes AttemptLiftedCommand and returns the result message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws OutOfSessionCommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new OutOfSessionCommandException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Participation participation;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            following \u003d model.getFollowingLifter();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            next \u003d model.makeAttempt();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            participation \u003d next.getParticipation();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            Participation updatedPart \u003d participation;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            updatedPart.updateAttempt(next.getAttemptIndex(), isSuccess);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            model.setParticipation(participation, updatedPart);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (NoOngoingSessionException | IncompleteAttemptSubmissionException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new CommandResult(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (AttemptHasBeenAttemptedException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new CommandResult((e.getMessage() + MESSAGE_NEXT_LIFTER + following.toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return new CommandResult(String.format(\"%S%s%n%s\", next.toString(), getSuccessOrFailure(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                followingAttemptToString()), COMMAND_TYPE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String getSuccessOrFailure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (isSuccess) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return \"  is a success.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return \"  is a failure.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns the information for the following attempt and the lifter."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String followingAttemptToString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (following \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return \"This is the last attempt for the competition.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return MESSAGE_NEXT_LIFTER + following.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 69,
      "ooimingsheng": 18
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/insession/EndSessionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.system.logic.commands.insession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.model.Model.PREDICATE_SHOW_ALL_COMPETITIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.model.Model.PREDICATE_SHOW_ALL_PARTICIPATIONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Ends the session, and goes out of session."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class EndSessionCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"endSession\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \" session has ended.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Competition compInSession \u003d model.getOngoingCompetition();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.updateFilteredParticipationList(PREDICATE_SHOW_ALL_PARTICIPATIONS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.updateFilteredCompetitionList(PREDICATE_SHOW_ALL_COMPETITIONS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        model.endSession();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return new CommandResult(compInSession + MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 34,
      "ooimingsheng": 4
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/insession/NextLifterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.insession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.OutOfSessionCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.ParticipationAttempt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.CompetitionEndedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.IncompleteAttemptSubmissionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.NoOngoingSessionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.PreviousAttemptNotDoneException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Gets the next lifter in line to make his/her attempt."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class NextLifterCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"next\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PARTICIPATION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_NEXT_LIFTER \u003d \"The next lifter is \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ParticipationAttempt next \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ParticipationAttempt following \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Executes the NextLifterCommand and returns the result message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws OutOfSessionCommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new OutOfSessionCommandException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            next \u003d model.getNextLifter();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            following \u003d model.getFollowingLifter();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (NoOngoingSessionException | IncompleteAttemptSubmissionException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new CommandResult(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (PreviousAttemptNotDoneException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new CommandResult(e.getMessage() + followingAttemptToString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (CompetitionEndedException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new CommandResult(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(String.format(\"%S%n%s\", next.toString(), followingAttemptToString()), COMMAND_TYPE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns the information for the following attempt and the lifter."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String followingAttemptToString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (following \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return \"This is the last attempt for the competition.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return MESSAGE_NEXT_LIFTER + following.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 43,
      "ooimingsheng": 19
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/insession/RankCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.insession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.comparators.OverallScoreComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.OutOfSessionCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Lists the position of an athlete for a specific competition."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class RankCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rank\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PARTICIPATION;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": lists an athlete\u0027s position for a competition. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_NAME + \"ATHLETE NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + PREFIX_NAME + \"John \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_COMPETITION_NOT_FOUND \u003d \"The competition with the given name does not exist : \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_PARTICIPATION_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \"The competition in session does not have a participation of an athlete with the given name: \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \" Athlete: %1$s \\n Competition: %2$s \\n Rank: %3$d \\n Total Score: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"%4$d \" + \"\\n Max Squat: %5$s \\n Max Bench Press: %6$s \\n Max Deadlift: %7$s \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final Name athleteName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //private final MethodOfRanking methodOfRanking;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Creates a RankCommand which lists an athlete\u0027s position for a competition"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @param athleteName name of athlete"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public RankCommand(Name athleteName) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(athleteName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        //requireNonNull(lift);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.athleteName \u003d athleteName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        //this.methodOfRanking \u003d methodOfRanking;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws OutOfSessionCommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new OutOfSessionCommandException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Competition competition \u003d model.getOngoingCompetition();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Participation participation \u003d getParticipationOfAthlete(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (participation \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new CommandResult(MESSAGE_PARTICIPATION_NOT_FOUND + athleteName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Person athlete \u003d participation.getPerson();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Predicate\u003cParticipation\u003e filterByCompetition \u003d p -\u003e p.getCompetition().isSameElement(competition);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        model.updateFilteredParticipationList(filterByCompetition);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        List\u003cParticipation\u003e participationList \u003d model.getFilteredParticipationList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        List\u003cParticipation\u003e pLists \u003d copy(participationList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        pLists.sort(new OverallScoreComparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        int rank \u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        int totalScore \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String[] threeLiftScore \u003d new String[3];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        for (Participation p : pLists) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            if (p.getPerson().isSameElement(athlete)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                totalScore +\u003d p.getTotalScore();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                threeLiftScore \u003d p.getThreeLiftScore().split(\"/\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            rank +\u003d 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, athleteName, competition.getName(), rank, totalScore,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                threeLiftScore[0], threeLiftScore[1], threeLiftScore[2]), COMMAND_TYPE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Copies an obs list into a normal java list for sorting purposes"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private List\u003cParticipation\u003e copy (List\u003cParticipation\u003e participationList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        List\u003cParticipation\u003e pLists \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        for (Participation p : participationList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            pLists.add(p);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return pLists;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Filters for participation with athleteName and the session Competition"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @return Person object if a Participation contains person with athleteName and competition with competitionName"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Participation getParticipationOfAthlete(Model model) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        List\u003cParticipation\u003e participationList \u003d model.getFilteredParticipationList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Participation participation \u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Competition sessionCompetition \u003d model.getOngoingCompetition();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        for (Participation p : participationList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            boolean isSameAthleteName \u003d p.getPerson().getName().equals(this.athleteName);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            boolean isSameCompName \u003d p.getCompetition().equals(sessionCompetition);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            if (isSameAthleteName \u0026\u0026 isSameCompName) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                participation \u003d p;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participation;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 89,
      "ooimingsheng": 41
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/insession/RanklistCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.insession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_RANK_METHOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.model.Model.PREDICATE_SHOW_ALL_PARTICIPATIONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.RankMethod;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.comparators.ParticipationRankMethodComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.OutOfSessionCommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Lists the athletes in order by some stipulated ranking method for a specific competition."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class RanklistCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ranklist\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PARTICIPATION;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        COMMAND_WORD + \": ranks all athletes in a competition by the chosen ranking method.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        + \"Parameters: \" + PREFIX_RANK_METHOD + \"RANKING METHOD \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_RANK_METHOD + \" overall \\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_RANK_METHOD_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \"The ranking method with the given name does not exist : \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Ranking of athletes by %1$s score in competition %2$s:\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final RankMethod rankMethod;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Creates an AddPersonCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public RanklistCommand(RankMethod rankMethod) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(rankMethod);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.rankMethod \u003d rankMethod;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws OutOfSessionCommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new OutOfSessionCommandException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Competition onGoingCompetition \u003d model.getOngoingCompetition();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.updateFilteredParticipationList(PREDICATE_SHOW_ALL_PARTICIPATIONS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Predicate\u003cParticipation\u003e filterByCompetition \u003d p -\u003e p.getCompetition().equals(onGoingCompetition);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.updateFilteredParticipationList(filterByCompetition);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ArrayList\u003cParticipation\u003e participationList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Participation participation : model.getFilteredParticipationList()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            participationList.add(participation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Comparator\u003cParticipation\u003e comparator \u003d new ParticipationRankMethodComparator(rankMethod);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        participationList.sort(comparator);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String message \u003d MESSAGE_SUCCESS + \"\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (int i \u003d 0; i \u003c participationList.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Participation participation \u003d participationList.get(i);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            int score \u003d participation.getScore(rankMethod);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Person personParticipating \u003d participation.getPerson();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            message +\u003d (i + 1) + \". \" + personParticipating.getName() + \" (Score: \" + score + \")\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(String.format(message, rankMethod, onGoingCompetition), COMMAND_TYPE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || (other instanceof RanklistCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            \u0026\u0026 rankMethod.equals(((RanklistCommand) other).rankMethod));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 89
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/AddCompetitionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Adds a Competition to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class AddCompetitionCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addCompetition\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.COMPETITION;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a competition to the address book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + PREFIX_NAME + \"COMPETITION NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + PREFIX_START_DATE + \"START DATE OF COMPETITION \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + PREFIX_END_DATE + \"END DATE OF COMPETITION \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + PREFIX_NAME + \"IPF World\u0027s \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + PREFIX_START_DATE + \"12/02/1995 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + PREFIX_END_DATE + \"15/02/1995 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New competition added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COMPETITION \u003d \"This competition already exists in the address book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final Competition toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Creates an CreateComp to add the specified {@code newCompetition}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public AddCompetitionCommand(Competition newCompetition) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(newCompetition);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        toAdd \u003d newCompetition;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (model.hasCompetition(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_COMPETITION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.addCompetition(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), COMMAND_TYPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                || (other instanceof AddCompetitionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCompetitionCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 74
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/AddParticipationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_BENCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_COMP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_DEADLIFT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_SQUAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Add a new Participation that is associated with a Person and a Competition,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * and his/her 9 attempts for the competition."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class AddParticipationCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addParticipation\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PARTICIPATION;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_ATHLETE_NOT_FOUND \u003d \"The athlete with the given name does not exist: \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_COMPETITION_NOT_FOUND \u003d \"The competition with the given name does not exist : \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PARTICIPATION \u003d \"This participation already exists.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            \" is added to the participation list for competition \"; // athlete name MESSAGE_SUCCESS competition"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + PREFIX_NAME + \"Athlete_Name \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + PREFIX_COMP + \"Competition_Name \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + PREFIX_SQUAT + \"S1/S2/S3 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + PREFIX_BENCH + \"B1/B2/B3 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + PREFIX_DEADLIFT + \"D1/D2/D3 \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Name athleteName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Name competitionName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final List\u003cInteger\u003e nineAttempts;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public AddParticipationCommand(Name athleteName, Name compName, List\u003cInteger\u003e attemptWeights) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(athleteName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(compName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireAllNonNull(attemptWeights);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.athleteName \u003d athleteName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.competitionName \u003d compName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.nineAttempts \u003d attemptWeights;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws InSessionCommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Person athlete \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Competition competition \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // check if person/athlete exists"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (Person p : personList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (p.getName().equals(athleteName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                athlete \u003d p;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (athlete \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new CommandResult(MESSAGE_ATHLETE_NOT_FOUND + athleteName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // check if competition exits"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        List\u003cCompetition\u003e competitionList \u003d model.getFilteredCompetitionList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (Competition c : competitionList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (c.getName().equals(competitionName)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                competition \u003d c;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (competition \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new CommandResult(MESSAGE_COMPETITION_NOT_FOUND + competitionName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // since both person and competition are present, create the associated participation object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Participation toAdd \u003d new Participation(athlete, competition);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        toAdd.addAttempts(nineAttempts);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (model.hasParticipation(toAdd)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_PARTICIPATION);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        model.addParticipation(toAdd);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(athleteName + MESSAGE_SUCCESS + competitionName, COMMAND_TYPE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 73,
      "ooimingsheng": 35
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/AddPersonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "//@@author HoWeiChin"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Adds a person to the system."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class AddPersonCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addPerson\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PERSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        + PREFIX_DOB + \"DATE OF BIRTH \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        + PREFIX_DOB + \"12/02/1995 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        + PREFIX_GENDER + \"male \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Creates an AddPersonCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public AddPersonCommand(Person person) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), COMMAND_TYPE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            || (other instanceof AddPersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddPersonCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 54,
      "-": 3,
      "ooimingsheng": 11
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Clears the the participation, person and competition data in the system."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.GENERAL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws InSessionCommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.setParticipations(new Data());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.setPersons(new Data());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.setCompetitions(new Data());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || other instanceof ClearCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 44
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/DeleteCompetitionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Deletes a competition identified using it\u0027s displayed index from the system."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class DeleteCompetitionCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteCompetition\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.COMPETITION;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + \": Deletes the competition identified by the index number used in the displayed competition list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_DELETE_COMPETITION_SUCCESS \u003d \"Deleted competition: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public DeleteCompetitionCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        List\u003cCompetition\u003e lastShownList \u003d model.getFilteredCompetitionList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMPETITION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Competition compToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.deleteCompetition(compToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_COMPETITION_SUCCESS, compToDelete), COMMAND_TYPE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                || (other instanceof DeleteCompetitionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCompetitionCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 63
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/DeleteParticipationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Deletes a participation identified using it\u0027s displayed index from the system."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class DeleteParticipationCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteParticipation\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PARTICIPATION;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + \": Deletes the participation identified by the index number used in the displayed competition list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_DELETE_PARTICIPATION_SUCCESS \u003d \"Deleted Competition: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public DeleteParticipationCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        List\u003cParticipation\u003e lastShownList \u003d model.getFilteredParticipationList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PARTICIPATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Participation partToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        model.deleteParticipation(partToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PARTICIPATION_SUCCESS, partToDelete), COMMAND_TYPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || (other instanceof DeleteParticipationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteParticipationCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 54,
      "ooimingsheng": 8
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/DeletePersonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "//@@author HoWeiChin"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the system."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class DeletePersonCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletePerson\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PERSON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public DeletePersonCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete), COMMAND_TYPE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                || (other instanceof DeletePersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeletePersonCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 46,
      "-": 5,
      "ooimingsheng": 10
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/EditCompetitionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_START_END_DATES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.model.Model.PREDICATE_SHOW_ALL_COMPETITIONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Edits the details of an existing competition in the system."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class EditCompetitionCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editCompetition\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.COMPETITION;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the competition identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + \"by the index number used in the displayed competition list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"COMPETITION NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START DATE OF COMPETITION] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END DATE OF COMPETITION] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + PREFIX_NAME + \"IPF World\u0027s \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + PREFIX_START_DATE + \"12/02/1995\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + PREFIX_END_DATE + \"15/02/1995\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_EDIT_COMPETITION_SUCCESS \u003d \"Edited Competition: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COMPETITION \u003d \"This competition already exists in the address book.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final EditCompetitionDescriptor editCompetitionDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param index of the competition in the filtered competition list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param editCompetitionDescriptor details to edit the competition with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public EditCompetitionCommand(Index index, EditCompetitionDescriptor editCompetitionDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(editCompetitionDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.editCompetitionDescriptor \u003d new EditCompetitionDescriptor(editCompetitionDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        List\u003cCompetition\u003e lastShownList \u003d model.getFilteredCompetitionList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMPETITION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Competition compToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Competition editedComp \u003d createEditedComp(compToEdit, editCompetitionDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!compToEdit.isSameElement(editedComp) \u0026\u0026 model.hasCompetition(editedComp)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_COMPETITION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.setCompetition(compToEdit, editedComp);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.updateFilteredCompetitionList(PREDICATE_SHOW_ALL_COMPETITIONS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_COMPETITION_SUCCESS, editedComp), COMMAND_TYPE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Creates and returns a {@code Competition} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static Competition createEditedComp(Competition compToEdit,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                                              EditCompetitionDescriptor editCompetitionDescriptor)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assert compToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Name updatedName \u003d editCompetitionDescriptor.getName().orElse(compToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        CustomDate updatedStartDate \u003d editCompetitionDescriptor.getStartDate().orElse(compToEdit.getStartDate());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        CustomDate updatedEndDate \u003d editCompetitionDescriptor.getEndDate().orElse(compToEdit.getEndDate());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        System.out.println(updatedStartDate.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        System.out.println(updatedEndDate.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!ParserUtil.isBefore(updatedStartDate, updatedEndDate)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_START_END_DATES);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new Competition(updatedName, updatedStartDate, updatedEndDate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!(other instanceof EditPersonCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        EditCompetitionCommand e \u003d (EditCompetitionCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 editCompetitionDescriptor.equals(e.editCompetitionDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Stores the details to edit a competition with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * corresponding field value of the competition."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static class EditCompetitionDescriptor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        private CustomDate startDate;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        private CustomDate endDate;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public EditCompetitionDescriptor() {}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public EditCompetitionDescriptor(EditCompetitionDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, startDate, endDate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void setStartDate(CustomDate startDate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public Optional\u003cCustomDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void setEndDate(CustomDate endDate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public Optional\u003cCustomDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (!(other instanceof EditCompetitionDescriptor)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            EditCompetitionDescriptor e \u003d (EditCompetitionDescriptor) other;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 3,
      "ooimingsheng": 199
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/EditParticipationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Edits the details of an existing person in the system. To be finished in v 2.0."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class EditParticipationCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editPerson\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PARTICIPATION;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the participation identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        + \"by the index number used in the displayed participation list.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_EDIT_PARTICIPATION_SUCCESS \u003d \"Edited participation: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PARTICIPATION \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \"This participation already exists in the address book.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Private constructor to prevent instantiation."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private EditParticipationCommand() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PARTICIPATION_SUCCESS), COMMAND_TYPE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Creates and returns a {@code Participation} with the details of {@code participationToEdit}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static Participation createEditedParticipation("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Participation participationToEdit, EditParticipationDescriptor editParticipationDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assert participationToEdit !\u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Competition updatedCompetition \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            editParticipationDescriptor.getCompetition().orElse(participationToEdit.getCompetition());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Person updatedPerson \u003d editParticipationDescriptor.getPerson().orElse(participationToEdit.getPerson());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new Participation(updatedPerson, updatedCompetition);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Creates and returns a {@code Participation} with the details of {@code participationToEdit}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * updated with the new {@code updatedPerson}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static Participation createEditedParticipation(Participation participationToEdit, Person updatedPerson) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assert participationToEdit !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assert updatedPerson !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new Participation("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            updatedPerson,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            participationToEdit.getCompetition(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            participationToEdit.getAttempts()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Creates and returns a {@code Participation} with the details of {@code participationToEdit}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * updated with the new {@code updatedCompetition}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static Participation createEditedParticipation("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Participation participationToEdit,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Competition updatedCompetition"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assert participationToEdit !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assert updatedCompetition !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new Participation("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            participationToEdit.getPerson(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            updatedCompetition,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            participationToEdit.getAttempts()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!(other instanceof EditParticipationCommand)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        EditParticipationCommand e \u003d (EditParticipationCommand) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Stores the details to edit the participation with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static class EditParticipationDescriptor {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        private Competition competition;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        private Person person;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public EditParticipationDescriptor() {}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public EditParticipationDescriptor(EditParticipationDescriptor toCopy) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            setCompetition(toCopy.competition);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            setPerson(toCopy.person);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return CollectionUtil.isAnyNonNull(competition, person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void setCompetition(Competition competition) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            this.competition \u003d competition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public Optional\u003cCompetition\u003e getCompetition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return Optional.ofNullable(competition);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void setPerson(Person person) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public Optional\u003cPerson\u003e getPerson() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return Optional.ofNullable(person);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (!(other instanceof EditParticipationDescriptor)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            EditParticipationDescriptor e \u003d (EditParticipationDescriptor) other;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return getCompetition().equals(e.getCompetition())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 getPerson().equals(e.getPerson());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 171
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/EditPersonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_PERSONS_DOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "//@@author HoWeiChin"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Edits the details of an existing person in the system."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class EditPersonCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editPerson\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"[\" + PREFIX_DOB + \"DATEOFBIRTH] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_NAME + \"John Doe\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_DOB + \"12/02/1995\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_GENDER + \"MALE\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited person: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditPersonCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!personToEdit.isSameElement(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), COMMAND_TYPE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate updatedDateOfBirth \u003d editPersonDescriptor.getDateOfBirth().orElse(personToEdit.getDateOfBirth());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate currDate \u003d CustomDate.obtainCurrentDate();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!ParserUtil.isBefore(updatedDateOfBirth, currDate)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PERSONS_DOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new Person(updatedName, updatedDateOfBirth, updatedGender);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!(other instanceof EditPersonCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditPersonCommand e \u003d (EditPersonCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        private CustomDate dateOfBirth;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            setDateOfBirth(toCopy.dateOfBirth);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, dateOfBirth, gender);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public void setDateOfBirth(CustomDate dateOfBirth) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public Optional\u003cCustomDate\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    \u0026\u0026 getDateOfBirth().equals(e.getDateOfBirth())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 181,
      "-": 6,
      "ooimingsheng": 18
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.GENERAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws InSessionCommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, COMMAND_TYPE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || other instanceof ExitCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 32
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/FindPersonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Finds and lists all persons in the system whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class FindPersonCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findPerson\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PERSON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public FindPersonCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws InSessionCommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                COMMAND_TYPE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                || (other instanceof FindPersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPersonCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "ooimingsheng": 25
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/ListCompetitionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.model.Model.PREDICATE_SHOW_ALL_COMPETITIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Lists all competitions in the system to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class ListCompetitionCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listCompetition\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.COMPETITION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all competitions\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws InSessionCommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.updateFilteredCompetitionList(PREDICATE_SHOW_ALL_COMPETITIONS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, COMMAND_TYPE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || other instanceof ListCompetitionCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 40
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/ListParticipationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_COMP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.model.Model.PREDICATE_SHOW_ALL_PARTICIPATIONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Lists all Participations for a specific competition."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class ListParticipationCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listParticipation\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PARTICIPATION;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FOR_COMPETITION \u003d \"Listed participants for competition %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FOR_ALL \u003d \"Listed all participants\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_COMP + \"Competition_Name(optional)\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_COMPETITION_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \"The competition with the given name \\\"%1$s\\\" does not exist.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Name competitionName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Creates a ListParticipationCommand which will list out all Participations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * participating in the specified competition."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param competitionName name of competition whose participants we want to list out"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ListParticipationCommand(Name competitionName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(competitionName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.competitionName \u003d competitionName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ListParticipationCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        competitionName \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws InSessionCommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (competitionName \u003d\u003d null) { // for the command without filtering competitions"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            model.updateFilteredParticipationList(PREDICATE_SHOW_ALL_PARTICIPATIONS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_FOR_ALL);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        List\u003cCompetition\u003e competitionList \u003d model.getFilteredCompetitionList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Competition competition \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (Competition c : competitionList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (c.getName().equals(competitionName)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                competition \u003d c;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (competition \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_COMPETITION_NOT_FOUND , competitionName));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Competition finalCompetition \u003d competition;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Predicate\u003cParticipation\u003e filterByCompetition \u003d p -\u003e p.getCompetition().isSameElement(finalCompetition);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        model.updateFilteredParticipationList(filterByCompetition);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS_FOR_COMPETITION , competition.getName()), COMMAND_TYPE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || other instanceof ListParticipationCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 59,
      "ooimingsheng": 38
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/ListPersonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Lists all persons in the system to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class ListPersonCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listPerson\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PERSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws InSessionCommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, COMMAND_TYPE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || other instanceof DeleteCompetitionCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 39
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/OutOfSessionHelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class OutOfSessionHelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.GENERAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws InSessionCommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, COMMAND_TYPE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "ooimingsheng": 13
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/OverallRankCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import static seedu.system.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Ranks all the persons by their total number of wins (i.e. first place finishes) among all the competitions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "public class OverallRankCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"overallRank\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.PERSON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": sorts all athletes by the number of first place wins.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all athletes ranked by their total number of wins:\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public CommandResult execute(Model model) throws InSessionCommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        ArrayList\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        for (Person person : model.getFilteredPersonList()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            personList.add(person);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        personList.sort(new OverallRankComparator(model));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        String message \u003d MESSAGE_SUCCESS + \"\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        for (int i \u003d 0; i \u003c personList.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            Person person \u003d personList.get(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            message +\u003d (i + 1) + \". \" + person.getName() + \" (Wins: \" + model.getTotalWins(person) + \")\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return new CommandResult(message, COMMAND_TYPE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * A comparator that imposes a total ordering on a collection of persons by a person\u0027s total wins of among"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * the competitions in the model in descending order (i.e. person with highest wins comes first)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public static class OverallRankComparator implements Comparator\u003cPerson\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        private Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        public OverallRankComparator(Model model) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            this.model \u003d model;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        public int compare(Person p1, Person p2) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            return model.getTotalWins(p2) - model.getTotalWins(p1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 65,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/commands/outofsession/StartSessionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_COMP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.InSessionCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.OngoingSessionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Loads a new session for a specific competition with its participations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class StartSessionCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"startSession\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CommandType COMMAND_TYPE \u003d CommandType.GENERAL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \" session has started.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + \"Enter \u0027next\u0027 to get the next lifter in line.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + \"Enter \u0027rank\u0027 or \u0027ranklist\u0027 to get the ranks of the participation/competition.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_COMP + \"Competition_Name\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_COMPETITION_NOT_FOUND \u003d \"The competition with the given name does not exist : \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Name competitionName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public StartSessionCommand(Name competition) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(competition);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.competitionName \u003d competition;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CommandResult execute(Model model) throws InSessionCommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (model.hasOngoingSession()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new InSessionCommandException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        List\u003cCompetition\u003e competitionList \u003d model.getFilteredCompetitionList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Competition competition \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (Competition c : competitionList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (c.getName().equals(competitionName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                competition \u003d c;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (competition \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new CommandResult(MESSAGE_COMPETITION_NOT_FOUND + competitionName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            Competition finalCompetition \u003d competition;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            Predicate\u003cParticipation\u003e filterByCompetition \u003d p -\u003e p.getCompetition().isSameElement(finalCompetition);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            model.updateFilteredParticipationList(filterByCompetition);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Predicate\u003cCompetition\u003e filterCompetitionsByCompetition \u003d c -\u003e c.isSameElement(finalCompetition);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.updateFilteredCompetitionList(filterCompetitionsByCompetition);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            ObservableList\u003cParticipation\u003e partForThisComp \u003d model.getFilteredParticipationList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.startSession(finalCompetition, partForThisComp);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (OngoingSessionException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new CommandResult(e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return new CommandResult(competitionName + MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || other instanceof StartSessionCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 58,
      "ooimingsheng": 32
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 147,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final Prefix PREFIX_COMP \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Prefix PREFIX_DOB \u003d new Prefix(\"dob/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"startDate/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"endDate/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final Prefix PREFIX_LIFT \u003d new Prefix(\"lift/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final Prefix PREFIX_SQUAT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final Prefix PREFIX_BENCH \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final Prefix PREFIX_DEADLIFT \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final Prefix PREFIX_RANK_METHOD \u003d new Prefix(\"by/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 4,
      "HoWeiChin": 4,
      "-": 10,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.RankMethod;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Gender;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Parses a {@code String date} into a {@code date}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @return CustomeDate object with date trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @throws ParseException if the given {@code dateOfBirth} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static CustomDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!CustomDate.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new ParseException(CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new CustomDate(trimmedDate.toLowerCase());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Parses a {@code String gender} into an {@code Gender}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return Gender.getGenderCorrespondingToName(gender.toLowerCase());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Parses a {@code String rankMethod} into an {@code RankMethod}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws ParseException if the given {@code rankMethod} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static RankMethod parseRankMethod(String rankMethod) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(rankMethod);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String trimmedRankMethod \u003d rankMethod.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!RankMethod.isValidRankMethod(trimmedRankMethod)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return RankMethod.getRankMethodCorrespondingToName(rankMethod.toLowerCase());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    //@@author HoWeiChin"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Returns true if {@code startDate} is exactly or before {@code endDate}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static boolean isBefore(CustomDate startDate, CustomDate endDate) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Date start \u003d startDate.getDate();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Date end \u003d endDate.getDate();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return start.equals(end) || start.before(end);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 26,
      "-": 53,
      "ooimingsheng": 35
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/SystemParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.insession.AttemptLiftedCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.commands.insession.EndSessionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.insession.NextLifterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.insession.RankCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.insession.RanklistCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.AddCompetitionCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.AddParticipationCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.AddPersonCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.DeleteCompetitionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.commands.outofsession.DeleteParticipationCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.DeletePersonCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditCompetitionCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditPersonCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.FindPersonCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.ListCompetitionCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.ListParticipationCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.ListPersonCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.OutOfSessionHelpCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.system.logic.commands.outofsession.OverallRankCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.StartSessionCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.insession.AttemptLiftedCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.insession.RankCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.insession.RanklistCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.outofsession.AddCompetitionCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.outofsession.AddParticipationCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.outofsession.AddPersonCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.outofsession.DeleteCompetitionCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.outofsession.DeleteParticipationCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.outofsession.DeletePersonCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.outofsession.EditCompetitionCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.outofsession.EditPersonCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.outofsession.FindPersonCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.outofsession.ListParticipationCommandParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.outofsession.StartSessionCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class SystemParser {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                OutOfSessionHelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case AddPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new AddPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case AddCompetitionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new AddCompetitionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case AddParticipationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new AddParticipationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        case AttemptLiftedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new AttemptLiftedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case EditPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new EditPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case EditCompetitionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new EditCompetitionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case DeletePersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new DeletePersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case DeleteCompetitionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new DeleteCompetitionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        case DeleteParticipationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new DeleteParticipationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case FindPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new FindPersonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case ListPersonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new ListPersonCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case ListCompetitionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new ListCompetitionCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case ListParticipationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new ListParticipationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        case RankCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return new RankCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case RanklistCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new RanklistCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case OutOfSessionHelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new OutOfSessionHelpCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        case NextLifterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new NextLifterCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case StartSessionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new StartSessionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        case OverallRankCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            return new OverallRankCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        case EndSessionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new EndSessionCommand();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 4,
      "belbel98": 22,
      "HoWeiChin": 8,
      "-": 48,
      "ooimingsheng": 65
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/insession/AttemptLiftedCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser.insession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.insession.AttemptLiftedCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Parses user arguments and returns AttemptLiftedCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class AttemptLiftedCommandParser implements Parser\u003cAttemptLiftedCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Parses {@code userInput} into an AttemptLiftedCommand and returns it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public AttemptLiftedCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String trimmedUserInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Boolean isSuccess \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (trimmedUserInput.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, AttemptLiftedCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (trimmedUserInput.equals(\"Y\") || trimmedUserInput.equals(\"y\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            isSuccess \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (trimmedUserInput.equals(\"N\") || trimmedUserInput.equals(\"n\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            isSuccess \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (isSuccess \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, AttemptLiftedCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return new AttemptLiftedCommand(isSuccess);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 38,
      "ooimingsheng": 5
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/insession/RankCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser.insession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.insession.RankCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Parses input arguments and creates a new RankCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class RankCommandParser implements Parser\u003cRankCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RankCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * and returns an RankCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public RankCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RankCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Name athleteName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new RankCommand(athleteName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 25,
      "ooimingsheng": 13
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/insession/RanklistCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser.insession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_RANK_METHOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.RankMethod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.insession.RanklistCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Parses input arguments and creates a new RanklistCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class RanklistCommandParser implements Parser\u003cRanklistCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RanklistCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * and returns an RanklistCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public RanklistCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_RANK_METHOD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_RANK_METHOD)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RanklistCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        RankMethod rankMethod \u003d ParserUtil.parseRankMethod(argMultimap.getValue(PREFIX_RANK_METHOD).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new RanklistCommand(rankMethod);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 36
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/outofsession/AddCompetitionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_START_END_DATES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.AddCompetitionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Parses input arguments and creates a new AddCompetitionCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class AddCompetitionCommandParser implements Parser\u003cAddCompetitionCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCompetitionCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * and returns an AddCompetitionCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public AddCompetitionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                AddCompetitionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        CustomDate startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        CustomDate endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!ParserUtil.isBefore(startDate, endDate)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_START_END_DATES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Competition competition \u003d new Competition(name, startDate, endDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new AddCompetitionCommand(competition);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 1,
      "ooimingsheng": 51
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/outofsession/AddParticipationCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.system.logic.parser.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_NEGATIVE_ATTEMPT_WEIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_BENCH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_COMP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_DEADLIFT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_SQUAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.AddParticipationCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Parses input arguments and returns an AddParticipationCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class AddParticipationCommandParser implements Parser\u003cAddParticipationCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private List\u003cInteger\u003e attemptWeights \u003d new ArrayList\u003c\u003e(9);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Parses {@code args} into an AddParticipationCommand and returns it."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws ParseException if {@code args} does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public AddParticipationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COMP, PREFIX_SQUAT, PREFIX_BENCH, PREFIX_DEADLIFT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            argMultimap, PREFIX_NAME, PREFIX_COMP, PREFIX_SQUAT, PREFIX_BENCH, PREFIX_DEADLIFT)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                AddParticipationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Name athleteName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Name compName \u003d ParserUtil.parseName((argMultimap.getValue(PREFIX_COMP).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        stringToAttemptInt(PREFIX_SQUAT, argMultimap);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        stringToAttemptInt(PREFIX_BENCH, argMultimap);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        stringToAttemptInt(PREFIX_DEADLIFT, argMultimap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new AddParticipationCommand(athleteName, compName, attemptWeights);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Adds the attempt weights in integer from its string form."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param prefix prefix to get the value from"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param argumentMultimap mapper of the arguments"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private void stringToAttemptInt(Prefix prefix, ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String stringThreeAttempts \u003d argumentMultimap.getValue(prefix).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String[] threeAttemptsArray \u003d stringThreeAttempts.split(\"/\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (String s : threeAttemptsArray) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            Integer weight \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (weight.intValue() \u003c 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_NEGATIVE_ATTEMPT_WEIGHT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        AddParticipationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            attemptWeights.add(weight);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 49,
      "ooimingsheng": 23
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/outofsession/AddPersonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_PERSONS_DOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.AddPersonCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Parses input arguments and creates a new AddPersonCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class AddPersonCommandParser implements Parser\u003cAddPersonCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPersonCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * and returns an AddPersonCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format or {@code dateOfBirth} is invalid"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public AddPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DOB, PREFIX_GENDER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DOB, PREFIX_GENDER)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate currDate \u003d CustomDate.obtainCurrentDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate dateOfBirth \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DOB).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!ParserUtil.isBefore(dateOfBirth, currDate)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PERSONS_DOB);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person person \u003d new Person(name, dateOfBirth, gender);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new AddPersonCommand(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 11,
      "-": 19,
      "ooimingsheng": 23
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/outofsession/DeleteCompetitionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.DeleteCompetitionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Parses input arguments and creates a new DeleteCompetitionCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class DeleteCompetitionCommandParser implements Parser\u003cDeleteCompetitionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCompetitionCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * and returns a DeleteCompetitionCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public DeleteCompetitionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new DeleteCompetitionCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCompetitionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "ooimingsheng": 14
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/outofsession/DeleteParticipationCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.system.logic.parser.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.commands.outofsession.DeleteParticipationCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Parses input and returns a DeleteParticipationCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class DeleteParticipationCommandParser implements Parser\u003cDeleteParticipationCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public DeleteParticipationCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new DeleteParticipationCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteParticipationCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 24,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/outofsession/DeletePersonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.DeletePersonCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Parses input arguments and creates a new DeletePersonCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class DeletePersonCommandParser implements Parser\u003cDeletePersonCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePersonCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * and returns a DeletePersonCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public DeletePersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new DeletePersonCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "ooimingsheng": 14
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/outofsession/EditCompetitionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditCompetitionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditCompetitionCommand.EditCompetitionDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Parses input arguments and creates a new EditCompetitionCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class EditCompetitionCommandParser implements Parser\u003cEditCompetitionCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCompetitionCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * and returns an EditCompetitionCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public EditCompetitionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                EditCompetitionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        EditCompetitionDescriptor editCompetitionDescriptor \u003d new EditCompetitionDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            editCompetitionDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            editCompetitionDescriptor.setStartDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            editCompetitionDescriptor.setEndDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!editCompetitionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ParseException(EditCompetitionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new EditCompetitionCommand(index, editCompetitionDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 61
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/outofsession/EditPersonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditPersonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Parses input arguments and creates a new EditPersonCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class EditPersonCommandParser implements Parser\u003cEditPersonCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPersonCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * and returns an EditPersonCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public EditPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DOB, PREFIX_GENDER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DOB).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            editPersonDescriptor.setDateOfBirth(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DOB).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            editPersonDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ParseException(EditPersonCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new EditPersonCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 5,
      "-": 33,
      "ooimingsheng": 22
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/outofsession/FindPersonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.FindPersonCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Parses input arguments and creates a new FindPersonCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class FindPersonCommandParser implements Parser\u003cFindPersonCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindPersonCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * and returns a FindPersonCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public FindPersonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "ooimingsheng": 13
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/outofsession/ListParticipationCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.system.logic.parser.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_COMP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.ListParticipationCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Parses argument input and creates new ListParticipationCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class ListParticipationCommandParser implements Parser\u003cListParticipationCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Parses the given String {@code userInput} into a ListParticipationCommand and returns it for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ListParticipationCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new ListParticipationCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_COMP);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argumentMultimap, PREFIX_COMP)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                || !argumentMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    ListParticipationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Name compName \u003d ParserUtil.parseName(argumentMultimap.getValue(PREFIX_COMP).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new ListParticipationCommand(compName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 29,
      "ooimingsheng": 12
    }
  },
  {
    "path": "src/main/java/seedu/system/logic/parser/outofsession/StartSessionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.system.logic.parser.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_COMP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.StartSessionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Parses user input and returns StartSessionCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class StartSessionCommandParser implements Parser\u003cStartSessionCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Parses the given string {@code userInput} into a StartSessionCommand and returns it."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public StartSessionCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String trimmedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (trimmedInput.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_COMP);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argumentMultimap, PREFIX_COMP)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                || !argumentMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    StartSessionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Name compName \u003d ParserUtil.parseName(argumentMultimap.getValue(PREFIX_COMP).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new StartSessionCommand(compName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 13,
      "ooimingsheng": 28
    }
  },
  {
    "path": "src/main/java/seedu/system/model/Data.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Duplicates are not allowed (by .isSameElement comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class Data\u003cT extends UniqueElement\u003e implements ReadOnlyData\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final UniqueElementList\u003cT\u003e uniqueElements;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniqueElements \u003d new UniqueElementList\u003cT\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Creates an Data using the UniqueElements in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data(ReadOnlyData toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces the contents of the unique element list with {@code uniqueElements}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code uniqueElements} must not contain duplicate elements."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setListOfElements(List\u003cT\u003e listOfElements) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.uniqueElements.setElements(listOfElements);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Resets the existing data of this {@code Data} with {@code newData}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void resetData(ReadOnlyData newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        setListOfElements(newData.getListOfElements());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //// uniqueElements-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if an element with the same identity as {@code uniqueElement} exists in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean hasUniqueElement(T uniqueElement) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(uniqueElement);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return uniqueElements.contains(uniqueElement);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Adds a unique element to the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The unique element must not already exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void addUniqueElement(T t) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniqueElements.add(t);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces the given element {@code target} in the list with {@code editedElement}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The element identity of {@code editedElement} must not be the same as another existing element in the system."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setElement(T target, T editedElement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(editedElement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniqueElements.setElement(target, editedElement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Removes {@code key} from this {@code Data}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void removeElement(T key) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniqueElements.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return \"List of elements of size \" + uniqueElements.asUnmodifiableObservableList().size();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ObservableList\u003cT\u003e getListOfElements() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return uniqueElements.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                || (other instanceof Data // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 uniqueElements.equals(((Data) other).uniqueElements));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return uniqueElements.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 118
    }
  },
  {
    "path": "src/main/java/seedu/system/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.ParticipationAttempt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.Session;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Predicate\u003cCompetition\u003e PREDICATE_SHOW_ALL_COMPETITIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Predicate\u003cParticipation\u003e PREDICATE_SHOW_ALL_PARTICIPATIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Preferences \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns the user prefs\u0027 system file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Sets the user prefs\u0027 system file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void setUserPrefsFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Persons \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces data of persons with the data in {@code persons}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void setPersons(ReadOnlyData\u003cPerson\u003e persons);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns the data of persons"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ReadOnlyData\u003cPerson\u003e getPersons();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if a competition with the same identity as {@code competition} exists in the system."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The person must exist in the system."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code person} must not already exist in the system."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code target} must exist in the system."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the system."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * @param person person that is being queried for their number of wins in the model"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * @return number of wins the person has among all the competitions in the model."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    int getTotalWins(Person person);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * @param competition that is being queried for the winner"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * @return athlete that won/ is winning the competition."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    Person getWinner(Competition competition);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Competitions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces data of competitions with the data in {@code competitions}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void setCompetitions(ReadOnlyData\u003cCompetition\u003e competitions);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns the data of competitions"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ReadOnlyData\u003cCompetition\u003e getCompetitions();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if a competition with the same identity as {@code competition} exists in the system."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    boolean hasCompetition(Competition competition);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Soft deletes the given competition."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The competition must exist in the system."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void deleteCompetition(Competition target);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Adds the given competition."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code competition} must not already exist in the system."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void addCompetition(Competition competition);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces the given competition {@code target} with {@code editedCompetition}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code target} must exist in the system."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The competition identity of {@code editedCompetition} must not be the same as another existing competition"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * in the system."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void setCompetition(Competition target, Competition editedCompetition);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns an unmodifiable view of the filtered competition list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ObservableList\u003cCompetition\u003e getFilteredCompetitionList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Updates the filter of the filtered competition list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void updateFilteredCompetitionList(Predicate\u003cCompetition\u003e predicate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Participations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces data of participations with the data in {@code participations}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void setParticipations(ReadOnlyData\u003cParticipation\u003e participations);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns the Participation"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ReadOnlyData\u003cParticipation\u003e getParticipations();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if a participation with the same identity as {@code participation} exists in the system."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    boolean hasParticipation(Participation participation);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Soft deletes the given participation."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The participation must exist in the system."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void deleteParticipation(Participation target);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Deletes all participations dependent with an association with the competition"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void deleteDependentParticipations(Competition competition);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Deletes all participations dependent with an assoiciation with the person"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void deleteDependentParticipations(Person person);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Adds the given participation."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code participation} must not already exist in the system."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void addParticipation(Participation participation);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces the given participation {@code target} with {@code editedParticipation}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code target} must exist in the system."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The competition identity of {@code editedParticipation} must not be the same as another existing participation"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * in the system."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void setParticipation(Participation target, Participation editedParticipation);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns an unmodifiable view of the filtered participation list"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ObservableList\u003cParticipation\u003e getFilteredParticipationList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Updates the filter of the filtered participation list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void updateFilteredParticipationList(Predicate\u003cParticipation\u003e predicate);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Session Handling \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the current session."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return the current session"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    Session getSession();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    boolean hasOngoingSession();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Starts the session with a list of participants for this competition."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param competition the current competition of the session"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param participations list of participations for the current competition session"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void startSession(Competition competition, ObservableList\u003cParticipation\u003e participations);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns the current competition of the session and null, if none."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Competition getOngoingCompetition();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Updates and records the success after a lifter has made an attempt."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    ParticipationAttempt makeAttempt();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the next lifter and his/her attempt in line."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return the associated ParticipationAttempt object"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    ParticipationAttempt getNextLifter();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the following lifter and his/her attempt, so as to get ready for his/her lift."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return the associated ParticipationAttempt object"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    ParticipationAttempt getFollowingLifter();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Ends the session."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    void endSession();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 14,
      "belbel98": 62,
      "-": 69,
      "ooimingsheng": 131
    }
  },
  {
    "path": "src/main/java/seedu/system/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditParticipationCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.ParticipationAttempt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.Session;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents the in-memory model of the data of the system."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final Data\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final Data\u003cCompetition\u003e competitions;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final FilteredList\u003cCompetition\u003e filteredCompetitions;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final Data\u003cParticipation\u003e participations;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final FilteredList\u003cParticipation\u003e filteredParticipations;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Session session;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ModelManager(ReadOnlyData\u003cPerson\u003e persons,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                        ReadOnlyData\u003cCompetition\u003e competitions,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                        ReadOnlyData\u003cParticipation\u003e participations,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireAllNonNull(persons, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + persons + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.persons \u003d new Data\u003c\u003e(persons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.persons.getListOfElements());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competitions \u003d new Data\u003c\u003e(competitions);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        filteredCompetitions \u003d new FilteredList\u003c\u003e(this.competitions.getListOfElements());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.participations \u003d new Data\u003c\u003e(participations);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        filteredParticipations \u003d new FilteredList\u003c\u003e(this.participations.getListOfElements());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.session \u003d Session.getInstance();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this(new Data(), new Data(), new Data(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return userPrefs.getPersonDataFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setUserPrefsFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        userPrefs.setPersonDataFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Persons \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setPersons(ReadOnlyData persons) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.persons.resetData(persons);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ReadOnlyData\u003cPerson\u003e getPersons() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return persons.hasUniqueElement(person);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        deleteDependentParticipations(target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.removeElement(target);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.addUniqueElement(person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        updateDependentParticipations(target, editedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.setElement(target, editedPerson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public int getTotalWins(Person person) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        int wins \u003d 0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        for (Competition competition : this.competitions.getListOfElements()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            if (person.equals(getWinner(competition))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                wins++;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return wins;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public Person getWinner(Competition competition) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        Person winner \u003d null;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        int bestScore \u003d -1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        for (Participation participation : this.participations.getListOfElements()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            if (participation.getCompetition().equals(competition)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                int participationTotalScore \u003d participation.getTotalScore();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                if (participationTotalScore \u003e bestScore) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                    bestScore \u003d participationTotalScore;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                    winner \u003d participation.getPerson();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        return winner;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Competitions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setCompetitions(ReadOnlyData\u003cCompetition\u003e competitions) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competitions.resetData(competitions);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ReadOnlyData\u003cCompetition\u003e getCompetitions() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitions;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean hasCompetition(Competition competition) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(competition);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitions.hasUniqueElement(competition);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void deleteCompetition(Competition competition) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        deleteDependentParticipations(competition);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        competitions.removeElement(competition);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void addCompetition(Competition competition) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        competitions.addUniqueElement(competition);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        updateFilteredCompetitionList(PREDICATE_SHOW_ALL_COMPETITIONS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setCompetition(Competition target, Competition editedCompetition) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireAllNonNull(target, editedCompetition);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        updateDependentParticipations(target, editedCompetition);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        competitions.setElement(target, editedCompetition);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Competition List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Competition} backed by the internal list of"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code versionedSystem}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ObservableList\u003cCompetition\u003e getFilteredCompetitionList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return filteredCompetitions;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void updateFilteredCompetitionList(Predicate\u003cCompetition\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        filteredCompetitions.setPredicate(predicate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Participations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setParticipations(ReadOnlyData\u003cParticipation\u003e participations) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.participations.resetData(participations);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ReadOnlyData\u003cParticipation\u003e getParticipations() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participations;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean hasParticipation(Participation participation) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(participation);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participations.hasUniqueElement(participation);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void deleteParticipation(Participation participation) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        participations.removeElement(participation);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void deleteDependentParticipations(Competition competition) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        List\u003cParticipation\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Participation participation : participations.getListOfElements()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (participation.getCompetition().equals((competition))) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                toDelete.add(participation);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Participation participation : toDelete) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            deleteParticipation(participation);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void deleteDependentParticipations(Person person) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        List\u003cParticipation\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Participation participation : participations.getListOfElements()) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (participation.getPerson().equals((person))) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                toDelete.add(participation);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Participation participation : toDelete) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            deleteParticipation(participation);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void addParticipation(Participation participation) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        participations.addUniqueElement(participation);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        updateFilteredParticipationList(PREDICATE_SHOW_ALL_PARTICIPATIONS);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setParticipation(Participation target, Participation editedParticipation) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireAllNonNull(target, editedParticipation);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        participations.setElement(target, editedParticipation);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Participation List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Competition} backed by the internal list of"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code versionedSystem}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ObservableList\u003cParticipation\u003e getFilteredParticipationList() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return filteredParticipations;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void updateFilteredParticipationList(Predicate\u003cParticipation\u003e predicate) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        filteredParticipations.setPredicate(predicate);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Session Handling \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Session getSession() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return session;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Competition getOngoingCompetition() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return session.getCompetition();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean hasOngoingSession() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return session.isOngoing();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void startSession(Competition competition, ObservableList\u003cParticipation\u003e participations) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(competition);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireAllNonNull(participations);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        session.start(competition, participations);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ParticipationAttempt makeAttempt() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return session.attemptMade();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ParticipationAttempt getNextLifter() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return session.nextLifter();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ParticipationAttempt getFollowingLifter() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return session.getFollowingLifter();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void endSession() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        session.end();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Private functions to cope with the many-to-many relationship \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Updates all participation associated with a {@code person} with the new {@code updatedPerson}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param person the person that is associated with the the target participations."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param updatedPerson the person the participations are to be updated with."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private void updateDependentParticipations(Person person, Person updatedPerson) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Participation participation : this.participations.getListOfElements()) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (person.equals(participation.getPerson())) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                Participation newParticipation \u003d"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    EditParticipationCommand.createEditedParticipation(participation, updatedPerson);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                participations.setElement(participation, newParticipation);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Updates all participation associated with a {@code competition} with the new {@code updatedCompetition}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param competition the competition that is associated with the the target participations."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param updatedCompetition the competition the participations are to be updated with."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private void updateDependentParticipations(Competition competition, Competition updatedCompetition) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Participation participation : this.participations.getListOfElements()) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (competition.equals(participation.getCompetition())) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                Participation newParticipation \u003d"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    EditParticipationCommand.createEditedParticipation(participation, updatedCompetition);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                participations.setElement(participation, newParticipation);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            \u0026\u0026 persons.equals(other.persons)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            \u0026\u0026 competitions.equals(other.competitions)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            \u0026\u0026 filteredCompetitions.equals(other.filteredCompetitions)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            \u0026\u0026 participations.equals(other.participations)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            \u0026\u0026 filteredParticipations.equals(other.filteredParticipations);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 27,
      "belbel98": 34,
      "-": 120,
      "ooimingsheng": 241
    }
  },
  {
    "path": "src/main/java/seedu/system/model/ReadOnlyData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Unmodifiable view of some class of data"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public interface ReadOnlyData\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns an unmodifiable view of the list of data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * This list will not contain any duplicate data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ObservableList\u003cT\u003e getListOfElements();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 16
    }
  },
  {
    "path": "src/main/java/seedu/system/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getPersonDataFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getCompetitionDataFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getParticipationDataFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "ooimingsheng": 7
    }
  },
  {
    "path": "src/main/java/seedu/system/model/UniqueElement.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents any type of data whereby the objects must be unique in the system."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public abstract class UniqueElement {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if both elements of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public abstract \u003cT extends UniqueElement\u003e boolean isSameElement(T otherElement);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 12
    }
  },
  {
    "path": "src/main/java/seedu/system/model/UniqueElementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * A list that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * An element is considered unique by comparing using {@code T#isSameElement(T)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * element uses T#isSameElement(T) for equality so as to ensure that the element being added, removal and updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * unique in terms of identity in the UniqueElementList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class UniqueElementList\u003cT extends UniqueElement\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if the list contains an equivalent element as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameElement);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Adds an element to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The element must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new DuplicateElementException(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces the element {@code target} in the list with {@code editedElement}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The identity of {@code editedElement} must not be the same as another existing element in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setElement(T target, T editedElement) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireAllNonNull(target, editedElement);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ElementNotFoundException(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!target.isSameElement(editedElement) \u0026\u0026 contains(editedElement)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new DuplicateElementException(editedElement);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        internalList.set(index, editedElement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Removes the equivalent element from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The element must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ElementNotFoundException(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setElements(UniqueElementList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces the contents of this list with {@code elements}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code elements} must not contain duplicate elements."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setElements(List\u003cT\u003e elements) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireAllNonNull(elements);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (elements.size() \u003e 0 \u0026\u0026 !elementsAreUnique(elements)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new DuplicateElementException(elements.get(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        internalList.setAll(elements);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                || (other instanceof UniqueElementList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueElementList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if {@code elements} contains only unique elements."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private boolean elementsAreUnique(List\u003cT\u003e elements) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (int i \u003d 0; i \u003c elements.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c elements.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                if (elements.get(i).isSameElement(elements.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 136
    }
  },
  {
    "path": "src/main/java/seedu/system/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path personDataFilePath \u003d Paths.get(\"data\" , \"personData.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path competitionDataFilePath \u003d Paths.get(\"data\" , \"competitionData.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path participationDataFilePath \u003d Paths.get(\"data\" , \"participationData.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        setPersonDataFilePath(newUserPrefs.getPersonDataFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getPersonDataFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return personDataFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setPersonDataFilePath(Path dataFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(dataFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.personDataFilePath \u003d dataFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getCompetitionDataFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitionDataFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setCompetitionDataFilePath(Path dataFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(dataFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competitionDataFilePath \u003d dataFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getParticipationDataFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participationDataFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setParticipationDataFilePath(Path dataFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(dataFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.participationDataFilePath \u003d dataFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 personDataFilePath.equals(o.personDataFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return Objects.hash(guiSettings, personDataFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + personDataFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "ooimingsheng": 32
    }
  },
  {
    "path": "src/main/java/seedu/system/model/attempt/Attempt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.attempt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.attempt.exceptions.AttemptHasBeenAttemptedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.exercise.Lift;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents a {@link seedu.system.model.person.Person}\u0027s attempt in an {@link Exercise}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class Attempt {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \"Attempt should follow the following format DD/MM/YYYY.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final String TRUE_IN_STRING_FORM \u003d \"true\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final Lift lift;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final int weight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private boolean hasAttempted;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private boolean isSuccessful;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Attempt(Lift lift, int weight) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.lift \u003d lift;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.hasAttempted \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.isSuccessful \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Attempt(Lift lift, int weight, boolean hasAttempted, boolean isSuccessful) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.lift \u003d lift;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.hasAttempted \u003d hasAttempted;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.isSuccessful \u003d isSuccessful;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This method records the success of an athlete\u0027s attempt after his lift."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param isSuccessful true if the athlete succeeds his lift, false otherwise"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setSuccess(boolean isSuccessful) throws AttemptHasBeenAttemptedException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (hasAttempted) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new AttemptHasBeenAttemptedException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.isSuccessful \u003d isSuccessful;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.hasAttempted \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int getWeightAttempted() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean getHasAttempted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return hasAttempted;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean getIsSuccessful() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return isSuccessful;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Lift getLift() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return lift;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code Attempt} into string format for JSON storage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static String getStringStorageFormOfAttempt(Attempt attempt) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String storedString \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        storedString +\u003d attempt.getLift();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        storedString +\u003d \" \" + attempt.getHasAttempted();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        storedString +\u003d \" \" + attempt.getIsSuccessful();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        storedString +\u003d \" \" + attempt.getWeightAttempted();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return storedString;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code String} into an Attempt."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static Attempt parseStringToAttempt(String string) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String[] splitString \u003d string.split(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (splitString.length \u003c 4) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String liftName \u003d splitString[0];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Lift lift \u003d Lift.getLiftCorrespondingToName(liftName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String stringVersonOfHasAttempted \u003d splitString[1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        boolean hasAttempted \u003d stringVersonOfHasAttempted.equals(TRUE_IN_STRING_FORM);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String stringVersonOfIsSuccessful \u003d splitString[2];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        boolean isSuccessful \u003d stringVersonOfIsSuccessful.equals(TRUE_IN_STRING_FORM);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String stringVersonOfWeight \u003d splitString[3];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        int weightAttempted \u003d Integer.parseInt(stringVersonOfWeight);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return new Attempt(lift, weightAttempted, hasAttempted, isSuccessful);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 34,
      "ooimingsheng": 66
    }
  },
  {
    "path": "src/main/java/seedu/system/model/attempt/exceptions/AttemptHasBeenAttemptedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.attempt.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Signals when an an attempted Attempt is being updated again."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class AttemptHasBeenAttemptedException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public AttemptHasBeenAttemptedException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(\"The attempt has already been updated and recorded.\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                + \"Enter \u0027next\u0027 to get the next attempt and lifter.\\n\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 11,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/model/attempt/exceptions/MaximumAttemptsReachedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.attempt.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Signals that an athlete has already made 3 attempts."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class MaximumAttemptsReachedException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public MaximumAttemptsReachedException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(\"This athlete has already reached the maximum number of attempts.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 10,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/model/competition/Competition.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.competition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UniqueElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.exercise.Exercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.exercise.Lift;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Represents a Competition in the app."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class Competition extends UniqueElement {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Exercise squat \u003d new Exercise(Lift.SQUAT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Exercise bench \u003d new Exercise(Lift.BENCH);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Exercise deadlift \u003d new Exercise(Lift.DEADLIFT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private CustomDate startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private CustomDate endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final List\u003cExercise\u003e exerciseList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Competition(Name name, CustomDate startDate, CustomDate endDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.exerciseList.add(squat);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.exerciseList.add(bench);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.exerciseList.add(deadlift);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CustomDate getStartDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CustomDate getEndDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public List\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean isSameElement(UniqueElement otherElement) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!(otherElement instanceof Competition)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this.equals((Competition) otherElement);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!(other instanceof Competition)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Competition otherCompetition \u003d (Competition) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return otherCompetition.getName().equals(getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return name.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 24,
      "HoWeiChin": 3,
      "ooimingsheng": 61
    }
  },
  {
    "path": "src/main/java/seedu/system/model/exceptions/DuplicateElementException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Signals that the operation will result in duplicate elements."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class DuplicateElementException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public \u003cT\u003e DuplicateElementException(T t) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        super(\"Operation would result in duplicate elements of \" + t.getClass().getName());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 10
    }
  },
  {
    "path": "src/main/java/seedu/system/model/exceptions/ElementNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Signals that the operation is unable to find the specified element."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class ElementNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public \u003cT\u003e ElementNotFoundException(T t) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        super(\"Element \" + t + \" was not found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 10
    }
  },
  {
    "path": "src/main/java/seedu/system/model/exercise/Exercise.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents an Exercise category in a {@link seedu.system.model.competition.Competition}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final int MAXIMUM_ATTEMPTS \u003d 3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Lift lift;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final int noOfAttempts \u003d MAXIMUM_ATTEMPTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Exercise(Lift lift) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.lift \u003d lift;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Lift getLift() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return lift;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int getNoOfAttempts() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return noOfAttempts;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * This defines a stronger notion of equality between two exercises."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (!(other instanceof Exercise)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        Exercise otherExercise \u003d (Exercise) other;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return otherExercise.getLift().equals(getLift()) \u0026\u0026 otherExercise.getNoOfAttempts() \u003d\u003d getNoOfAttempts();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 21,
      "belbel98": 11,
      "ooimingsheng": 10
    }
  },
  {
    "path": "src/main/java/seedu/system/model/exercise/Lift.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents an {@link Exercise}\u0027s type of lift."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public enum Lift {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    BENCH(\"bench\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    DEADLIFT(\"deadlift\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    SQUAT(\"squat\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \"Lift name should be provided as either \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + BENCH.toString() + \" or \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + DEADLIFT.toString() + \" or \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + SQUAT.toString() + \".\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Lift(String name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Checks {@code gender} corresponds to a  format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static boolean isValidLift(String liftName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return liftName.toLowerCase().equals(BENCH.toString())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || liftName.toLowerCase().equals(DEADLIFT.toString())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || liftName.toLowerCase().equals(SQUAT.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static Lift getLiftCorrespondingToName(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (name.equals((BENCH.toString()))) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return BENCH;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } else if (name.equals((DEADLIFT.toString()))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return DEADLIFT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } else if (name.equals((SQUAT.toString()))) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return SQUAT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 5,
      "belbel98": 1,
      "ooimingsheng": 43
    }
  },
  {
    "path": "src/main/java/seedu/system/model/participation/Participation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.participation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.RankMethod;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UniqueElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.attempt.Attempt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.exercise.Lift;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Represents a {@link Person}\u0027s participation in a {@link Competition}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Guarantees: immutable; person-competition pair is unique."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class Participation extends UniqueElement {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Competition competition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private List\u003cAttempt\u003e attempts;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private boolean areAttemptsSubmitted;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Participation(Person person, Competition competition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.competition \u003d competition;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.attempts \u003d new ArrayList\u003c\u003e(9);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.areAttemptsSubmitted \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Participation(Person person, Competition competition, List\u003cAttempt\u003e attempts) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competition \u003d competition;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.attempts \u003d attempts;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.areAttemptsSubmitted \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This method adds all the weight to be attempted for this participation."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param weightOfAttemptsList a list of the weight to be attempted for eaCh lift and attempt"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void addAttempts(List\u003cInteger\u003e weightOfAttemptsList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        List\u003cExercise\u003e exerciseList \u003d competition.getExerciseList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Exercise exercise : exerciseList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Lift lift \u003d exercise.getLift();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            int noOfAttempts \u003d exercise.getNoOfAttempts();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            for (int i \u003d 0; i \u003c noOfAttempts \u0026\u0026 index \u003c 9; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                attempts.add(new Attempt(lift, weightOfAttemptsList.get(index)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        areAttemptsSubmitted \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Updates the success of the attempt after the lift."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param index attempt index which relates to the lift and attempt"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param isSuccess a boolean indicating the success of the attempt"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void updateAttempt(int index, boolean isSuccess) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Attempt attempt \u003d attempts.get(index - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        assert attempt !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        attempt.setSuccess(isSuccess);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        attempts.set(index - 1, attempt);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Competition getCompetition() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return competition;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public List\u003cAttempt\u003e getAttempts() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return attempts;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return person.getName();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public boolean getAreAttemptsSubmitted() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return areAttemptsSubmitted;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean isSameElement(UniqueElement otherElement) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!(otherElement instanceof Participation)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this.equals((Participation) otherElement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @return the total score of the person\u0027s participation at a specified competition"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int getTotalScore() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        int score \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Exercise exercise : competition.getExerciseList()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            score +\u003d getLiftScore(exercise.getLift());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @return the total score of the person\u0027s participation at a specified competition for a specified lift"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int getLiftScore(Lift lift) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        int score \u003d 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Attempt attempt : attempts) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (attempt.getLift() \u003d\u003d lift \u0026\u0026 attempt.getIsSuccessful()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                score \u003d Math.max(score, attempt.getWeightAttempted());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @return the score of a participation based on the rank method given"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int getScore(RankMethod rankMethod) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        switch (rankMethod) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case SQUAT:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return getLiftScore(Lift.SQUAT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case BENCH:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return getLiftScore(Lift.BENCH);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        case DEADLIFT:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return getLiftScore(Lift.DEADLIFT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return getTotalScore();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the highest score of each of the three lifts in this format: Squat/Bench/Deadlift."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of the three lift score"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String getThreeLiftScore() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        StringBuilder topAttemptsString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (Exercise exercise : competition.getExerciseList()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            Lift lift \u003d exercise.getLift();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            topAttemptsString.append(\"/\").append(getLiftScore(lift));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String outputAttempts \u003d topAttemptsString.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return outputAttempts.substring(1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns true if both participations have the same identity and data fields."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This defines a stronger notion of equality between two participations."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (!(other instanceof Participation)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Participation otherParticipation \u003d (Participation) other;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return otherParticipation.getPerson().equals(getPerson())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u0026\u0026 otherParticipation.getCompetition().equals(getCompetition());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 91,
      "ooimingsheng": 85
    }
  },
  {
    "path": "src/main/java/seedu/system/model/person/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/model/person/CustomDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Creates a CustomDate object based on DATE_FORMAT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class CustomDate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            \"Date should follow the following format DD/MM/YYYY.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Date dateObj;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CustomDate(String date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        checkArgument(isValidDate(date.trim()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.date \u003d date.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            dateObj \u003d new SimpleDateFormat(DATE_FORMAT).parse(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            dateObj \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Returns a {@code currDate} which is a CustomDate object which has information about today\u0027s date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static CustomDate obtainCurrentDate () {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(DATE_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate currDate \u003d new CustomDate(formatter.format(currentDate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return currDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Returns true if a given string has a valid date format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(DATE_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            Date dateObj \u003d format.parse(date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            if (date.equals(format.format(dateObj))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return dateObj;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Returns true if both customs have the same date string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!(other instanceof CustomDate)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate otherDate \u003d (CustomDate) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return this.date.equals(otherDate.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 81,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/model/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/model/person/Gender.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Only 2 Genders can be used: male or female."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    MALE(\"male\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    FEMALE(\"female\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            \"Gender should be provided as either male or female\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Gender(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Checks {@code gender} corresponds to a  format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static boolean isValidGender(String gender) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return gender.toLowerCase().equals(MALE.toString())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            || gender.toLowerCase().equals(FEMALE.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static Gender getGenderCorrespondingToName(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (name.equals((MALE.toString()))) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return MALE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        } else if (name.equals((FEMALE.toString()))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return FEMALE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 41,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 fullName.toLowerCase().equals(((Name) other).fullName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/main/java/seedu/system/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 1,
      "-": 28,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UniqueElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class Person extends UniqueElement {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final CustomDate dateOfBirth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public Person(Name name, CustomDate dateOfBirth, Gender gender) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireAllNonNull(name, dateOfBirth, gender);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CustomDate getDateOfBirth() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean isSameElement(UniqueElement otherElement) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!(otherElement instanceof Person)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Person otherPerson \u003d (Person) otherElement;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return Objects.hash(name, dateOfBirth, gender);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .append(\" Date of Birth: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .append(getDateOfBirth())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .append(getGender());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 16,
      "-": 68,
      "ooimingsheng": 12
    }
  },
  {
    "path": "src/main/java/seedu/system/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/model/session/ParticipationAttempt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.attempt.Attempt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.WrongAttemptIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * This is the association class which keeps track of the attempts based on the participation athlete."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ParticipationAttempt {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Participation athlete;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Attempt attempt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final int attemptIndex; // 1,2,3 are squats attempts in order; 4,5,6 for bench; 7,8,9 deadlift"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ParticipationAttempt(Participation participation, Attempt attempt, int index)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throws WrongAttemptIndexException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.athlete \u003d participation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.attempt \u003d attempt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        checkAttemptIndex(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.attemptIndex \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Checks the validity of the attempt index, which should be between 1-9."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param index the attempt index to be checked"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws WrongAttemptIndexException if the attempt index falls out of 1-9"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private void checkAttemptIndex(int index) throws WrongAttemptIndexException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (index \u003c 1 || index \u003e 9) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new WrongAttemptIndexException(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the suffix for the attempt number."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return suffix to append after attempt number"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private int attemptIndexToNumber() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (attemptIndex % 3 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return 3;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return attemptIndex % 3;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Participation getParticipation() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return athlete;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Attempt getAttempt() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return attempt;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public int getWeight() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return attempt.getWeightAttempted();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public int getAttemptIndex() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return attemptIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns the string representation of a participation attempt."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return String.format(\"%s - %s attempt %d: %d kg\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                athlete.getName(), attempt.getLift(), attemptIndexToNumber(), attempt.getWeightAttempted());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 67,
      "ooimingsheng": 4
    }
  },
  {
    "path": "src/main/java/seedu/system/model/session/ParticipationAttemptComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Compares two PartcipationAttempt objects based on their attempt index,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * and order them in increasing weight attempted for each respective lift and attempt."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ParticipationAttemptComparator implements Comparator\u003cParticipationAttempt\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Compares its two arguments for order.  Returns a negative integer,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * zero, or a positive integer as the first argument is less than, equal"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * to, or greater than the second.\u003cp\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * First, we compare the ParticipationAttempt objects by their index,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * to group all the attempts with the same lift and attempt number together."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Then, we will sort the attempts with the same attempt index by their weights attempted,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * in increasing order."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param pa1 the first object to be compared."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param pa2 the second object to be compared."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a negative integer, zero, or a positive integer as the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * first argument is less than, equal to, or greater than the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * second."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws NullPointerException if an argument is null and this"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *                              comparator does not permit null arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws ClassCastException   if the arguments\u0027 types prevent them from"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *                              being compared by this comparator."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public int compare(ParticipationAttempt pa1, ParticipationAttempt pa2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (pa1.getAttemptIndex() \u003d\u003d pa2.getAttemptIndex()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return pa1.getWeight() - pa2.getWeight();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return pa1.getAttemptIndex() - pa2.getAttemptIndex();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 37,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/model/session/Session.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.session;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.attempt.Attempt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.attempt.exceptions.AttemptHasBeenAttemptedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.AttemptsSubmittedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.CompetitionEndedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.IncompleteAttemptSubmissionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.NoOngoingSessionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.OngoingSessionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.session.exceptions.PreviousAttemptNotDoneException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Handles the competition session for a particular competition,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * and the participation athletes associated with it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class Session {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static Session session \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ObservableList\u003cParticipation\u003e participationList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ObservableList\u003cParticipationAttempt\u003e attemptList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private List\u003cParticipation\u003e loadedParticipations; // list of participations who have submitted their attempts"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Competition competition; // the competition of the session"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private boolean isPrepared; // whether competition and attempts are ongoing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private boolean isLifterReady; // whether the next lifter is ready to make his attempt"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Session() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.participationList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.attemptList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.loadedParticipations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competition \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.isPrepared \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.isLifterReady \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static Session getInstance() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (session \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            session \u003d new Session();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return session;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Starts a new session by loading the participations of the ongoing competition."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param competition the current competition of the session"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param participations the list of participations in the competition session"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws OngoingSessionException if there is already an ongoing session"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void start(Competition competition, ObservableList\u003cParticipation\u003e participations)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throws OngoingSessionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (isOngoing()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new OngoingSessionException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competition \u003d competition;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.participationList \u003d participations;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.attemptList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (Participation p : participations) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (p.getAreAttemptsSubmitted()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                loadAttempts(p, p.getAttempts());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Loads all 9 attempts that the participation athlete is going to make."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param participation the participation whose just submitted all attempts"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param attempts a list of the participation\u0027s 9 attempts for the different lifts"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws AttemptsSubmittedException when a participant has submitted his/her attempts"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws NoOngoingSessionException if there is no ongoing session"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private void loadAttempts(Participation participation, List\u003cAttempt\u003e attempts)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throws AttemptsSubmittedException, NoOngoingSessionException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!isOngoing()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new NoOngoingSessionException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (loadedParticipations.contains(participation)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new AttemptsSubmittedException(participation.getPerson());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        for (int i \u003d 0; i \u003c attempts.size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            Attempt attempt \u003d attempts.get(i);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (!attempt.getHasAttempted()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                // index param: 1,2,3 are squats attempts in order; 4,5,6 for bench; 7,8,9 deadlift"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                ParticipationAttempt partAttempt \u003d new ParticipationAttempt(participation, attempt, i + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                attemptList.add(partAttempt);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        loadedParticipations.add(participation);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Prepares the session by sorting the participants and their attempts accordingly."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws NoOngoingSessionException if there is no ongoing session to prepare for"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws IncompleteAttemptSubmissionException if there exists athletes who have not submitted their attempts"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private void prepare() throws NoOngoingSessionException, IncompleteAttemptSubmissionException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!isOngoing()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new NoOngoingSessionException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // create list of participations names who have not submitted their attempts"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        List\u003cName\u003e nonSubmissionNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (Participation p : participationList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (!loadedParticipations.contains(p)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                nonSubmissionNames.add(p.getName());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (!nonSubmissionNames.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new IncompleteAttemptSubmissionException(nonSubmissionNames);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        attemptList.sort(new ParticipationAttemptComparator());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        isPrepared \u003d true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        isLifterReady \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Retrieves the next lifter in the queue to attempt his weight."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return the Participation of the next lifter to be attempting his weight"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws NoOngoingSessionException if there is no ongoing session to get the next lifter"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws IncompleteAttemptSubmissionException if there exists athletes who have not submitted their attempts"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws PreviousAttemptNotDoneException if the previous lifter has not completed his attempt,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *                                         and the next lifter is not ready to be called"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws CompetitionEndedException if the last attempt has been made, and the competition has come to an end"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ParticipationAttempt nextLifter() throws NoOngoingSessionException, IncompleteAttemptSubmissionException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            PreviousAttemptNotDoneException, CompetitionEndedException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!isOngoing()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new NoOngoingSessionException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (!isPrepared) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            prepare();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!isLifterReady) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new PreviousAttemptNotDoneException();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (attemptList.isEmpty()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new CompetitionEndedException(participationList.get(0).getCompetition());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        ParticipationAttempt nextParticipationAttempt \u003d attemptList.get(0);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        isLifterReady \u003d false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return nextParticipationAttempt;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Records the attempt made by the lifter."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws NoOngoingSessionException if there is no ongoing competition session"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws AttemptHasBeenAttemptedException if an attempt has already been made"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws IncompleteAttemptSubmissionException if there exists athletes who have not submitted their attempts"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ParticipationAttempt attemptMade() throws NoOngoingSessionException,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            AttemptHasBeenAttemptedException, IncompleteAttemptSubmissionException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!isOngoing()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new NoOngoingSessionException();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (isLifterReady) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new AttemptHasBeenAttemptedException();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        isLifterReady \u003d true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return attemptList.remove(0);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Ends the session, and resets all the data stored by the ended session."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws NoOngoingSessionException if there is no ongoing session"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void end() throws NoOngoingSessionException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!isOngoing()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new NoOngoingSessionException();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        competition \u003d null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        isPrepared \u003d false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        loadedParticipations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Participation getParticipationByName(Name name) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Participation participation \u003d null;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (Participation p : participationList) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (p.getName().equals(name)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                participation \u003d p;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return participation;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ObservableList\u003cParticipation\u003e getParticipationList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return participationList;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ObservableList\u003cParticipationAttempt\u003e getAttemptList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return attemptList;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Competition getCompetition() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competition;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean isOngoing() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competition !\u003d null;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean isPrepared() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return isPrepared;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean isLifterReady() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return isLifterReady;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the participation attempt instance of the following lifter for the session."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @return the next participation attempt in the competition"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ParticipationAttempt getFollowingLifter() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return attemptList.get(1);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } catch (IndexOutOfBoundsException ioe) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 1,
      "belbel98": 208,
      "ooimingsheng": 41
    }
  },
  {
    "path": "src/main/java/seedu/system/model/session/exceptions/AttemptsSubmittedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Gender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Handles the case where an athlete has already submitted his attempts, and is trying to submit again."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class AttemptsSubmittedException extends RuntimeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public AttemptsSubmittedException(Person participant) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.message \u003d String.format(\"%s has already submitted %s attempts.\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                participant.getName(), getHisOrHer(participant.getGender()));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private String getHisOrHer(Gender gender) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // we use if else because there are only 2 valid types of gender"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (gender.equals(Gender.MALE)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return \"his\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return \"her\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 27,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/main/java/seedu/system/model/session/exceptions/CompetitionEndedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Handles the case where the the last attempt has been made, and the competition has ended."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class CompetitionEndedException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public CompetitionEndedException(Competition competition) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(competition + \" has now come to an end.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                + \"Enter \u0027rank\u0027 or \u0027ranklist\u0027 to get the ranks of the participation/competition.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                + \"Enter \u0027endSession\u0027 to end the competition session.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 13,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/model/session/exceptions/IncompleteAttemptSubmissionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Handles the case where the user tries to prepare for the session when not all participants"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * for the competition have submitted their attempts."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class IncompleteAttemptSubmissionException extends RuntimeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String message \u003d \"have not submitted their attempts.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            + \" Try again after all athletes have done so.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final List\u003cName\u003e namesOfNonSubmission;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public IncompleteAttemptSubmissionException(List\u003cName\u003e nameList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.namesOfNonSubmission \u003d nameList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        StringBuilder nameString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (Name name : namesOfNonSubmission) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            nameString.append(name).append(\", \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return nameString.toString() + message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 26,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/model/session/exceptions/NoOngoingSessionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Handles any cases where the user tries to make in-competition session commands when there is no ongoing session."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class NoOngoingSessionException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public NoOngoingSessionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(\"There is no ongoing session currently. Please start a new session.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 10,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/model/session/exceptions/OngoingSessionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Handles the case where the user tries to start a session when there is already an ongoing session."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Prompts the user to end the previous session before starting a new one."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class OngoingSessionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public OngoingSessionException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(\"There is an ongoing competition. Please end the session before starting a new one.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 11,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/model/session/exceptions/PreviousAttemptNotDoneException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.insession.AttemptLiftedCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Handles the case where the user tries to call the next lifter before"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * the previous lifter has finished and recorded his attempt."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class PreviousAttemptNotDoneException extends RuntimeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public PreviousAttemptNotDoneException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(\"The next lifter is not ready to be called until\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                + \" the current lifter has completed and recorded the attempt.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                + \"To record attempt, enter \" + AttemptLiftedCommand.MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 14,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/model/session/exceptions/WrongAttemptIndexException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.session.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Handles the case where a PartcipationAttempt object is created with a wrong attempt index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class WrongAttemptIndexException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public WrongAttemptIndexException(int index) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(\"Attempt Index \" + index"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                + \" is invalid. Attempt index should be a number from 1 to 9 representing the lift and attempt number\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 11,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Contains utility methods for populating {@code Data} with sample data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new CustomDate(\"02/02/1995\"), Gender.MALE),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new CustomDate(\"03/02/1997\"), Gender.FEMALE),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new CustomDate(\"02/03/1996\"), Gender.FEMALE)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static ReadOnlyData\u003cPerson\u003e getSamplePersonData() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cPerson\u003e persons \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            persons.addUniqueElement(samplePerson);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static Competition[] getSampleCompetitions() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new Competition[]{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new Competition("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new Name(\"NUS Powerlifting Open 2019\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new CustomDate(\"08/05/2019\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new CustomDate(\"08/09/2019\"))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static ReadOnlyData\u003cCompetition\u003e getSampleCompetitionData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cCompetition\u003e competitions \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Competition sampleCompetition : getSampleCompetitions()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            competitions.addUniqueElement(sampleCompetition);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitions;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Creates sample participations by make every person  a participant to every competition"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static ReadOnlyData\u003cParticipation\u003e getSampleParticipationData("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e persons,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitions"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cParticipation\u003e participations \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Person person : persons.getListOfElements()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            for (Competition competition : competitions.getListOfElements()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                participations.addUniqueElement(new Participation(person, competition));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participations;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 3,
      "-": 15,
      "ooimingsheng": 47
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/JsonAdaptedCompetition.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Jackson-friendly version of {@link Competition}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "class JsonAdaptedCompetition implements JsonAdaptedData\u003cCompetition\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Competition\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Constructs a {@code JsonAdaptedCompetition} with the given competition details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonAdaptedCompetition(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                                  @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                                  @JsonProperty(\"endDate\") String endDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code Competition} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonAdaptedCompetition(Competition source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        startDate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        endDate \u003d source.getEndDate().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Competition} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted competition."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Competition toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                CustomDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!CustomDate.isValidDate(startDate)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        final CustomDate modelStartDate \u003d new CustomDate(startDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                CustomDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!CustomDate.isValidDate(endDate)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        final CustomDate modelEndDate \u003d new CustomDate(endDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new Competition(modelName, modelStartDate, modelEndDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 78
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/JsonAdaptedData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UniqueElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Jackson-friendly version of {@link Data}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public interface JsonAdaptedData\u003cT extends UniqueElement\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts this Jackson-friendly adapted unique element object into the model\u0027s {@code Data} object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted element."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public T toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 17
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/JsonAdaptedParticipation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.attempt.Attempt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Jackson-friendly version of {@link Participation}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonAdaptedParticipation implements JsonAdaptedData\u003cParticipation\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Participation\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final String PERSON_NOT_FOUND \u003d \"Person was not found in list\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final String COMPETITION_NOT_FOUND \u003d \"Competition was not found in list\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final CustomDate SAMPLE_DATE \u003d new CustomDate(\"01/01/2019\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Gender SAMPLE_GENDER \u003d Gender.MALE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final int OUT_OF_BOUND_INDEX \u003d -1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final String personName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final String competitionName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final List\u003cString\u003e attempts;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Constructs a {@code JsonAdaptedParticipation} with the given participation details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonAdaptedParticipation(@JsonProperty(\"person\") String personName,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                                    @JsonProperty(\"competition\") String competitionName,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                                    @JsonProperty(\"attempts\") List\u003cString\u003e attempts) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.personName \u003d personName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competitionName \u003d competitionName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.attempts \u003d attempts;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code Participation} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonAdaptedParticipation(Participation source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        personName \u003d source.getPerson().getName().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        competitionName \u003d source.getCompetition().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        attempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Attempt attempt : source.getAttempts()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            attempts.add(Attempt.getStringStorageFormOfAttempt(attempt));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Participation toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts the stored data into the model\u0027s {@code Participation} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Participation toModelType("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (personName \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ObservableList\u003cPerson\u003e personObservableList \u003d personReadOnlyData.getListOfElements();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Person personToFind \u003d new Person(new Name(personName), SAMPLE_DATE, SAMPLE_GENDER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        int personIndex \u003d personObservableList.indexOf(personToFind);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (personIndex \u003d\u003d OUT_OF_BOUND_INDEX) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        final Person modelPerson \u003d personObservableList.get(personIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (competitionName \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ObservableList\u003cCompetition\u003e competitionObservableList \u003d competitionReadOnlyData.getListOfElements();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Competition competitionToFind \u003d new Competition(new Name(competitionName), SAMPLE_DATE, SAMPLE_DATE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        int competitionIndex \u003d competitionObservableList.indexOf(competitionToFind);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (competitionIndex \u003d\u003d OUT_OF_BOUND_INDEX) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(COMPETITION_NOT_FOUND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        final Competition modelCompetition \u003d competitionObservableList.get(competitionIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (attempts \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                Attempt.class.getSimpleName() + \" \" + List.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        final List\u003cAttempt\u003e modelAttempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (String str : attempts) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                Attempt attempt \u003d Attempt.parseStringToAttempt(str);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                modelAttempts.add(attempt);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            } catch (IOException exception) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                throw new IllegalValueException(Attempt.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new Participation(modelPerson, modelCompetition, modelAttempts);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 115
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "class JsonAdaptedPerson implements JsonAdaptedData\u003cPerson\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final String dateOfBirth;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"dateOfBirth\") String dateOfBirth,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            @JsonProperty(\"gender\") String gender) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        dateOfBirth \u003d source.getDateOfBirth().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        gender \u003d source.getGender().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (dateOfBirth \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    CustomDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!CustomDate.isValidDate(dateOfBirth)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new IllegalValueException(CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        final CustomDate modelDateOfBirth \u003d new CustomDate(this.dateOfBirth);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        final Gender genderEnum \u003d Gender.getGenderCorrespondingToName(gender);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new Person(modelName, modelDateOfBirth, genderEnum);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 21,
      "-": 50,
      "ooimingsheng": 7
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/JsonSerializableCompetitionData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * An Immutable Competition Data that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "@JsonRootName(value \u003d \"system\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonSerializableCompetitionData implements JsonSerializableData {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COMPETITION \u003d \"Competitions list contains duplicate competition(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final List\u003cJsonAdaptedCompetition\u003e competitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Constructs a {@code JsonSerializableCompetitionData} with the given competitions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSerializableCompetitionData(@JsonProperty(\"competitions\") List\u003cJsonAdaptedCompetition\u003e competitions) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competitions.addAll(competitions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code ReadOnlyData} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCompetitionData}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSerializableCompetitionData(ReadOnlyData\u003cCompetition\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        competitions.addAll(source.getListOfElements().stream().map(JsonAdaptedCompetition::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cCompetition\u003e competitions \u003d new Data();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (JsonAdaptedCompetition jsonAdaptedCompetition : this.competitions) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Competition competition \u003d jsonAdaptedCompetition.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (competitions.hasUniqueElement(competition)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_COMPETITION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            competitions.addUniqueElement(competition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitions;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 56
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/JsonSerializableData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * An Immutable Data that is serializable to JSON format."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public interface JsonSerializableData {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts the stored data into the model\u0027s {@code Data} object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 17
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/JsonSerializableParticipationData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * An Immutable Person Data that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "@JsonRootName(value \u003d \"system\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonSerializableParticipationData implements JsonSerializableData {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PARTICIPATION \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \"Participations list contains duplicate participation(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final List\u003cJsonAdaptedParticipation\u003e participations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Constructs a {@code JsonSerializableParticipationData} with the given participations."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSerializableParticipationData("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @JsonProperty(\"participations\") List\u003cJsonAdaptedParticipation\u003e participations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.participations.addAll(participations);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code ReadOnlyData} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableParticipationData}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSerializableParticipationData(ReadOnlyData\u003cParticipation\u003e source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        participations.addAll(source.getListOfElements().stream().map(JsonAdaptedParticipation::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cParticipation\u003e participations \u003d new Data();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participations;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts the stored data into the model\u0027s {@code Data} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data\u003cParticipation\u003e toModelType("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cParticipation\u003e participations \u003d new Data();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (JsonAdaptedParticipation jsonAdaptedParticipation : this.participations) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Participation participation \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                jsonAdaptedParticipation.toModelType(personReadOnlyData, competitionReadOnlyData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (participations.hasUniqueElement(participation)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PARTICIPATION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            participations.addUniqueElement(participation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participations;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 75
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/JsonSerializablePersonData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * An Immutable Person Data that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "@JsonRootName(value \u003d \"system\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "class JsonSerializablePersonData implements JsonSerializableData {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Constructs a {@code JsonSerializablePersonData} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSerializablePersonData(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code ReadOnlyData} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePersonData}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSerializablePersonData(ReadOnlyData\u003cPerson\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.addAll(source.getListOfElements().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cPerson\u003e persons \u003d new Data();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : this.persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (persons.hasUniqueElement(person)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            persons.addUniqueElement(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 55
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/JsonSystemStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UniqueElement;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * A class to access Data data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonSystemStorage implements SystemStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSystemStorage.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path personDataFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path competitionDataFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path participationDataFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSystemStorage(Path personDataFilePath, Path competitionDataFilePath, Path participationDataFilePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.personDataFilePath \u003d personDataFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competitionDataFilePath \u003d competitionDataFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.participationDataFilePath \u003d participationDataFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getPersonDataFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return personDataFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readData(personDataFilePath, JsonSerializablePersonData.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readData(filePath, JsonSerializablePersonData.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void savePersonData(ReadOnlyData\u003cPerson\u003e readOnlyData) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        saveData(new JsonSerializablePersonData(readOnlyData), personDataFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void savePersonData(ReadOnlyData\u003cPerson\u003e readOnlyData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        saveData(new JsonSerializablePersonData(readOnlyData), filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getCompetitionDataFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitionDataFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e readCompetitionData() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readData(competitionDataFilePath, JsonSerializableCompetitionData.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e readCompetitionData(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readData(filePath, JsonSerializableCompetitionData.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveCompetitionData(ReadOnlyData\u003cCompetition\u003e readOnlyData) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        saveData(new JsonSerializableCompetitionData(readOnlyData), competitionDataFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveCompetitionData(ReadOnlyData\u003cCompetition\u003e readOnlyData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        saveData(new JsonSerializableCompetitionData(readOnlyData), filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getParticipationDataFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participationDataFilePath;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e readParticipationData("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readParticipationData("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            participationDataFilePath,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            personReadOnlyData,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            competitionReadOnlyData"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e readParticipationData("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path filePath,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Optional\u003cJsonSerializableParticipationData\u003e jsonData \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            JsonUtil.readJsonFile(filePath, JsonSerializableParticipationData.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!jsonData.isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return Optional.of(jsonData.get().toModelType(personReadOnlyData, competitionReadOnlyData));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveParticipationData(ReadOnlyData\u003cParticipation\u003e readOnlyData) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        saveData(new JsonSerializableParticipationData(readOnlyData), participationDataFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveParticipationData(ReadOnlyData\u003cParticipation\u003e readOnlyData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        saveData(new JsonSerializableParticipationData(readOnlyData), filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Similar to {@link #readPersonData()}, {@link #readCompetitionData()}}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private \u003cT extends UniqueElement, J extends JsonSerializableData\u003e Optional\u003cReadOnlyData\u003cT\u003e\u003e readData("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path filePath,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Class\u003cJ\u003e classOfData"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Optional\u003cJ\u003e jsonData \u003d JsonUtil.readJsonFile(filePath, classOfData);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!jsonData.isPresent()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return Optional.of(jsonData.get().toModelType());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Similar to {@link #savePersonData(ReadOnlyData)}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveData(JsonSerializableData jsonSerializableData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(jsonSerializableData);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonUtil.saveJsonFile(jsonSerializableData, filePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 173
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "ooimingsheng": 5
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public interface Storage extends SystemStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "ooimingsheng": 5
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Manages storage of Data data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private SystemStorage systemStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public StorageManager(SystemStorage systemStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.systemStorage \u003d systemStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to read user preferences from file: \" + userPrefsStorage.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to save user preferences data to file:\" + userPrefsStorage.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person Data methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getPersonDataFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return systemStorage.getPersonDataFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to read person data from file: \" + systemStorage.getPersonDataFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readPersonData(systemStorage.getPersonDataFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to read person data from file: \" + filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return systemStorage.readPersonData(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void savePersonData(ReadOnlyData\u003cPerson\u003e readOnlyData) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to save person data to file:\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + systemStorage.getPersonDataFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        systemStorage.savePersonData(readOnlyData, systemStorage.getPersonDataFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void savePersonData(ReadOnlyData\u003cPerson\u003e readOnlyData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to save person data to file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        systemStorage.savePersonData(readOnlyData, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Competition Data methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getCompetitionDataFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return systemStorage.getCompetitionDataFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e readCompetitionData() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to read competition data from file: \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + systemStorage.getCompetitionDataFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readCompetitionData(systemStorage.getCompetitionDataFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e readCompetitionData("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path filePath"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to read competition data from file: \" + filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return systemStorage.readCompetitionData(filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveCompetitionData(ReadOnlyData\u003cCompetition\u003e readOnlyData) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to save competition data to file: \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + systemStorage.getCompetitionDataFilePath());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        systemStorage.saveCompetitionData(readOnlyData, systemStorage.getCompetitionDataFilePath());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveCompetitionData(ReadOnlyData\u003cCompetition\u003e readOnlyData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to save competition data to file: \" + filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        systemStorage.saveCompetitionData(readOnlyData, filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Participation Data methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getParticipationDataFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return systemStorage.getParticipationDataFilePath();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e readParticipationData("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to read participation data from file: \" + getParticipationDataFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readParticipationData("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            systemStorage.getParticipationDataFilePath(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            personReadOnlyData,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            competitionReadOnlyData"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e readParticipationData("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path filePath,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to read participation data from file: \" + filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return systemStorage.readParticipationData(filePath, personReadOnlyData, competitionReadOnlyData);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveParticipationData(ReadOnlyData\u003cParticipation\u003e readOnlyData) throws IOException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to save participation data to file: \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + systemStorage.getParticipationDataFilePath());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        systemStorage.saveParticipationData(readOnlyData, systemStorage.getParticipationDataFilePath());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveParticipationData(ReadOnlyData\u003cParticipation\u003e readOnlyData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to save participation data to file: \" + filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        systemStorage.saveParticipationData(readOnlyData, filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "ooimingsheng": 109
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/SystemStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents a storage for {@link Data}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public interface SystemStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns the file path of the person data file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getPersonDataFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns the file path of the competition data file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getCompetitionDataFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns the file path of the participation data file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getParticipationDataFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns Data data as a {@link ReadOnlyData}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns Data data as a {@link ReadOnlyData}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Saves the given {@link ReadOnlyData} to the storage."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param readOnlyData cannot be null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void savePersonData(ReadOnlyData\u003cPerson\u003e readOnlyData) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void savePersonData(ReadOnlyData\u003cPerson\u003e readOnlyData, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns Data data as a {@link ReadOnlyData}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e readCompetitionData(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns Data data as a {@link ReadOnlyData}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e readCompetitionData() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Saves the given {@link ReadOnlyData} to the storage."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param readOnlyData cannot be null."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void saveCompetitionData(ReadOnlyData\u003cCompetition\u003e readOnlyData) throws IOException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Saves the given {@link ReadOnlyData} to the storage."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param readOnlyData cannot be null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void saveCompetitionData(ReadOnlyData\u003cCompetition\u003e readOnlyData, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns Data data as a {@link ReadOnlyData}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e readParticipationData("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path filePath,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns Data data as a {@link ReadOnlyData}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e readParticipationData("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Saves the given {@link ReadOnlyData} to the storage."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param readOnlyData cannot be null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void saveParticipationData(ReadOnlyData\u003cParticipation\u003e readOnlyData) throws IOException;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Saves the given {@link ReadOnlyData} to the storage."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param readOnlyData cannot be null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void saveParticipationData(ReadOnlyData\u003cParticipation\u003e readOnlyData, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 127
    }
  },
  {
    "path": "src/main/java/seedu/system/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents a storage for {@link seedu.system.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Saves the given {@link seedu.system.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "ooimingsheng": 6
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         * @see seedu.system.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "ooimingsheng": 5
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/CompetitionCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * An UI component that displays information of a {@code Competition}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class CompetitionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String FXML \u003d \"CompetitionListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public final Competition competition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CompetitionCard(Competition competition, int displayedIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.competition \u003d competition;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        name.setText(competition.getName().toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        startDate.setText(\"Start Date: \" + competition.getStartDate().toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        endDate.setText(\"End Date: \" + competition.getEndDate().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CompetitionCard card \u003d (CompetitionCard) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                \u0026\u0026 competition.equals(card.competition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 52,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/CompetitionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Panel containing the list of competitions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class CompetitionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String FXML \u003d \"CompetitionListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private ListView\u003cCompetition\u003e competitionListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CompetitionListPanel(ObservableList\u003cCompetition\u003e competitionList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        competitionListView.setItems(competitionList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        competitionListView.setCellFactory(listView -\u003e new CompetitionListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Competition} using a {@code CompetitionCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    class CompetitionListViewCell extends ListCell\u003cCompetition\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        protected void updateItem(Competition competition, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            super.updateItem(competition, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            if (empty || competition \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                setGraphic(new CompetitionCard(competition, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Hides the panel."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Shows the panel."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 40,
      "ooimingsheng": 16
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103-t11-3.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 1,
      "-": 99,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private CompetitionListPanel competitionListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ParticipationListPanel participationListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private StackPane competitionListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private StackPane participationListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        competitionListPanel \u003d new CompetitionListPanel(logic.getFilteredCompetitionList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        competitionListPanelPlaceholder.getChildren().add(competitionListPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        participationListPanel \u003d new ParticipationListPanel(logic.getFilteredParticipationList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        participationListPanelPlaceholder.getChildren().add(participationListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @see seedu.system.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            CommandType commandType \u003d commandResult.getCommandType();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 6,
      "HoWeiChin": 5,
      "-": 186,
      "ooimingsheng": 13
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/ParticipationCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * An UI component that displays information of a {@code Participation}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ParticipationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ParticipationCard.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String FXML \u003d \"ParticipationListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Participation participation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Label competition;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label bestSquat;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label bestBench;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label bestDeadlift;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ParticipationCard(Participation participation, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.participation \u003d participation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        name.setText(participation.getPerson().getName().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        competition.setText(\"Competition: \" + participation.getCompetition().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String[] scores \u003d participation.getThreeLiftScore().split(\"/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        bestSquat.setText(\"Best Squat Attempt: \" + scores[0] + \"kg\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        bestBench.setText(\"Best Bench Press Attempt: \" + scores[1] + \"kg\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        bestDeadlift.setText(\"Best Deadlift Attempt: \" + scores[2] + \"kg\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (!(other instanceof ParticipationCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        ParticipationCard card \u003d (ParticipationCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \u0026\u0026 participation.equals(card.participation);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 52,
      "HoWeiChin": 9,
      "ooimingsheng": 4
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/ParticipationListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Panel containing the list of Participations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ParticipationListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String FXML \u003d \"ParticipationListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ListView\u003cParticipation\u003e participationListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ParticipationListPanel(ObservableList\u003cParticipation\u003e participationList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        participationListView.setItems(participationList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        participationListView.setCellFactory(listView -\u003e new ParticipationListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * {@code Participation} using a {@code ParticipationCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    class ParticipationListViewCell extends ListCell\u003cParticipation\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        protected void updateItem(Participation participation, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            super.updateItem(participation, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (empty || participation \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                setGraphic(new ParticipationCard(participation, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Hides the panel."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Shows the panel."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 43,
      "ooimingsheng": 17
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Data level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label dateOfBirth;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        name.setText(person.getName().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        dateOfBirth.setText(\"Date of Birth: \" + person.getDateOfBirth().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        gender.setText(\"Gender: \" + person.getGender().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 6,
      "-": 53,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Hides the panel."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Shows the panel."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "ooimingsheng": 17
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/Powerlifting.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 1,
      "-": 80,
      "ooimingsheng": 5
    }
  },
  {
    "path": "src/main/java/seedu/system/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 86,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/resources/view/CompetitionListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDate\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 35
    }
  },
  {
    "path": "src/main/resources/view/CompetitionListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  \u003cListView fx:id\u003d\"competitionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003cfx:root minHeight\u003d\"700.0\" minWidth\u003d\"550.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Powerlifting Competition Coordinator\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    \u003cImage url\u003d\"@/images/Powerlifting.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"200.0\" minHeight\u003d\"100\" prefHeight\u003d\"200.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.5, 0.5\" prefHeight\u003d\"400.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "               \u003citems\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                  \u003cTitledPane animated\u003d\"false\" prefHeight\u003d\"532.0\" prefWidth\u003d\"343.0\" text\u003d\"Person list\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                                      \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                  \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                  \u003cTitledPane animated\u003d\"false\" prefHeight\u003d\"440.0\" prefWidth\u003d\"342.0\" text\u003d\"Competition list\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                                      \u003cVBox fx:id\u003d\"competitionList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"competitionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                  \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                  \u003cTitledPane prefHeight\u003d\"454.0\" prefWidth\u003d\"343.0\" text\u003d\"Participation list\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                                \u003cVBox fx:id\u003d\"participationList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"participationListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                  \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "               \u003c/items\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" prefHeight\u003d\"0.0\" prefWidth\u003d\"1038.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "belbel98": 4,
      "HoWeiChin": 5,
      "-": 47,
      "ooimingsheng": 30
    }
  },
  {
    "path": "src/main/resources/view/ParticipationListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cLabel fx:id\u003d\"competition\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$competition\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            \u003cLabel fx:id\u003d\"bestSquat\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bestSquat\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            \u003cLabel fx:id\u003d\"bestBench\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bestBench\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            \u003cLabel fx:id\u003d\"bestDeadlift\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bestDeadlift\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "belbel98": 34,
      "HoWeiChin": 3
    }
  },
  {
    "path": "src/main/resources/view/ParticipationListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    \u003cListView fx:id\u003d\"participationListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "belbel98": 9
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfBirth\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/system/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/test/java/seedu/system/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/test/java/seedu/system/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 133,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/test/java/seedu/system/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/test/java/seedu/system/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/test/java/seedu/system/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 105,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/test/java/seedu/system/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "ooimingsheng": 4
    }
  },
  {
    "path": "src/test/java/seedu/system/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/test/java/seedu/system/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/test/java/seedu/system/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 141,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.DOB_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.AddPersonCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.ListPersonCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.storage.JsonSerializableData;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.storage.JsonSystemStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSystemStorage jsonSystemStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSystemStorage("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                temporaryFolder.resolve(\"tempPersons.json\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                temporaryFolder.resolve(\"tempCompetitions.json\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                temporaryFolder.resolve(\"tempParticipations.json\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        StorageManager storage \u003d new StorageManager(jsonSystemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String deleteCommand \u003d \"deletePerson 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String listCommand \u003d ListPersonCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandSuccess(listCommand, ListPersonCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // Setup LogicManager with JsonSystemIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSystemStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSystemIoExceptionThrowingStub("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionPersons.json\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionCompetitions.json\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionParticipations.json\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String addCommand \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + DOB_DESC_AMY + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new ModelManager(model.getPersons(), model.getCompetitions(), model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static class JsonSystemIoExceptionThrowingStub extends JsonSystemStorage {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        private JsonSystemIoExceptionThrowingStub("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Path personDataFilePath,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Path competitionDataFilePath,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Path participationDataFilePath"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            super(personDataFilePath, competitionDataFilePath, participationDataFilePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void saveData(JsonSerializableData jsonSerializableData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 1,
      "-": 122,
      "ooimingsheng": 55
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, CommandType.GENERAL)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, CommandType.GENERAL)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, CommandType.GENERAL)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new CommandResult(\"feedback\", true, false, CommandType.GENERAL).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new CommandResult(\"feedback\", false, true, CommandType.GENERAL).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "ooimingsheng": 8
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_RANK_METHOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditPersonCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String VALID_DOB_AMY \u003d \"11/02/1995\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String VALID_DOB_BOB \u003d \"13/01/1995\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"female\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"male\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String VALID_RANK_METHOD \u003d \"deadlift\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String DOB_DESC_AMY \u003d \" \" + PREFIX_DOB + VALID_DOB_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String DOB_DESC_BOB \u003d \" \" + PREFIX_DOB + VALID_DOB_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String DEADLIFT_RANK_METHOD_DESC \u003d \" \" + PREFIX_RANK_METHOD + VALID_RANK_METHOD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String INVALID_DOB_DESC \u003d \" \" + PREFIX_DOB + \"911a\"; // does not follow DD/MM/YYYY format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"shemale\"; // only male or female allowed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String INVALID_RANK_METHOD_DESC \u003d \" \" + PREFIX_RANK_METHOD + \"shoulder press\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final EditPersonCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final EditPersonCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withDateOfBirth(VALID_DOB_AMY).withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withDateOfBirth(VALID_DOB_BOB).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        } catch (CommandException | ParseException ce) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data expectedAddressBook \u003d new Data(actualModel.getPersons());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getPersons());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        final String[] splitName \u003d person.getName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 15,
      "-": 84,
      "ooimingsheng": 22
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/AddCompetitionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.testutil.CompetitionBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class AddCompetitionCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void constructor_nullCompetition_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCompetitionCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        ModelStubAcceptingCompetitionAdded modelStub \u003d new ModelStubAcceptingCompetitionAdded();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Competition validCompetition \u003d new CompetitionBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CommandResult commandResult \u003d new AddCompetitionCommand(validCompetition).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertEquals(String.format(AddCompetitionCommand.MESSAGE_SUCCESS, validCompetition),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertEquals(Arrays.asList(validCompetition), modelStub.competitionsAdded);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void execute_duplicateCompetition_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Competition validCompetition \u003d new CompetitionBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        AddCompetitionCommand addCompetitionCommand \u003d new AddCompetitionCommand(validCompetition);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCompetition(validCompetition);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                CommandException.class,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                AddCompetitionCommand.MESSAGE_DUPLICATE_COMPETITION, () -\u003e addCompetitionCommand.execute(modelStub)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Competition nusComp \u003d new CompetitionBuilder().withName(\"NUS PL\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Competition usComp \u003d new CompetitionBuilder().withName(\"USA PL\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        AddCompetitionCommand addNusCompCommand \u003d new AddCompetitionCommand(nusComp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        AddCompetitionCommand addUsCompCommand \u003d new AddCompetitionCommand(usComp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertTrue(addNusCompCommand.equals(addNusCompCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        AddCompetitionCommand addNusCompCommandCopy \u003d new AddCompetitionCommand(nusComp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertTrue(addNusCompCommand.equals(addNusCompCommandCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertFalse(addNusCompCommand.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertFalse(addNusCompCommand.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // different competition -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertFalse(addNusCompCommand.equals(addUsCompCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * A Model stub that contains a single competition."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private class ModelStubWithCompetition extends ModelStub {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        private final Competition competition;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        ModelStubWithCompetition(Competition competition) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            requireNonNull(competition);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            this.competition \u003d competition;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public boolean hasCompetition(Competition competition) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            requireNonNull(competition);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return this.competition.isSameElement(competition);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * A Model stub that always accept the competition being added."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private class ModelStubAcceptingCompetitionAdded extends ModelStub {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        final ArrayList\u003cCompetition\u003e competitionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public boolean hasCompetition(Competition competition) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            requireNonNull(competition);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return competitionsAdded.stream().anyMatch(competition::isSameElement);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public void addCompetition(Competition competition) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            requireNonNull(competition);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            competitionsAdded.add(competition);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public ReadOnlyData\u003cCompetition\u003e getCompetitions() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return new Data();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 120
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/AddPersonCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class AddPersonCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model \u003d new ModelManager(getTypicalPersonData(), getTypicalCompetitionData(), new Data(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                model.getPersons(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                model.getCompetitions(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                model.getParticipations(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandSuccess(new AddPersonCommand(validPerson), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Person personInList \u003d model.getPersons().getListOfElements().get(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandFailure(new AddPersonCommand(personInList), model, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "ooimingsheng": 25
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/AddPersonCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class AddPersonCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPersonCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        CommandResult commandResult \u003d new AddPersonCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        AddPersonCommand addPersonCommand \u003d new AddPersonCommand(validPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            CommandException.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            AddPersonCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addPersonCommand.execute(modelStub)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return this.person.isSameElement(person);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSameElement);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public ReadOnlyData\u003cPerson\u003e getPersons() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new Data();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    // TODO: private class ModelStubWithCompetition extends ModelStub"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    // TODO: private class ModelStubWithParticipation extends ModelStub"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 93,
      "ooimingsheng": 28
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model model \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTypicalPersonData(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new Data(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalPersonData(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new Data(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new UserPrefs()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        expectedModel.setPersons(new Data());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        expectedModel.setCompetitions(new Data());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        expectedModel.setParticipations(new Data());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "ooimingsheng": 24
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/DeleteCompetitionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class DeleteCompetitionCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Data\u003cPerson\u003e samplePersonData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Data\u003cCompetition\u003e sampleCompetitionData \u003d getTypicalCompetitionData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Data\u003cParticipation\u003e sampleParticipationData \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            new Data(SampleDataUtil.getSampleParticipationData(samplePersonData, sampleCompetitionData));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    getTypicalPersonData(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    sampleParticipationData,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    new UserPrefs()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Competition compToDelete \u003d model.getFilteredCompetitionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        DeleteCompetitionCommand deleteCompCommand \u003d new DeleteCompetitionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCompetitionCommand.MESSAGE_DELETE_COMPETITION_SUCCESS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                compToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersons(), model.getCompetitions(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        expectedModel.deleteCompetition(compToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertCommandSuccess(deleteCompCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCompetitionList().size() + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        DeleteCompetitionCommand deleteCompCommand \u003d new DeleteCompetitionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertCommandFailure(deleteCompCommand, model, Messages.MESSAGE_INVALID_COMPETITION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        DeleteCompetitionCommand deleteFirstCommand \u003d new DeleteCompetitionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        DeleteCompetitionCommand deleteSecondCommand \u003d new DeleteCompetitionCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        DeleteCompetitionCommand deleteFirstCommandCopy \u003d new DeleteCompetitionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 87
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/DeletePersonCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * {@code DeletePersonCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class DeletePersonCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cPerson\u003e samplePersonData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cCompetition\u003e sampleCompetitionData \u003d getTypicalCompetitionData();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cParticipation\u003e sampleParticipationData \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new Data(SampleDataUtil.getSampleParticipationData(samplePersonData, sampleCompetitionData));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new ModelManager("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalPersonData(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            sampleParticipationData,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new UserPrefs()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersons(), model.getCompetitions(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersons(), model.getCompetitions(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPersons().getListOfElements().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        DeletePersonCommand deleteFirstCommand \u003d new DeletePersonCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        DeletePersonCommand deleteSecondCommand \u003d new DeletePersonCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        DeletePersonCommand deleteFirstCommandCopy \u003d new DeletePersonCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 12,
      "-": 72,
      "ooimingsheng": 43
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/EditCompetitionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.testutil.CompetitionBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.testutil.EditCompetitionDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class EditCompetitionCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Data\u003cPerson\u003e samplePersonData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Data\u003cCompetition\u003e sampleCompetitionData \u003d getTypicalCompetitionData();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Data\u003cParticipation\u003e sampleParticipationData \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            new Data(SampleDataUtil.getSampleParticipationData(samplePersonData, sampleCompetitionData));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    getTypicalPersonData(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    sampleParticipationData,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    new UserPrefs()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Competition editedCompetition \u003d new CompetitionBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditCompetitionCommand.EditCompetitionDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                new EditCompetitionDescriptorBuilder(editedCompetition).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditCompetitionCommand editCompCommand \u003d new EditCompetitionCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String expectedMessage \u003d String.format(EditCompetitionCommand.MESSAGE_EDIT_COMPETITION_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                editedCompetition);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Data(model.getPersons()), new Data(model.getCompetitions()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        expectedModel.setCompetition(model.getFilteredCompetitionList().get(0), editedCompetition);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertCommandSuccess(editCompCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Index indexLastComp \u003d Index.fromOneBased(model.getFilteredCompetitionList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Competition lastComp \u003d model.getFilteredCompetitionList().get(indexLastComp.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CompetitionBuilder compInList \u003d new CompetitionBuilder(lastComp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Competition editedComp \u003d compInList.withName(\"NUS 2022\").withStartDate(\"12/01/2019\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withEndDate(\"12/01/2019\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditCompetitionCommand.EditCompetitionDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                new EditCompetitionDescriptorBuilder().withName(\"NUS 2022\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withStartDate(\"12/01/2019\").withEndDate(\"12/01/2019\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditCompetitionCommand editCompCommand \u003d new EditCompetitionCommand(indexLastComp, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String expectedMessage \u003d String.format(EditCompetitionCommand.MESSAGE_EDIT_COMPETITION_SUCCESS, editedComp);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Data(model.getPersons()), new Data(model.getCompetitions()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        expectedModel.setCompetition(lastComp, editedComp);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertCommandSuccess(editCompCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 77
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/EditPersonCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * EditPersonCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class EditPersonCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cPerson\u003e samplePersonData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cCompetition\u003e sampleCompetitionData \u003d getTypicalCompetitionData();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cParticipation\u003e sampleParticipationData \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new Data(SampleDataUtil.getSampleParticipationData(samplePersonData, sampleCompetitionData));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new ModelManager("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalPersonData(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            sampleParticipationData,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new UserPrefs()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Data(model.getPersons()), new Data(model.getCompetitions()),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Data(model.getPersons()), new Data(model.getCompetitions()),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Data(model.getPersons()), new Data(model.getCompetitions()),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Data(model.getPersons()), new Data(model.getCompetitions()),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person personInList \u003d model.getPersons().getListOfElements().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPersons().getListOfElements().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        final EditPersonCommand standardCommand \u003d new EditPersonCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditPersonCommand commandWithSameValues \u003d new EditPersonCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 21,
      "-": 108,
      "ooimingsheng": 62
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // different DOB -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // different gender -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 4,
      "-": 37,
      "ooimingsheng": 8
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.outofsession.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, ExitCommand.COMMAND_TYPE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "ooimingsheng": 8
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/FindPersonCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindPersonCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class FindPersonCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cPerson\u003e samplePersonData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cCompetition\u003e sampleCompetitionData \u003d getTypicalCompetitionData();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cParticipation\u003e sampleParticipationData \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new Data(SampleDataUtil.getSampleParticipationData(samplePersonData, sampleCompetitionData));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new ModelManager("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalPersonData(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            sampleParticipationData,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new UserPrefs()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Model expectedModel \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new ModelManager(model.getPersons(), model.getCompetitions(), model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        FindPersonCommand findFirstCommand \u003d new FindPersonCommand(firstPredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        FindPersonCommand findSecondCommand \u003d new FindPersonCommand(secondPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        FindPersonCommand findFirstCommandCopy \u003d new FindPersonCommand(firstPredicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        FindPersonCommand command \u003d new FindPersonCommand(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        FindPersonCommand command \u003d new FindPersonCommand(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "ooimingsheng": 39
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/ListPersonCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListPersonCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class ListPersonCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cPerson\u003e samplePersonData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cCompetition\u003e sampleCompetitionData \u003d getTypicalCompetitionData();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cParticipation\u003e sampleParticipationData \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new Data(SampleDataUtil.getSampleParticipationData(samplePersonData, sampleCompetitionData));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTypicalPersonData(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                sampleParticipationData,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        expectedModel \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new ModelManager(model.getPersons(), model.getCompetitions(), model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandSuccess(new ListPersonCommand(), model, ListPersonCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandSuccess(new ListPersonCommand(), model, ListPersonCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 2,
      "-": 24,
      "ooimingsheng": 31
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.participation.Participation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.session.ParticipationAttempt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.session.Session;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void setUserPrefsFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d Person \u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void setPersons(ReadOnlyData\u003cPerson\u003e newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public ReadOnlyData\u003cPerson\u003e getPersons() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public int getTotalWins(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public Person getWinner(Competition competition) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d Competition \u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void addCompetition(Competition competition) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void setCompetitions(ReadOnlyData\u003cCompetition\u003e newData) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public ReadOnlyData\u003cCompetition\u003e getCompetitions() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean hasCompetition(Competition competition) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void deleteCompetition(Competition target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void setCompetition(Competition target, Competition editedCompetition) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public ObservableList\u003cCompetition\u003e getFilteredCompetitionList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void updateFilteredCompetitionList(Predicate\u003cCompetition\u003e predicate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d Participation \u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void addParticipation(Participation person) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void setParticipations(ReadOnlyData\u003cParticipation\u003e newData) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public ReadOnlyData\u003cParticipation\u003e getParticipations() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean hasParticipation(Participation person) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void deleteParticipation(Participation target) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void deleteDependentParticipations(Competition competition) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void deleteDependentParticipations(Person person) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void setParticipation(Participation target, Participation editedParticipation) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public ObservableList\u003cParticipation\u003e getFilteredParticipationList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void updateFilteredParticipationList(Predicate\u003cParticipation\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public Session getSession() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public Competition getOngoingCompetition() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean hasOngoingSession() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void startSession(Competition competition, ObservableList\u003cParticipation\u003e participations) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public ParticipationAttempt makeAttempt() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public ParticipationAttempt getNextLifter() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public ParticipationAttempt getFollowingLifter() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void endSession() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 238
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/commands/outofsession/OutOfSessionHelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.commands.outofsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.outofsession.OutOfSessionHelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class OutOfSessionHelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new CommandResult(SHOWING_HELP_MESSAGE, true, false, OutOfSessionHelpCommand.COMMAND_TYPE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertCommandSuccess(new OutOfSessionHelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "ooimingsheng": 10
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/parser/AddPersonCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.DOB_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.AddPersonCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.outofsession.AddPersonCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class AddPersonCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private AddPersonCommandParser parser \u003d new AddPersonCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + DOB_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                + GENDER_DESC_BOB, new AddPersonCommand(expectedPerson));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + DOB_DESC_BOB + GENDER_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // missing DOB prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_DOB_BOB + GENDER_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // missing gender prefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DOB_DESC_BOB + VALID_GENDER_BOB , expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_DOB_BOB + VALID_GENDER_BOB, expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DOB_DESC_BOB + GENDER_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // invalid DOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_DOB_DESC + GENDER_DESC_BOB, CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_DOB_DESC + GENDER_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + DOB_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 16,
      "-": 35,
      "ooimingsheng": 28
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/parser/DeleteCompetitionCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.DeleteCompetitionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.outofsession.DeleteCompetitionCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * outside of the DeleteCompetitionCommand code. For example, inputs \"2\" and \"2 xyz\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * same path through the DeleteCompetitionCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class DeleteCompetitionCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private DeleteCompetitionCommandParser parser \u003d new DeleteCompetitionCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void parse_validArgs_returnsDeleteCompetitionCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertParseSuccess(parser, \"2\", new DeleteCompetitionCommand(INDEX_SECOND));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertParseFailure(parser, \"QQQ\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            DeleteCompetitionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 34
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/parser/DeletePersonCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.DeletePersonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.outofsession.DeletePersonCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * outside of the DeletePersonCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * same path through the DeletePersonCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class DeletePersonCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private DeletePersonCommandParser parser \u003d new DeletePersonCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeletePersonCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            DeletePersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 2,
      "-": 20,
      "ooimingsheng": 12
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/parser/EditPersonCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.DOB_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.DOB_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_DOB_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditPersonCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.outofsession.EditPersonCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class EditPersonCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private EditPersonCommandParser parser \u003d new EditPersonCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertParseFailure(parser, \"1\", EditPersonCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DOB_DESC, CustomDate.MESSAGE_CONSTRAINTS); // invalid DOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC, Gender.MESSAGE_CONSTRAINTS); // invalid gender"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // invalid DOB followed by valid gender"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DOB_DESC + GENDER_DESC_AMY, CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // valid DOB followed by invalid DOB. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, \"1\" + DOB_DESC_BOB + INVALID_DOB_DESC, CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DOB_DESC"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                + VALID_GENDER_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY + DOB_DESC_BOB + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withDateOfBirth(VALID_DOB_BOB).withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DOB_DESC_BOB;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // DOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DOB_DESC_AMY;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withDateOfBirth(VALID_DOB_AMY).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // gender"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DOB_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                + DOB_DESC_BOB + DOB_DESC_BOB + GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withDateOfBirth(VALID_DOB_BOB)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DOB_DESC + DOB_DESC_BOB;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_DOB_DESC + GENDER_DESC_BOB + DOB_DESC_BOB;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withDateOfBirth(VALID_DOB_BOB)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 37,
      "-": 89,
      "ooimingsheng": 39
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/parser/FindPersonCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.FindPersonCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.outofsession.FindPersonCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class FindPersonCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private FindPersonCommandParser parser \u003d new FindPersonCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            FindPersonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        FindPersonCommand expectedFindPersonCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindPersonCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindPersonCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "ooimingsheng": 15
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/parser/ListParticipationCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.ListParticipationCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.system.logic.parser.outofsession.ListParticipationCommandParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class ListParticipationCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private ListParticipationCommandParser parser \u003d new ListParticipationCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void constructor_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void parse_emptyArg_returnListPartCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertParseSuccess(parser, \"\", new ListParticipationCommand());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void parse_validArgs_returnsListPartCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String userInput \u003d \"Test of Strength 2019\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ListParticipationCommand expectedListPartCommand \u003d new ListParticipationCommand(new Name(userInput));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedListPartCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void parse_invalidCompetitionAsArgs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String userInput \u003d \"naijfbgaf\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_COMPETITION_NOT_FOUND + userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 32,
      "ooimingsheng": 9
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String INVALID_DOB \u003d \"1.2.1995\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String INVALID_GENDER \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String VALID_DOB \u003d \"12/03/2012\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String VALID_GENDER \u003d \"male\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DOB));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate expectedDateOfBirth \u003d new CustomDate(VALID_DOB);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDate(VALID_DOB));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String dobWithWhitespace \u003d WHITESPACE + VALID_DOB + WHITESPACE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate expectedDateOfBirth \u003d new CustomDate(VALID_DOB);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertEquals(expectedDateOfBirth , ParserUtil.parseDate(dobWithWhitespace));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseGender_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGender(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseGender_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGender(INVALID_GENDER));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseGender_validValueWithoutWhitespace_returnsGender() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Gender expectedGender \u003d VALID_GENDER \u003d\u003d \"male\" ? Gender.MALE : Gender.FEMALE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(VALID_GENDER));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 25,
      "-": 76,
      "ooimingsheng": 7
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/parser/RanklistCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.DEADLIFT_RANK_METHOD_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.RankMethod;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.insession.RanklistCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.insession.RanklistCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class RanklistCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private RanklistCommandParser parser \u003d new RanklistCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void parse_validArgs_returnsRanklistCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertParseSuccess(parser, DEADLIFT_RANK_METHOD_DESC, new RanklistCommand(RankMethod.DEADLIFT));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertParseFailure(parser, \"cannot/ deadlift\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            RanklistCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 29
    }
  },
  {
    "path": "src/test/java/seedu/system/logic/parser/SystemParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.system.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.AddPersonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.DeletePersonCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditPersonCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.FindPersonCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.ListPersonCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.OutOfSessionHelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class SystemParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final SystemParser parser \u003d new SystemParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        AddPersonCommand command \u003d (AddPersonCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(new AddPersonCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        DeletePersonCommand command \u003d (DeletePersonCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                DeletePersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertEquals(new DeletePersonCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        EditPersonCommand command \u003d (EditPersonCommand) parser.parseCommand(EditPersonCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertEquals(new EditPersonCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        FindPersonCommand command \u003d (FindPersonCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                FindPersonCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(new FindPersonCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(parser.parseCommand(OutOfSessionHelpCommand.COMMAND_WORD) instanceof OutOfSessionHelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(parser.parseCommand(OutOfSessionHelpCommand.COMMAND_WORD + \" 3\") instanceof OutOfSessionHelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(parser.parseCommand(ListPersonCommand.COMMAND_WORD) instanceof ListPersonCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(parser.parseCommand(ListPersonCommand.COMMAND_WORD + \" 3\") instanceof ListPersonCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            OutOfSessionHelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 7,
      "-": 62,
      "ooimingsheng": 32
    }
  },
  {
    "path": "src/test/java/seedu/system/model/DataTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class DataTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final Data\u003cPerson\u003e persons \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(Collections.emptyList(), persons.getListOfElements());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e persons.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void resetData_withValidReadOnlySystem_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data newData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(newData, persons);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        DataStub newData \u003d new DataStub(newPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e persons.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e persons.hasUniqueElement(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse(persons.hasUniqueElement(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.addUniqueElement(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(persons.hasUniqueElement(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.addUniqueElement(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(persons.hasUniqueElement(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e persons.getListOfElements().remove(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * A stub ReadOnlyData whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static class DataStub implements ReadOnlyData {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        DataStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public ObservableList\u003cPerson\u003e getListOfElements() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 2,
      "-": 69,
      "ooimingsheng": 29
    }
  },
  {
    "path": "src/test/java/seedu/system/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalCompetitions.NUS_OPEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.DataBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(new Data(), new Data(modelManager.getPersons()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        userPrefs.setPersonDataFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        userPrefs.setPersonDataFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefsFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        modelManager.setUserPrefsFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(path, modelManager.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data personData \u003d new DataBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data competitionData \u003d new DataBuilder().withCompetition(NUS_OPEN).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data participationData \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new Data(SampleDataUtil.getSampleParticipationData(personData, competitionData));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data differentPersonData \u003d new Data();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data differentCompetitionData \u003d new Data();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data differentParticipationData \u003d new Data();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        modelManager \u003d new ModelManager(personData, competitionData, participationData, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(personData, competitionData, participationData, userPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            modelManager.equals("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new ModelManager(differentPersonData, competitionData, participationData, userPrefs)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            )"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            modelManager.equals("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new ModelManager(personData, differentCompetitionData, participationData, userPrefs)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            )"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            modelManager.equals("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new ModelManager(personData, competitionData, differentParticipationData, userPrefs)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            )"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String[] keywords \u003d ALICE.getName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            modelManager.equals("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new ModelManager(personData, differentCompetitionData, participationData, userPrefs)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        differentUserPrefs.setPersonDataFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            modelManager.equals("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new ModelManager(personData, competitionData, participationData, differentUserPrefs)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            )"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 1,
      "-": 109,
      "ooimingsheng": 49
    }
  },
  {
    "path": "src/test/java/seedu/system/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPersonDataFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/test/java/seedu/system/model/person/AddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/test/java/seedu/system/model/person/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/test/java/seedu/system/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // Keywords match dob and gender, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12/02/1995\", \"female\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withDateOfBirth(\"12/02/1995\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withGender(\"female\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 4,
      "-": 69,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/test/java/seedu/system/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/test/java/seedu/system/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(ALICE.isSameElement(ALICE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse(ALICE.isSameElement(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // different DOB and gender, but same name -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertTrue(ALICE.isSameElement(editedAlice));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse(ALICE.isSameElement(editedAlice));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // same name, same DOB, different gender -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(ALICE.isSameElement(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // same name, different DOB, same gender -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(ALICE.isSameElement(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // different name, same DOB, same gender -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertFalse(ALICE.isSameElement(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // different DOB -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // different gender -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 13,
      "-": 49,
      "ooimingsheng": 16
    }
  },
  {
    "path": "src/test/java/seedu/system/model/person/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/test/java/seedu/system/model/person/UniqueElementListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UniqueElementList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class UniqueElementListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final UniqueElementList\u003cPerson\u003e uniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setElement(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setElement(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(ElementNotFoundException.class, () -\u003e uniquePersonList.setElement(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniquePersonList.setElement(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        UniqueElementList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniquePersonList.setElement(ALICE, editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        UniqueElementList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniquePersonList.setElement(ALICE, BOB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        UniqueElementList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniquePersonList.setElement(ALICE, BOB));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(ElementNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        UniqueElementList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setElements((UniqueElementList\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        UniqueElementList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniquePersonList.setElements(expectedUniquePersonList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setElements((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniquePersonList.setElements(personList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        UniqueElementList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniquePersonList.setElements(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 3,
      "-": 135,
      "ooimingsheng": 30
    }
  },
  {
    "path": "src/test/java/seedu/system/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/test/java/seedu/system/storage/JsonAdaptedCompetitionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.storage.JsonAdaptedCompetition.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalCompetitions.NUS_OPEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonAdaptedCompetitionTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final String INVALID_NAME \u003d \"NT@ OPEN\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final String INVALID_START_DATE \u003d \"+01/01/2001\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final String INVALID_END_DATE \u003d \"01/O1/2002\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final String VALID_NAME \u003d NUS_OPEN.getName().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final String VALID_START_DATE \u003d NUS_OPEN.getStartDate().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final String VALID_END_DATE \u003d NUS_OPEN.getEndDate().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void toModelType_validCompetitionDetails_returnsCompetition() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonAdaptedCompetition competition \u003d new JsonAdaptedCompetition(NUS_OPEN);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(NUS_OPEN, competition.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonAdaptedPerson competition \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_START_DATE, VALID_END_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, competition::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonAdaptedCompetition competition \u003d new JsonAdaptedCompetition(null, VALID_START_DATE, VALID_END_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, competition::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void toModelType_invalidStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonAdaptedCompetition competition \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new JsonAdaptedCompetition(VALID_NAME, INVALID_START_DATE, VALID_END_DATE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String expectedMessage \u003d CustomDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, competition::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void toModelType_nullStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonAdaptedCompetition competition \u003d new JsonAdaptedCompetition(VALID_NAME, null, VALID_END_DATE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CustomDate.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, competition::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void toModelType_invalidEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonAdaptedCompetition competition \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonAdaptedCompetition(VALID_NAME, VALID_START_DATE, INVALID_END_DATE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String expectedMessage \u003d CustomDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, competition::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void toModelType_nullEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonAdaptedCompetition competition \u003d new JsonAdaptedCompetition(VALID_NAME, VALID_START_DATE, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CustomDate.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, competition::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 74
    }
  },
  {
    "path": "src/test/java/seedu/system/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String INVALID_DOB \u003d \"+65/12/34\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"hemale\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String VALID_DOB \u003d BENSON.getDateOfBirth().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_DOB, VALID_GENDER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_DOB, VALID_GENDER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void toModelType_invalidDateOfBirth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_DOB, VALID_GENDER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String expectedMessage \u003d CustomDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void toModelType_nullDateOfBirthThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_GENDER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CustomDate.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_DOB, INVALID_GENDER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_DOB, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 18,
      "-": 46,
      "ooimingsheng": 11
    }
  },
  {
    "path": "src/test/java/seedu/system/storage/JsonSerializableCompetitionDataTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.TypicalCompetitions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonSerializableCompetitionDataTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableCompetitionDataTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path TYPICAL_COMPETITIONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalData.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path INVALID_COMPETITION_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidCompetitionData.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path DUPLICATE_COMPETITION_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateCompetitionData.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void toModelType_typicalCompetitionsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSerializableCompetitionData dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_COMPETITIONS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                JsonSerializableCompetitionData.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data dataBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data typicalCompetitionData \u003d TypicalCompetitions.getTypicalCompetitionData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(dataBookFromFile, typicalCompetitionData);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSerializableCompetitionData dataFromFile \u003d JsonUtil.readJsonFile(INVALID_COMPETITION_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                JsonSerializableCompetitionData.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSerializableCompetitionData dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_COMPETITION_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                JsonSerializableCompetitionData.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCompetitionData.MESSAGE_DUPLICATE_COMPETITION,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 48
    }
  },
  {
    "path": "src/test/java/seedu/system/storage/JsonSerializablePersonDataTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonSerializablePersonDataTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePersonDataTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalData.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonData.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonData.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSerializablePersonData dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                JsonSerializablePersonData.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data personDataFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data typicalPersonsData \u003d TypicalPersons.getTypicalPersonData();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(personDataFromFile, typicalPersonsData);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSerializablePersonData dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                JsonSerializablePersonData.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSerializablePersonData dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                JsonSerializablePersonData.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePersonData.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "ooimingsheng": 21
    }
  },
  {
    "path": "src/test/java/seedu/system/storage/JsonSystemStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonSystemStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSystemStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPersonData(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Reads the person data at the specified {@code filePath}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private java.util.Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData(String filePath) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new JsonSystemStorage("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Paths.get(filePath),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Paths.get(\"SomeFile.json\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Paths.get(\"SomeOtherFile.json\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ).readPersonData(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse(readPersonData(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPersonData(\"notJsonFormatData.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void readSystem_invalidPersonSystem_throwDataConversionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPersonData(\"invalidPersonData.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void readSystem_invalidAndValidPersonSystem_throwDataConversionException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPersonData(\"invalidAndValidPersonData.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void readAndSaveSystem_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path personDataFilePath \u003d testFolder.resolve(\"TempPersonData.json\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path competitionDataFilePath \u003d testFolder.resolve(\"TempCompetitionData.json\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path participationDataFilePath \u003d testFolder.resolve(\"TempParticipationData.json\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cPerson\u003e personData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSerializablePersonData originalJsonSerializablePersonData \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSerializablePersonData(personData);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSystemStorage jsonSystemStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSystemStorage("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                personDataFilePath,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                competitionDataFilePath,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                participationDataFilePath"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        jsonSystemStorage.saveData(originalJsonSerializablePersonData, personDataFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData readBack \u003d jsonSystemStorage.readPersonData(personDataFilePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(personData, new Data(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        personData.addUniqueElement(HOON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        personData.removeElement(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSerializablePersonData modifiedJsonSerializablePersonData \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSerializablePersonData(personData);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        jsonSystemStorage.saveData(modifiedJsonSerializablePersonData, personDataFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        readBack \u003d jsonSystemStorage.readPersonData(personDataFilePath).get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(personData, new Data(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        personData.addUniqueElement(IDA);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        jsonSystemStorage.savePersonData(personData); // file path not specified"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        readBack \u003d jsonSystemStorage.readPersonData().get(); // file path not specified"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(personData, new Data(readBack));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveSystem_nullSystem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePersonData(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Saves {@code data} at the specified {@code filePath}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private void savePersonData(ReadOnlyData data, String filePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSystemStorage("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                Paths.get(filePath),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                Paths.get(\"SomeFile.json\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                Paths.get(\"SomeOtherFile.json\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            ).saveData(new JsonSerializablePersonData(data), addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveSystem_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePersonData(new Data(), null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 132
    }
  },
  {
    "path": "src/test/java/seedu/system/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        userPrefs.setPersonDataFilePath(Paths.get(\"personData.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        userPrefs.setCompetitionDataFilePath(Paths.get(\"competitionData.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        userPrefs.setParticipationDataFilePath(Paths.get(\"participationData.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 117,
      "ooimingsheng": 8
    }
  },
  {
    "path": "src/test/java/seedu/system/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.ReadOnlyData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSystemStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSystemStorage("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTempFilePath(\"tempPersons\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTempFilePath(\"tempCompetitions\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTempFilePath(\"tempParticipations\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         * {@link JsonSystemStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonSystemStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cPerson\u003e original \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        storageManager.savePersonData(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e retrieved \u003d storageManager.readPersonData().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(original, new Data(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertNotNull(storageManager.getPersonDataFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "ooimingsheng": 20
    }
  },
  {
    "path": "src/test/java/seedu/system/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/test/java/seedu/system/testutil/CompetitionBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * A utility class to help with building Competition objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class CompetitionBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"NUS Powerlifting Open\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CustomDate DEFAULT_START_DATE \u003d new CustomDate(\"01/01/2019\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CustomDate DEFAULT_END_DATE \u003d new CustomDate(\"01/01/2019\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private CustomDate startDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private CustomDate endDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CompetitionBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        startDate \u003d DEFAULT_START_DATE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        endDate \u003d DEFAULT_END_DATE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Initializes the CompetitionBuilder with the data of {@code competitionToCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CompetitionBuilder(Competition competitionToCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        name \u003d competitionToCopy.getName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        startDate \u003d competitionToCopy.getStartDate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        endDate \u003d competitionToCopy.getEndDate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Sets the {@code Name} of the {@code Competition} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CompetitionBuilder withName(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Sets the {@code StartDate} of the {@code Competition} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CompetitionBuilder withStartDate(String dateString) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.startDate \u003d new CustomDate(dateString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Sets the {@code EndDate} of the {@code Competition} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CompetitionBuilder withEndDate(String dateString) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.endDate \u003d new CustomDate(dateString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Competition build() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new Competition(name, startDate, endDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 64
    }
  },
  {
    "path": "src/test/java/seedu/system/testutil/DataBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " *     {@code Data ab \u003d new DataBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class DataBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public DataBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        data \u003d new Data();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public DataBuilder(Data data) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Adds a new {@code Person} to the {@code Data} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public DataBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        data.addUniqueElement(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Adds a new {@code Competition} to the {@code Data} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public DataBuilder withCompetition(Competition competition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        data.addUniqueElement(competition);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 43
    }
  },
  {
    "path": "src/test/java/seedu/system/testutil/EditCompetitionDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.system.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditCompetitionCommand.EditCompetitionDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * A utility class to help with building EditCompetitionDescriptor objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class EditCompetitionDescriptorBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private EditCompetitionDescriptor descriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditCompetitionDescriptorBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor \u003d new EditCompetitionDescriptor();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditCompetitionDescriptorBuilder(EditCompetitionDescriptor descriptor) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.descriptor \u003d new EditCompetitionDescriptor(descriptor);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Returns an {@code EditCompetitionDescriptor} with fields containing {@code competition}\u0027s details"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditCompetitionDescriptorBuilder(Competition competition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor \u003d new EditCompetitionDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.setName(competition.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.setStartDate(competition.getStartDate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.setEndDate(competition.getEndDate());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Sets the {@code Name} of the {@code EditCompetitionDescriptor} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditCompetitionDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Sets the {@code startDate} of the {@code EditCompetitionDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditCompetitionDescriptorBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.setStartDate(new CustomDate(startDate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Sets the {@code endDate} of the {@code EditCompetitionDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditCompetitionDescriptorBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.setEndDate(new CustomDate(endDate));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditCompetitionDescriptor build() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 60
    }
  },
  {
    "path": "src/test/java/seedu/system/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Gender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.setDateOfBirth(person.getDateOfBirth());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.setGender(person.getGender());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Sets the {@code dateOfBirth} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditPersonDescriptorBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.setDateOfBirth(new CustomDate(dateOfBirth));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Sets the {@code gender} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditPersonDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Gender genderEnum;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            if (gender.toLowerCase().equals(\"male\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                genderEnum \u003d Gender.MALE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                genderEnum \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            descriptor.setGender(genderEnum);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 14,
      "-": 50,
      "ooimingsheng": 6
    }
  },
  {
    "path": "src/test/java/seedu/system/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.CustomDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Gender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Name DEFAULT_NAME \u003d new Name(\"Alice Pline\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final CustomDate DEFAULT_DOB \u003d new CustomDate(\"12/02/1995\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Gender DEFAULT_GENDER \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private CustomDate dateOfBirth;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        dateOfBirth \u003d DEFAULT_DOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        gender \u003d DEFAULT_GENDER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        dateOfBirth \u003d personToCopy.getDateOfBirth();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        gender \u003d personToCopy.getGender();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Sets the {@code DateOfBirth} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public PersonBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.dateOfBirth \u003d new CustomDate(dateOfBirth);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.gender \u003d Gender.getGenderCorrespondingToName(gender);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new Person(name, dateOfBirth, gender);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 20,
      "-": 41,
      "ooimingsheng": 5
    }
  },
  {
    "path": "src/test/java/seedu/system/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.AddPersonCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.logic.commands.outofsession.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return AddPersonCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().toString() + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        sb.append(PREFIX_DOB + person.getDateOfBirth().toString() + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        sb.append(PREFIX_GENDER + person.getGender().toString() + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name).append(\" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.getDateOfBirth().ifPresent(dateOfBirth -\u003e sb.append(PREFIX_DOB).append(dateOfBirth).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender).append(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 6,
      "-": 29,
      "ooimingsheng": 8
    }
  },
  {
    "path": "src/test/java/seedu/system/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/test/java/seedu/system/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "ooimingsheng": 4
    }
  },
  {
    "path": "src/test/java/seedu/system/testutil/TypicalCompetitions.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.competition.Competition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * A utility class containing a list of {@code Competition} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class TypicalCompetitions {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final Competition NUS_OPEN \u003d new CompetitionBuilder().withName(\"NUS Powerlifting Open 2019\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        .withStartDate(\"08/05/2019\").withEndDate(\"08/09/2019\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private TypicalCompetitions() {} // prevents instantiation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns an {@code Data} with all the typical competitions."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static Data\u003cCompetition\u003e getTypicalCompetitionData() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data competitions \u003d new Data();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Competition competition : getTypicalCompetitions()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            competitions.addUniqueElement(competition);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static List\u003cCompetition\u003e getTypicalCompetitions() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(NUS_OPEN));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 34
    }
  },
  {
    "path": "src/test/java/seedu/system/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 3,
      "-": 7,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/test/java/seedu/system/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_DOB_AMY;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.Data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            .withDateOfBirth(\"01/01/2019\").withGender(\"female\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            .withDateOfBirth(\"01/02/2018\").withGender(\"male\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        .withDateOfBirth(\"05/01/1992\").withGender(\"male\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        .withDateOfBirth(\"17/11/1982\").withGender(\"male\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        .withDateOfBirth(\"03/05/2010\").withGender(\"female\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        .withDateOfBirth(\"01/10/2010\").withGender(\"female\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        .withDateOfBirth(\"19/06/2019\").withGender(\"male\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withDateOfBirth(\"07/07/2007\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withDateOfBirth(\"08/08/2008\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withDateOfBirth(VALID_DOB_AMY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            .withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withDateOfBirth(VALID_DOB_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            .withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns an {@code Data} with all the typical persons."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static Data\u003cPerson\u003e getTypicalPersonData() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data ab \u003d new Data();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            ab.addUniqueElement(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 24,
      "-": 33,
      "ooimingsheng": 13
    }
  },
  {
    "path": "src/test/java/seedu/system/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/test/java/seedu/system/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.system.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.system.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.system.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003c?import seedu.system.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003cfx:root type\u003d\"seedu.system.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "ooimingsheng": 1
    }
  }
]
