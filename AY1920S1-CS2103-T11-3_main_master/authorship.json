[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d Powerlifting Competition Coordinator"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-T11-3/main[image:https://travis-ci.org/AY1920S1-CS2103-T11-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "//endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "A powerlifting competition consists of 3 lifts, the Squat, Bench, and Deadlift."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "With 3 attempts, athletes will try to outdo and challenge themselves and lift as heavy as they can. +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The *Powerlifting Competition Coordinator* (PCC) is for powerlifting competitions organisers."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The desktop application will help event organisers keep a record of past competitions and competitors."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "It can also facilitate the competition during the actual session,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "by continuously updating records of the athletes attempts on their lifts."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Finally, PCC will keep its leader board up to date,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "to keep spectators and athletes hyped up and to find out who is the strongest lifter. +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "To support the ease of data-entry, we have provided a Command Line Interface (CLI) that is augmented with a"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Graphical User Interface (GUI) to help them better administer such powerlifting competitions. +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* AddressBook-Level3 project is created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* Some parts of this sample application were inspired by the excellent"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by _Marco Jakob_."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "belbel98": 25,
      "-": 17
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Powerlifting Competition Coordinator (PCC) is being developed by https://github.com/AY1920S1-CS2103-T11-3[T11-Team 3]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d PCC Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Professor Damith C. Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Ho Wei Chin"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::HoWeiChin.png[width\u003d\"180\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[https://github.com/HoWeiChin[github]] [\u003c\u003choweichin#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Responsibilities: Deliverable, Tracking, User Interface +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Component IC: Athletes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Ooi Ming Sheng"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::ooimingsheng.png[width\u003d\"180\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[https://github.com/ooimingsheng[github]] [\u003c\u003cooimingsheng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Responsibilities: Integration, Code Quality +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Component IC: Leaderboard"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Shawn Koh"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::shawnkoh.png[width\u003d\"180\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[https://github.com/shawnkoh[github]] [\u003c\u003cshawnkoh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Responsibilities: Project Workflow, User interface, Code Quality +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Component IC: Competitions Overview"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Christabel Teo"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "image::belbel98.png[width\u003d\"180\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "{empty}[https://github.com/belbel98[github]] [\u003c\u003cchristabelteo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Responsibilities: Documentation, Testing +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Component IC: Session Handling"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "belbel98": 25,
      "-": 34
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-T11-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "// * *Email us* : You can also reach us at `damith [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "belbel98": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d PowerLifting Competition Coordinator - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T11-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "By: `Team T11-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d What is Powerlifting Competition Coordinator?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Powerlifting Competition Coordinator is a free application for powerlifting competition event organizers"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "that is simple, fast, and easy to use. It is targeted at organizers of small to medium sized powerlifting"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "competitions who require a hassle-free way of managing and tracking the lifts of participants in and out"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "of the powerlifting competitions. During competition mode, the system has real time maintenance of athlete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "rankings within their respective weight classes allowing the organizer track the participants\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "standings at all times throughout the duration of the competition."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Core team"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Powerlifting Competition Coordinator  was developed and is maintained by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "https://github.com/AY1920S1-CS2103-T11-3[Team T11-3]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Feel free to https://github.com/AY1920S1-CS2103-T11-3/main/issues[contact us] for any enquries."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Contributing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Powerlifting Competition Coordinator is an open source project and we would love to involve any contributor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "who has a passion for powerlifting."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "To get involved, start by reading \u003c\u003cSettingUp#, Section 2, “Setting up”\u003e\u003e."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This section includes the instructions to set up your development environment."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Prior to setting up the project proper, make sure you have the following."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "To setup the project in IntelliJ, follow the steps below."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Fork this repo, and clone the fork to your computer."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "the existing project dialog first)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".. Click `New...` and find the directory of the JDK."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Click `Import Project`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Click `Open as Project`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "To verify that the setup is completed successfully, you should:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This subsection includes configurations that you may find necessary or useful as you work on this project."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We recommend that you make these configuration changes and additions before you start writing code."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This subsection includes configurations that you may find necessary or useful as you work on this project."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We recommend that you make these configuration changes and additions before you start writing code."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This project follows"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Follow the instructions below to rectify this."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ". Click on the `Imports` tab to set the order."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Set to `999` to prevent IntelliJ from contracting the import statements."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "`import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level3`) ,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "URL of your fork."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to l"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "earn how to set it up."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Design (Not finished)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This section documents the design and interaction of components in Powerlifting Competition Coordinator."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Please take a moment to understand the different components before making any code changes."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "quick overview of each component."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu. You should see a pop-up similar to Figure 12 below."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, follow the settings as indicated in Figure 12."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Testing (Check this section at end of project!)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This section includes some information that may be useful for testing the project."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "`Run \u0027ABC\u0027`."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX, window\u003d\"_blank\"_] library we use, our"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "(Mac/Linux: `./gradlew clean headless allTests`)."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "`systemtests` package."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "**Problem: `AddCommandSystemTest` or `SearchCommandSystemTest` fails with a `GuiRobot$EventTimeoutException`.**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Reason: The required data could not be fetched from the online service within 10s. The service could be down at the moment."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Solution: Check that you are connected to the Internet, or if you are, try again later."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "This section contains some information or tools that may be useful for managing the project."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We use https://circleci.com/[CircleCI, window\u003d\"_blank\"], https://travis-ci.org/[Travis CI, window\u003d\"_blank\"], and https://www.appveyor.com/[AppVeyor, window\u003d\"_blank\"_] to perform _Continuous Integration_ on our projects."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "See \u003c\u003cUsingCircleCI#, UsingCircleCI.adoc\u003e\u003e, \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e, and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We use https://coveralls.io/[Coveralls, window\u003d\"_blank\"] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify, window\u003d\"_blank\"] to see a preview of how the"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`, window\u003d\"_blank\"]."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Tag the repo with the version number, e.g. `v0.1`."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub, window\u003d\"_blank\"] and upload the JAR file you created."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies (Check this!!!)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "A project often depends on third-party libraries. For example, PowerLifting Competition Coordinator depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library, window\u003d\"_blank\"_] for XML parsing."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "We make use of Gradle to manage the project dependencies. Gradle can automate the downloading of these dependencies, saving us time and effort."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "While strongly discouraged by us, you can nevertheless opt for one of the following alternatives."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Include those libraries in the repo (though this bloats the repo size)."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* Download those libraries manually (though this creates extra work for you)."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* organizes small to medium sized powerlifting competitions"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* has a need to manage a significant number athletes during the competition"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* has a need to see the ranking of the participants of each competition"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* prefer desktop applicationss over other types"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Value proposition*: manage powerlifting competitions faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` | new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | create a new competition |"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "start and organize a new competition"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer |find athletes according to their weight class |"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "see which athletes are in the same competition"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer |sort athletes according to their attempted weights for different lifting events |"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "adjust the weight on stage call for the next athlete to come and attempt their lift"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer |find which athletes are currently in the lead (individual lifts and aggregate score) |"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "so that I can let the competitors know who is in the lead for their resepective weight classes and  let them calculate"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "what they need to do to win the competition"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer |the relative position of an athlete as compared to other athletes in their weight class |"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "see which athletes are in the same competition"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | edit the weight of a lifting attempt for an athlete |"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "so that the lifting order of athletes can be updated"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | update an athlete’s score after a successful lift |"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "so that the ranking of the athletes can be updated"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | edit an athlete\u0027s name |"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "update the athlete\u0027s name in case the athletes have change their names or they were inputted incorrectly previously"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | input/edit an athlete\u0027s body weight |"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "update the athlete\u0027s weight so the athelete is taking part in the correct weight class"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` | event organizer | record when a lifter fails/succeed in his/her lift |"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "update the athlete\u0027s score and ranking accordingly and to keep a record for how each athlete\u0027s"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "score was derived"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* *` |event organizer | input/edit an athlete\u0027s country/club |"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "which country/club the athlete is representing"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`* * *` |event organizer | know the rack height for bench press/squat |"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "the racks can be prepared before the athletes make their lifting attempt and save time"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "|`*` | event organizer |find which club/country an athlete is affiliated with |"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "so that I know which countries/clubs can be ranked across the various weight classess"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Use Cases (To Do)"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "(For all use cases below, the *System* is the `Powerlifting Competition Competitor` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d Out of competition mode"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Use case: UC1 - View my competition list"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User requests to list all competitions in the system."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  System shows a list of competitions held based on the files in the folder."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC2 - Add a new competition"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests for a new powerlifting competition to be started."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User inputs the initial competition data (e.g. name, particpants) to be inputted."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System adds the new competition to the user\u0027s competition list."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "4. System shows a success message."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. Competition data is invalid."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2b. The competition name has already been used in user\u0027s competition list."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2b1. System tells user that the competition is already in his competition list."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC3 - Delete a competition"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User obtains a list of competitions by listing (\u003c\u003cUse case: UC1 - View my competition list, *UC1*\u003e\u003e)"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests for a new powerlifting competition to be deleted."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System adds the new competition to the user\u0027s competition list."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "4. System shows a success message."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. User gives an invalid index."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC4 - Enter competition mode for a particular competition"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User obtains a list of competitions by listing (\u003c\u003cUse case: UC1 - View my competition list, *UC1*\u003e\u003e)"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests to enter competition mode for a particular competition."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System enters competition mode for a particular competition."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. User gives an invalid index."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC5 - View my athlete list"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User requests to list all athletes in the system."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  Powerlifting Competition Coordinator shows a list of all athletes in the system."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC6 - Search for athletes"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User performs a search with some constraints (e.g. id, country, age, etc.)."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  System lists athletes satisfying all the constraints."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. System does not find any athletes satisfying all the constraints."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an empty list."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC7 - View a specific athlete"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User obtains a list of athletes by listing (\u003c\u003cUse case: UC5 - View my athlete list, *UC5*\u003e\u003e)."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "or searching (\u003c\u003cUse case: UC6 - Search for athletes,*UC6*\u003e\u003e)."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests to view more information on a specific athlete in the list."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows detailed information of the book."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. System does not find the athlete in the list."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case restarts from step 1."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2b. User gives an invalid index."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2b1. System shows an error message."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC8 - Add an athlete"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests for an athlete to be added."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User inputs athlete data."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. User confirms that the addition of the athlete cannot be reversed."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "4. System adds the new athlete to the user\u0027s athlete list."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "5. System shows a success message."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. Athlete data is invalid."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2b. The athlete is already in user\u0027s athlete list."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2b1. System tells user that the athlete is already in his athlete list."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC9 - Edit a specific athlete"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User views a specific athlete (\u003c\u003cUse case: UC7 - View a specific athlete, *UC7*\u003e\u003e)"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests certain data about the athlete to be updated."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows success message."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. User gives invalid data."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC10 - Delete a specific athlete"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User views a specific athlete (\u003c\u003cUse case: UC7 - View a specific athlete, *UC7*\u003e\u003e)"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests for an athlete to be deleted from the athlete list."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows success message."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d In competition mode"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC11 - View my participant list"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User requests to list all participants in the competition."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  System shows a list of all participants in the competition."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC12 - Search/rank for participants"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1.  User performs a search with some constraints (e.g. id, country, age, ranking criteria etc.)."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2.  System lists participants satisfying all the constraints."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. System does not find any athletes satisfying all the constraints."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an empty list."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC13 - View a specific participant"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User obtains a list of athletes by listing (\u003c\u003cUse case: UC11 - View my participant list, *UC11*\u003e\u003e)."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "or searching (\u003c\u003cUse case: UC12 - Search for participants, *UC12*\u003e\u003e)."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests to view more information on a specific athlete in the list."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows detailed information of the book."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. System does not find the athlete in the list."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case restarts from step 1."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2b. User gives an invalid index."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2b1. System shows an error message."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC14 - Edit a specific participant"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User views a specific athlete (\u003c\u003cUse case: UC13 - View a specific participant, *UC13*\u003e\u003e)"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests certain data about the athlete to be updated."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows success message."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. User gives invalid data."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC15 - Disqualify a specific participant"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User views a specific participant (\u003c\u003cUse case: UC13 - View a specific participant, *UC13*\u003e\u003e)"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. User requests for a particular athlete to be disqualified from the competition."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. System shows success message."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC16 - Call for next participant in lifting order"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests for next athlete to attempt lift."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. System shows athlete that is lifting next."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "3. User updates system after athlete attempts lift."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "4. System shows success message."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. No more participants in lifting order."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC16 - Exit competition"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests to exit competition mode."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. System exits competition mode."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC16 - Finalize competition"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "1. User requests to finalize competition data."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "2. System finalizes competition and prevents any further updating of the competition data."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "* 2a. There are still participants that have not finished their lifts"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "+"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should come with automated unit tests and open source code."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should come with a user guide and a developer guide."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should favor \u003c\u003cdos-style-commands,DOS style commands\u003e\u003e over Unix-style commands."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ".  Should be intuitive such that a new user can learn to search and organize a powerlifting competition within 10 minutes."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "\u003d\u003d Instructions for Manual Testing (To Do)"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "-": 396,
      "ooimingsheng": 636
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d PowerLifting Competition Coordinator- User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T11-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "By: `Team CS2103-T11`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "A powerlifting competition/meet consists of 3 lifts, the Squat, Bench and Deadlift. With 3 attempts, athletes will try to outdo and challenge themselves and lift as heavy as they can."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "This software is for organisers who organise powerlifting competitions. To facilitate the ease of data-entry, we have provided a command line interface that is augmented with a Graphical User Interface to help them better administer powerlifting competitions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Download the software from our git repo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Ensure Java 11 is downloaded into your machine."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d Competitions"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "The commands listed below in 3.2, 3.3, … are based on the context of a competition."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Context: No Competition"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Commands*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Save: this changes the context to `Creating a competition`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Select: changes the context of a `Competition`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Context: Creating a Competition"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Parameters*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* date"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Type"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Commands*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Save"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Context: On a Competition"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Commands*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Athletes"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* List"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Prints a list of competitions*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Finalise"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Parameters*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Id"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Marks the competition as completed and prevents further edits*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Switch"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Parameters*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* id"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* name"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Switch context to a different competition*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Delete"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "*Parameters*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* Id"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* name"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d Getting Competitors’ Data"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Sorting Athletes: `sort`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Groups and sorts all athletes into their respective weight classes or attempted weights for an event."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `sort wc/WEIGHTCLASS`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `sort aw/EVENT`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `sort wc/90kg`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `sort aw/Squat`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Getting top scorers: `score`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Gets and displays leading athletes and their scores for individual events or for their total scores."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `score e/EVENT t`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* to get scores for individual events only:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `score e/Squat`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* to get total scores only"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `score t`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Getting rank of an athlete: `rank`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Gets current position of an athlete relative to other relatives for the entire competition."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `rank n/NAME`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `rank n/John`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Affiliation of an athlete: `aff`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Gets the name of an organisation and a country, an athlete is associated with."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `aff n/NAME`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `aff n/John`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Edit data of an athlete: `edit`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Edits field(s) of information belonging to an athlete"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `edit n/CURRENTNAME newN/NEWNAME bw/BODYWEIGHT wc/WEIGHTCLASS aff/AFFILIATION s/SCORE`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* To edit name only:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `edit n/John newN/Johnny`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* To edit bodyweight only:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `edit n/John bw/100kg`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* To edit subset of fields:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `edit n/John newN/Johnny wc/100kg aff/Singapore`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* To edit all fields:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  `edit n/John newN/Johnny bw/90 wc/90 aff/Singapore s/1000`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Get top 3 athletes: `top3`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Gets top 3 athletes (currently in 1st, 2nd and 3rd) for each weight class."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `top3 wc/WEIGHTCLASS`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "`top3 wc/100kg`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d Competition Handling"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "This feature adds/edits/lists competitions which are available on the UI."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Adds a new competition: `addComp`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Adds a new competition to the existing list of competitions on the UI."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "User supplies competition name, start and end dates of competition to the command prompt."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Dates should be in DD/MM/YYYY format. Eg: 19/01/2019 or 01/02/2020."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `addComp n/COMPETITION_NAME startDate/START_DATE_OF_COMPETITION endDate/END_DATE_OF_COMPETITION`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `addComp n/IWF startDate/18/01/2019 endDate/19/01/2019`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Edits a new competition: `editComp`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Changes details of an existing competition listed on the UI to updated ones."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "INDEX here refers to the position of the existing competition in the list of competitions shown on the UI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Fields which come after INDEX refers to data fields which a user wish to change."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Dates should be in DD/MM/YYYY format. Eg: 19/01/2019 or 01/02/2020."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `editComp INDEX n/NAME startDate/START_DATE_OF_COMPETITION endDate/END_DATE_OF_COMPETITION`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `editComp 1 n/IWF startDate/18/01/2019 endDate/19/01/2019`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Deletes a new competition: `deleteComp`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Removes an existing competition from a list of competitions listed on the UI."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "INDEX here refers to the position of the existing competition in the list of competitions shown on the UI."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Dates should be in DD/MM/YYYY format. Eg: 19/01/2019 or 01/02/2020."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `deleteComp INDEX`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `deleteComp 1`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Lists all competitions: `listComp`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Displays all competitions available."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `listComp`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "* `listComp`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d Session Handling"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "This feature handles the entire flow of each session during Meet Day. It allows event"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "organisers to submit an Athlete’s Squat, Bench, Deadlift attempts, as well as the"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "success of their lifts. It will show the relevant information to prepare for the"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "athletes lift (displaying name, weight, etc). The flow of events, and the commands to"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "facilitate the competition session will be presented in order below:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "belbel98"
        },
        "content": "This feature handles the entire flow of each session during Meet Day. It allows event organisers to submit an Athlete’s Squat, Bench, Deadlift attempts, as well as the success of their lifts. It will show the relevant information to prepare for the athletes lift (displaying name, weight, etc)."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The flow of events, and the commands to facilitate the competition session will be presented in order below:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Prepare for a new session: `loadSess`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Loads the session of SBD lifts for the given name of the competition (provided it exists), separated by a space."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "belbel98"
        },
        "content": "This will load all the athletes who are participating in this competition, and start the session associated with this competition."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `loadSess COMPETITION_NAME`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* `loadSess Test of Strength 2019`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Submit attempts: `attempts`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Submits all 9 attempts for the 3 lifts, separating the lifts by a single space, and the attempts for each lift with a slash."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "belbel98"
        },
        "content": "S is abbreviated for squat, B for bench, and D for deadlift. The numbers 1,2,3 represents the attempt number for that lift."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "belbel98"
        },
        "content": "For example, S1 means squat attempt 1, and D3 means deadlift attempt 3."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `attempts n/NAME s/S1/S2/S3 b/B1/B2/B3 d/D1/D2/D3`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* `attempts n/farhannafahrid s/115/120/125 b/40/47.5/55 d/155/165/170`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* `attempts n/marcustay s/90/200/205 b/135/140/145 d/210/220/230`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003d\u003d\u003d\u003d Starts the session `start`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "belbel98"
        },
        "content": "The session can be started after all participating athletes have submitted their 9 attempts for their 3 lifts."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "belbel98"
        },
        "content": "This command will sort the athletes and the weight they are attempting in increasing order, after being sorted in this order:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Squat Attempts 1,2,3 , Bench Attempts 1,2,3 , Deadlift Attempts 1,2,3."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `start`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* `start`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Update lift or no lift: `lift`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Updates whether the athlete succeeds in his attempt, or fails it."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Format: `lift n/NAME ATTEMPT_INDEX Y/N`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* `lift n/christabel teo 8 N`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* `lift n/shawn koh 3 Y`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003d\u003d\u003d\u003d Get the next lifter in line: `next`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Retrieves the next lifter according to weight lifted for that attempt, the weights he/she is going for that particular lift and attempt."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "Format: `next`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "belbel98"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "belbel98"
        },
        "content": "* `next`"
      }
    ],
    "authorContributionMap": {
      "belbel98": 35,
      "HoWeiChin": 161,
      "-": 86,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.storage.JsonSystemStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.storage.SystemStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Data ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        SystemStorage systemStorage \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSystemStorage("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                userPrefs.getPersonDataFilePath(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                userPrefs.getCompetitionDataFilePath(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                userPrefs.getParticipationDataFilePath()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        storage \u003d new StorageManager(systemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e initialPersonData \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Optional\u003cReadOnlyData\u003cPerson\u003e\u003e personDataOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e competitionDataOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e initialCompetitionData \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e participationDataOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cParticipation\u003e initialParticipationData \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            personDataOptional \u003d storage.readPersonData();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            competitionDataOptional \u003d storage.readCompetitionData();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (personDataOptional.isPresent() \u0026\u0026 competitionDataOptional.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                initialPersonData \u003d personDataOptional.get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                initialCompetitionData \u003d competitionDataOptional.get();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                participationDataOptional \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    storage.readParticipationData(personDataOptional.get(), initialCompetitionData);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                if (participationDataOptional.isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    initialParticipationData \u003d participationDataOptional.get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                logger.info(\"Not all data files were found. Will be starting with a sample Data\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                initialPersonData \u003d SampleDataUtil.getSamplePersonData();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                initialCompetitionData \u003d SampleDataUtil.getSampleCompetitionData();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                initialParticipationData \u003d SampleDataUtil.getSampleParticipationData(initialPersonData,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    initialCompetitionData);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Data\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            initialPersonData \u003d new Data();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            initialCompetitionData \u003d new Data();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            initialParticipationData \u003d new Data();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Data\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            initialPersonData \u003d new Data();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            initialCompetitionData \u003d new Data();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            initialParticipationData \u003d new Data();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new ModelManager(initialPersonData, initialCompetitionData, initialParticipationData, userPrefs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Data\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.info(\"Starting Data \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 163,
      "ooimingsheng": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_INVALID_COMPETITION_DISPLAYED_INDEX \u003d \"The competition index provided is \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns the Data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @see seedu.address.model.Model#getPersons()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ReadOnlyData getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    ObservableList\u003cCompetition\u003e getFilteredCompetitionList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of participations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    ObservableList\u003cParticipation\u003e getFilteredParticipationList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 9,
      "HoWeiChin": 3,
      "-": 45,
      "ooimingsheng": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.parser.SystemParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final SystemParser systemParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        systemParser \u003d new SystemParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Command command \u003d systemParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            storage.savePersonData(model.getPersons());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            storage.saveCompetitionData(model.getCompetitions());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            storage.saveParticipationData(model.getParticipations());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ReadOnlyData getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return model.getPersons();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public ObservableList\u003cCompetition\u003e getFilteredCompetitionList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return model.getFilteredCompetitionList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ObservableList\u003cParticipation\u003e getFilteredParticipationList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return model.getFilteredParticipationList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return model.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 6,
      "HoWeiChin": 9,
      "-": 69,
      "ooimingsheng": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_DOB + \"DATE OF BIRTH \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_DOB + \"12/02/1995 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_GENDER + \"Male \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 6,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCompCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Adds a Competition to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class AddCompCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addComp\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a competition to the address book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_NAME + \"COMPETITION NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_START_DATE + \"START DATE OF COMPETITION \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_END_DATE + \"END DATE OF COMPETITION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_NAME + \"IPF World\u0027s \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_START_DATE + \"12/02/1995 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_END_DATE + \"15/02/1995 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New competition added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COMPETITION \u003d \"This competition already exists in the address book\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final Competition toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Creates an CreateComp to add the specified {@code newCompetition}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public AddCompCommand(Competition newCompetition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(newCompetition);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        toAdd \u003d newCompetition;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (model.hasCompetition(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_COMPETITION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        model.addCompetition(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                || (other instanceof AddCompCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCompCommand) other).toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model.setPersons(new Data());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "ooimingsheng": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCompCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Deletes a competition identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class DeleteCompCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteComp\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \": Deletes the competition identified by the index number used in the displayed competition list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_DELETE_COMPETITION_SUCCESS \u003d \"Deleted Competition: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public DeleteCompCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        List\u003cCompetition\u003e lastShownList \u003d model.getFilteredCompetitionList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMPETITION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Competition compToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        model.deleteCompetition(compToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_COMPETITION_SUCCESS, compToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                || (other instanceof DeleteCompCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCompCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"[\" + PREFIX_DOB + \"DATEOFBIRTH] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_NAME + \"John Doe\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_DOB + \"12/02/1995\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_GENDER + \"MALE\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!personToEdit.isSameElement(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate updatedDateOfBirth \u003d editPersonDescriptor.getDateOfBirth().orElse(personToEdit.getDateOfBirth());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new Person(updatedName, updatedDateOfBirth, updatedGender);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        private CustomDate dateOfBirth;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            setDateOfBirth(toCopy.dateOfBirth);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, dateOfBirth, gender);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public void setDateOfBirth(CustomDate dateOfBirth) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public Optional\u003cCustomDate\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    \u0026\u0026 getDateOfBirth().equals(e.getDateOfBirth())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 27,
      "-": 156,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCompCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COMPETITIONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Edits the details of an existing competition in the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class EditCompCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editComp\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the competition identified \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"by the index number used in the displayed competition list. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START DATE OF COMPETITION] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END DATE OF COMPETITION] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_NAME + \"IPF World\u0027s \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_START_DATE + \"12/02/1995\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            + PREFIX_END_DATE + \"15/02/1995\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_EDIT_COMPETITION_SUCCESS \u003d \"Edited Competition: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COMPETITION \u003d \"This competition already exists in the address book.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final EditCompetitionDescriptor editCompetitionDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @param index of the competition in the filtered competition list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @param editCompetitionDescriptor details to edit the competition with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditCompCommand(Index index, EditCompetitionDescriptor editCompetitionDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(editCompetitionDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.editCompetitionDescriptor \u003d new EditCompetitionDescriptor(editCompetitionDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        List\u003cCompetition\u003e lastShownList \u003d model.getFilteredCompetitionList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMPETITION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Competition compToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Competition editedComp \u003d createEditedComp(compToEdit, editCompetitionDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!compToEdit.isSameElement(editedComp) \u0026\u0026 model.hasCompetition(editedComp)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_COMPETITION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        model.setCompetition(compToEdit, editedComp);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        model.updateFilteredCompetitionList(PREDICATE_SHOW_ALL_COMPETITIONS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_COMPETITION_SUCCESS, editedComp));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Creates and returns a {@code Competition} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static Competition createEditedComp(Competition compToEdit,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                                              EditCompetitionDescriptor editCompetitionDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assert compToEdit !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Name updatedName \u003d editCompetitionDescriptor.getName().orElse(compToEdit.getName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate updatedStartDate \u003d editCompetitionDescriptor.getStartDate().orElse(compToEdit.getStartDate());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate updatedEndDate \u003d editCompetitionDescriptor.getEndDate().orElse(compToEdit.getEndDate());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new Competition(updatedName, updatedStartDate, updatedEndDate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditCompCommand e \u003d (EditCompCommand) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                \u0026\u0026 editCompetitionDescriptor.equals(e.editCompetitionDescriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Stores the details to edit a competition with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * corresponding field value of the competition."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static class EditCompetitionDescriptor {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        private CustomDate startDate;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        private CustomDate endDate;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public EditCompetitionDescriptor() {}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public EditCompetitionDescriptor(EditCompetitionDescriptor toCopy) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, startDate, endDate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public void setStartDate(CustomDate startDate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public Optional\u003cCustomDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public void setEndDate(CustomDate endDate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public Optional\u003cCustomDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            if (!(other instanceof EditCompetitionDescriptor)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            EditCompetitionDescriptor e \u003d (EditCompetitionDescriptor) other;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 184
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCompCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COMPETITIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Lists all competitions in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class ListCompCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listComp\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all competitions\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        model.updateFilteredCompetitionList(PREDICATE_SHOW_ALL_COMPETITIONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListPartCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PARTICIPATIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Lists all Participations for a specific competition."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ListPartCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listPart\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FOR_COMPETITION \u003d \"Listed participants for \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FOR_ALL \u003d \"Listed all participants\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" Competition Name\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public static final String MESSAGE_COMPETITION_NOT_FOUND \u003d \"The competition with the given name does not exist : \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Name competitionName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Creates a ListPartCommand which will list out all Participations"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * participating in the specified competition."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param competitionName name of competition whose participants we want to list out"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ListPartCommand(Name competitionName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(competitionName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.competitionName \u003d competitionName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ListPartCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        competitionName \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (competitionName \u003d\u003d null) { // for the command without filtering competitions"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            model.updateFilteredParticipationList(PREDICATE_SHOW_ALL_PARTICIPATIONS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_FOR_ALL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        List\u003cCompetition\u003e competitionList \u003d model.getFilteredCompetitionList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Competition competition \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (Competition c : competitionList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (c.getName().equals(competitionName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                competition \u003d c;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (competition \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new CommandResult(MESSAGE_COMPETITION_NOT_FOUND + competitionName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Competition finalCompetition \u003d competition;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Predicate\u003cParticipation\u003e filterByCompetition \u003d p -\u003e p.getCompetition().isSameElement(finalCompetition);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        model.updateFilteredParticipationList(filterByCompetition);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS_FOR_COMPETITION + competition.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DOB, PREFIX_GENDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DOB, PREFIX_GENDER)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate dateOfBirth \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DOB).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person person \u003d new Person(name, dateOfBirth, gender);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 9,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCompCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.commands.AddCompCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Parses input arguments and creates a new AddCompCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class AddCompCommandParser implements Parser\u003cAddCompCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCompCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * and returns an AddCompCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public AddCompCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCompCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Competition competition \u003d new Competition(name, startDate, endDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new AddCompCommand(competition);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Prefix PREFIX_DOB \u003d new Prefix(\"dob/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"startDate/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"endDate/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCompCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.commands.DeleteCompCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Parses input arguments and creates a new DeleteCompCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class DeleteCompCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCompCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * and returns a DeleteCompCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public DeleteCompCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return new DeleteCompCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCompCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DOB, PREFIX_GENDER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DOB).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            editPersonDescriptor.setDateOfBirth(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DOB).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            editPersonDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 7,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCompCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.commands.EditCompCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.commands.EditCompCommand.EditCompetitionDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Parses input arguments and creates a new EditCompCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class EditCompCommandParser implements Parser\u003cEditCompCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCompCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * and returns an EditCompCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditCompCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCompCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditCompetitionDescriptor editCompetitionDescriptor \u003d new EditCompetitionDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            editCompetitionDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            editCompetitionDescriptor.setStartDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            editCompetitionDescriptor.setEndDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!editCompetitionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new ParseException(EditCompCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new EditCompCommand(index, editCompetitionDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListPartCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.logic.commands.ListPartCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Parses argument input and creates new ListPartCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ListPartCommandParser implements Parser\u003cListPartCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Parses the given String {@code userInput} into a ListPartCommand and returns it for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ListPartCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new ListPartCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Name compName \u003d ParserUtil.parseName(trimmedArgs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return new ListPartCommand(compName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Parses a {@code String date} into a {@code date}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @return CustomeDate object with date trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * @throws ParseException if the given {@code dateOfBirth} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static CustomDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!CustomDate.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new ParseException(CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new CustomDate(trimmedDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Parses a {@code String gender} into an {@code Gender}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return Gender.getGenderCorrespondingToName(gender);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 18,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SystemParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.commands.AddCompCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.commands.DeleteCompCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.commands.EditCompCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.logic.commands.ListCompCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.logic.commands.ListPartCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class SystemParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        case AddCompCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return new AddCompCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        case EditCompCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return new EditCompCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        case DeleteCompCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return new DeleteCompCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        case ListCompCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return new ListCompCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        case ListPartCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return new ListPartCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 4,
      "HoWeiChin": 17,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Data.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Duplicates are not allowed (by .isSameElement comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class Data\u003cT extends UniqueElement\u003e implements ReadOnlyData\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final UniqueElementList\u003cT\u003e uniqueElements;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniqueElements \u003d new UniqueElementList\u003cT\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Creates an Data using the UniqueElements in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data(ReadOnlyData toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces the contents of the unique element list with {@code uniqueElements}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code uniqueElements} must not contain duplicate elements."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setListOfElements(List\u003cT\u003e listOfElements) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.uniqueElements.setElements(listOfElements);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Resets the existing data of this {@code Data} with {@code newData}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void resetData(ReadOnlyData newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        setListOfElements(newData.getListOfElements());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //// uniqueElements-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if an element with the same identity as {@code uniqueElement} exists in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean hasUniqueElement(T uniqueElement) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(uniqueElement);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return uniqueElements.contains(uniqueElement);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Adds a unique element to the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The unique element must not already exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void addUniqueElement(T t) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniqueElements.add(t);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces the given element {@code target} in the list with {@code editedElement}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The element identity of {@code editedElement} must not be the same as another existing element in the system."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setElement(T target, T editedElement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(editedElement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniqueElements.setElement(target, editedElement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Removes {@code key} from this {@code Data}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void removeElement(T key) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniqueElements.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return \"List of elements of size \" + uniqueElements.asUnmodifiableObservableList().size();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ObservableList\u003cT\u003e getListOfElements() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return uniqueElements.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                || (other instanceof Data // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 uniqueElements.equals(((Data) other).uniqueElements));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return uniqueElements.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Predicate\u003cCompetition\u003e PREDICATE_SHOW_ALL_COMPETITIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Predicate\u003cParticipation\u003e PREDICATE_SHOW_ALL_PARTICIPATIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Preferences \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns the user prefs\u0027 system file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Sets the user prefs\u0027 system file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void setUserPrefsFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Persons \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces data of persons with the data in {@code persons}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void setPersons(ReadOnlyData\u003cPerson\u003e persons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /** Returns the data of persons */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ReadOnlyData\u003cPerson\u003e getPersons();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if a competition with the same identity as {@code competition} exists in the system."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The person must exist in the system."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code person} must not already exist in the system."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code target} must exist in the system."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the system."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Competitions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces data of competitions with the data in {@code competitions}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void setCompetitions(ReadOnlyData\u003cCompetition\u003e competitions);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /** Returns the data of competitions */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ReadOnlyData\u003cCompetition\u003e getCompetitions();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if a competition with the same identity as {@code competition} exists in the system."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    boolean hasCompetition(Competition competition);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Soft deletes the given competition."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The competition must exist in the system."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void deleteCompetition(Competition target);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Adds the given competition."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code competition} must not already exist in the system."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void addCompetition(Competition competition);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces the given competition {@code target} with {@code editedCompetition}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code target} must exist in the system."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The competition identity of {@code editedCompetition} must not be the same as another existing competition"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * in the system."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void setCompetition(Competition target, Competition editedCompetition);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /** Returns an unmodifiable view of the filtered competition list */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ObservableList\u003cCompetition\u003e getFilteredCompetitionList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Updates the filter of the filtered competition list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void updateFilteredCompetitionList(Predicate\u003cCompetition\u003e predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Participations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces data of participations with the data in {@code participations}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void setParticipations(ReadOnlyData\u003cParticipation\u003e participations);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /** Returns the Participation */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ReadOnlyData\u003cParticipation\u003e getParticipations();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if a participation with the same identity as {@code participation} exists in the system."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    boolean hasParticipation(Participation participation);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Soft deletes the given participation."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The participation must exist in the system."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void deleteParticipation(Participation target);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Deletes all participations dependent with an association with the competition"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void deleteDependentParticipations(Competition competition);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Deletes all participations dependent with an assoiciation with the person"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void deleteDependentParticipations(Person person);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Adds the given participation."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code participation} must not already exist in the system."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void addParticipation(Participation participation);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces the given participation {@code target} with {@code editedParticipation}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code target} must exist in the system."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The competition identity of {@code editedParticipation} must not be the same as another existing participation"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * in the system."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void setParticipation(Participation target, Participation editedParticipation);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /** Returns an unmodifiable view of the filtered participation list */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ObservableList\u003cParticipation\u003e getFilteredParticipationList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Updates the filter of the filtered participation list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void updateFilteredParticipationList(Predicate\u003cParticipation\u003e predicate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "ooimingsheng": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents the in-memory model of the data of the system."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final Data\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final Data\u003cCompetition\u003e competitions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final FilteredList\u003cCompetition\u003e filteredCompetitions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final Data\u003cParticipation\u003e participations;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final FilteredList\u003cParticipation\u003e filteredParticipations;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ModelManager(ReadOnlyData\u003cPerson\u003e persons,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                        ReadOnlyData\u003cCompetition\u003e competitions,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                        ReadOnlyData\u003cParticipation\u003e participations,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireAllNonNull(persons, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + persons + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.persons \u003d new Data\u003c\u003e(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.persons.getListOfElements());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competitions \u003d new Data\u003c\u003e(competitions);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        filteredCompetitions \u003d new FilteredList\u003c\u003e(this.competitions.getListOfElements());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.participations \u003d new Data\u003c\u003e(participations);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        filteredParticipations \u003d new FilteredList\u003c\u003e(this.participations.getListOfElements());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this(new Data(), new Data(), new Data(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return userPrefs.getPersonDataFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setUserPrefsFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        userPrefs.setPersonDataFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Persons \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setPersons(ReadOnlyData persons) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.persons.resetData(persons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ReadOnlyData\u003cPerson\u003e getPersons() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return persons.hasUniqueElement(person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        deleteDependentParticipations(target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.removeElement(target);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.addUniqueElement(person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.setElement(target, editedPerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Competitions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setCompetitions(ReadOnlyData\u003cCompetition\u003e competitions) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.persons.resetData(competitions);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ReadOnlyData\u003cCompetition\u003e getCompetitions() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitions;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean hasCompetition(Competition competition) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(competition);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitions.hasUniqueElement(competition);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void deleteCompetition(Competition competition) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        deleteDependentParticipations(competition);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        competitions.removeElement(competition);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void addCompetition(Competition competition) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        competitions.addUniqueElement(competition);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        updateFilteredCompetitionList(PREDICATE_SHOW_ALL_COMPETITIONS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setCompetition(Competition target, Competition editedCompetition) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireAllNonNull(target, editedCompetition);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        competitions.setElement(target, editedCompetition);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Competition List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Competition} backed by the internal list of"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code versionedSystem}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ObservableList\u003cCompetition\u003e getFilteredCompetitionList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return filteredCompetitions;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void updateFilteredCompetitionList(Predicate\u003cCompetition\u003e predicate) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        filteredCompetitions.setPredicate(predicate);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Participations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setParticipations(ReadOnlyData\u003cParticipation\u003e participations) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.participations.resetData(participations);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ReadOnlyData\u003cParticipation\u003e getParticipations() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participations;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean hasParticipation(Participation participation) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(participation);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participations.hasUniqueElement(participation);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void deleteParticipation(Participation participation) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        participations.removeElement(participation);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void deleteDependentParticipations(Competition competition) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        List\u003cParticipation\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Participation participation : participations.getListOfElements()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (participation.getCompetition().equals((competition))) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                toDelete.add(participation);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Participation participation : toDelete) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            deleteParticipation(participation);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void deleteDependentParticipations(Person person) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        List\u003cParticipation\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Participation participation : participations.getListOfElements()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (participation.getPerson().equals((person))) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                toDelete.add(participation);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Participation participation : toDelete) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            deleteParticipation(participation);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void addParticipation(Participation participation) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        participations.addUniqueElement(participation);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        updateFilteredParticipationList(PREDICATE_SHOW_ALL_PARTICIPATIONS);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setParticipation(Participation target, Participation editedParticipation) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireAllNonNull(target, editedParticipation);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        participations.setElement(target, editedParticipation);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Participation List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Competition} backed by the internal list of"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code versionedSystem}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ObservableList\u003cParticipation\u003e getFilteredParticipationList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return filteredParticipations;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void updateFilteredParticipationList(Predicate\u003cParticipation\u003e predicate) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        filteredParticipations.setPredicate(predicate);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 persons.equals(other.persons)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 competitions.equals(other.competitions)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 filteredCompetitions.equals(other.filteredCompetitions)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 participations.equals(other.participations)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 filteredParticipations.equals(other.filteredParticipations);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 125,
      "ooimingsheng": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Unmodifiable view of some class of data"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public interface ReadOnlyData\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns an unmodifiable view of the list of data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * This list will not contain any duplicate data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ObservableList\u003cT\u003e getListOfElements();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getPersonDataFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getCompetitionDataFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getParticipationDataFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "ooimingsheng": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UniqueElement.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents any type of data whereby the objects must be unique in the system."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public abstract class UniqueElement {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if both elements of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public abstract \u003cT extends UniqueElement\u003e boolean isSameElement(T otherElement);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UniqueElementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * A list that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * An element is considered unique by comparing using {@code T#isSameElement(T)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * element uses T#isSameElement(T) for equality so as to ensure that the element being added, removal and updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * unique in terms of identity in the UniqueElementList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class UniqueElementList\u003cT extends UniqueElement\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if the list contains an equivalent element as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameElement);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Adds an element to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The element must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new DuplicateElementException(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces the element {@code target} in the list with {@code editedElement}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The identity of {@code editedElement} must not be the same as another existing element in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setElement(T target, T editedElement) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireAllNonNull(target, editedElement);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ElementNotFoundException(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!target.isSameElement(editedElement) \u0026\u0026 contains(editedElement)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new DuplicateElementException(editedElement);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        internalList.set(index, editedElement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Removes the equivalent element from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * The element must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new ElementNotFoundException(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setElements(UniqueElementList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Replaces the contents of this list with {@code elements}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * {@code elements} must not contain duplicate elements."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setElements(List\u003cT\u003e elements) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireAllNonNull(elements);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (elements.size() \u003e 0 \u0026\u0026 !elementsAreUnique(elements)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new DuplicateElementException(elements.get(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        internalList.setAll(elements);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                || (other instanceof UniqueElementList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueElementList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if {@code elements} contains only unique elements."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private boolean elementsAreUnique(List\u003cT\u003e elements) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (int i \u003d 0; i \u003c elements.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c elements.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                if (elements.get(i).isSameElement(elements.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path personDataFilePath \u003d Paths.get(\"data\" , \"personData.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path competitionDataFilePath \u003d Paths.get(\"data\" , \"competitionData.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path participationDataFilePath \u003d Paths.get(\"data\" , \"participationData.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        setPersonDataFilePath(newUserPrefs.getPersonDataFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getPersonDataFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return personDataFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setPersonDataFilePath(Path dataFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(dataFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.personDataFilePath \u003d dataFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getCompetitionDataFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitionDataFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setCompetitionDataFilePath(Path dataFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(dataFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competitionDataFilePath \u003d dataFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getParticipationDataFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participationDataFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setParticipationDataFilePath(Path dataFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(dataFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.participationDataFilePath \u003d dataFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                \u0026\u0026 personDataFilePath.equals(o.personDataFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return Objects.hash(guiSettings, personDataFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + personDataFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "ooimingsheng": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attempt/Attempt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.model.attempt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.attempt.exceptions.AttemptHasBeenAttemptedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.exercise.Lift;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Represents a {@link seedu.address.model.person.Person}\u0027s attempt in an {@link Exercise}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class Attempt {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \"Attempt should follow the following format DD/MM/YYYY.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final String TRUE_IN_STRING_FORM \u003d \"true\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final Lift lift;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final int weight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private boolean hasAttempted;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private boolean isSuccessful;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Attempt(Lift lift, int weight) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.lift \u003d lift;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.hasAttempted \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.isSuccessful \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Attempt(Lift lift, boolean hasAttempted, boolean isSuccessful, int weight) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.lift \u003d lift;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.hasAttempted \u003d hasAttempted;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.isSuccessful \u003d isSuccessful;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This method records the success of an athlete\u0027s attempt after his lift."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param isSuccessful true if the athlete succeeds his lift, false otherwise"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void setSuccess(boolean isSuccessful) throws AttemptHasBeenAttemptedException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (hasAttempted) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            throw new AttemptHasBeenAttemptedException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.isSuccessful \u003d isSuccessful;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.hasAttempted \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int getWeightAttempted() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean getHasAttempted() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return hasAttempted;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean getIsSuccessful() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return isSuccessful;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Lift getLift() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return lift;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code Attempt} into string format for JSON storage."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static String getStringStorageFormOfAttempt(Attempt attempt) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String storedString \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        storedString +\u003d attempt.getLift();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        storedString +\u003d \" \" + attempt.getHasAttempted();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        storedString +\u003d \" \" + attempt.getIsSuccessful();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        storedString +\u003d \" \" + attempt.getWeightAttempted();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return storedString;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code String} into an Attempt."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static Attempt parseStringToAttempt(String string) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String[] splitString \u003d string.split(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (splitString.length \u003c 4) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String liftName \u003d splitString[0];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Lift lift \u003d Lift.getLiftCorrespondingToName(liftName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String stringVersonOfHasAttempted \u003d splitString[1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        boolean hasAttempted \u003d stringVersonOfHasAttempted.equals(TRUE_IN_STRING_FORM);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String stringVersonOfIsSuccessful \u003d splitString[2];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        boolean isSuccessful \u003d stringVersonOfIsSuccessful.equals(TRUE_IN_STRING_FORM);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        String stringVersonOfWeight \u003d splitString[3];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        int weightAttempted \u003d Integer.parseInt(stringVersonOfWeight);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new Attempt(lift, hasAttempted, isSuccessful, weightAttempted);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 35,
      "ooimingsheng": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attempt/exceptions/AttemptHasBeenAttemptedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.model.attempt.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Signals when an an attempted Attempt is being updated again."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class AttemptHasBeenAttemptedException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public AttemptHasBeenAttemptedException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(\"The attempt has already been made.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attempt/exceptions/MaximumAttemptsReachedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.model.attempt.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Signals that an athlete has already made 3 attempts."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class MaximumAttemptsReachedException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public MaximumAttemptsReachedException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(\"This athlete has already reached the maximum number of attempts.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/competition/Competition.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "package seedu.address.model.competition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.UniqueElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.exercise.Lift;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Represents a Competition in the app."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class Competition extends UniqueElement {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Exercise squat \u003d new Exercise(Lift.SQUAT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Exercise bench \u003d new Exercise(Lift.BENCH);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Exercise deadlift \u003d new Exercise(Lift.DEADLIFT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private CustomDate startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private CustomDate endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final List\u003cExercise\u003e exerciseList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Competition(Name name, CustomDate startDate, CustomDate endDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.exerciseList.add(squat);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.exerciseList.add(bench);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.exerciseList.add(deadlift);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CustomDate getStartDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CustomDate getEndDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public List\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean isSameElement(UniqueElement otherElement) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!(otherElement instanceof Competition)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this.equals((Competition) otherElement);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!(other instanceof Competition)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Competition otherCompetition \u003d (Competition) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return otherCompetition.getName().equals(getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return name.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 26,
      "HoWeiChin": 3,
      "ooimingsheng": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/DuplicateElementException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Signals that the operation will result in duplicate elements."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class DuplicateElementException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public \u003cT\u003e DuplicateElementException(T t) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        super(\"Operation would result in duplicate elements of \" + t.getClass().getName());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/ElementNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Signals that the operation is unable to find the specified element."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class ElementNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public \u003cT\u003e ElementNotFoundException(T t) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        super(\"Element \" + t + \" was not found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Exercise.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Represents an Exercise category in a {@link seedu.address.model.competition.Competition}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final int MAXIMUM_ATTEMPTS \u003d 3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Lift lift;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final int noOfAttempts \u003d MAXIMUM_ATTEMPTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Exercise(Lift lift) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.lift \u003d lift;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Lift getLift() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return lift;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int getNoOfAttempts() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return noOfAttempts;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     * This defines a stronger notion of equality between two exercises."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        if (!(other instanceof Exercise)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "        Exercise otherExercise \u003d (Exercise) other;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return otherExercise.getLift().equals(getLift()) \u0026\u0026 otherExercise.getNoOfAttempts() \u003d\u003d getNoOfAttempts();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 23,
      "belbel98": 11,
      "ooimingsheng": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Lift.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Represents an Exercise\u0027s type of lift."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public enum Lift {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    BENCH(\"bench\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    DEADLIFT(\"deadlift\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    SQUAT(\"squat\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \"Lift name should be provided as either \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + BENCH.toString() + \" or \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + DEADLIFT.toString() + \" or \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            + SQUAT.toString() + \".\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Lift(String name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Checks {@code gender} corresponds to a  format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static boolean isValidLift(String liftName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return liftName.toLowerCase().equals(BENCH.toString())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || liftName.toLowerCase().equals(DEADLIFT.toString())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            || liftName.toLowerCase().equals(SQUAT.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static Lift getLiftCorrespondingToName(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (name.equals((BENCH.toString()))) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return BENCH;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } else if (name.equals((DEADLIFT.toString()))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return DEADLIFT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } else if (name.equals((SQUAT.toString()))) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return SQUAT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnkoh": 6,
      "belbel98": 2,
      "ooimingsheng": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/participation/Participation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.model.participation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.UniqueElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.attempt.Attempt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.exercise.Lift;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Represents a {@link Person}\u0027s participation in a {@link Competition}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Guarantees: immutable; person-competition pair is unique."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class Participation extends UniqueElement {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Competition competition;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final List\u003cAttempt\u003e attempts;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Participation(Person person, Competition competition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.competition \u003d competition;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.attempts \u003d createNewListOfAttempts(competition.getExerciseList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Participation(Person person, Competition competition, List\u003cAttempt\u003e attempts) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competition \u003d competition;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.attempts \u003d attempts;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param exerciseList a list of exercises for the competition"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @return list of attempts to track the athlete progress throughout the competition"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private List\u003cAttempt\u003e createNewListOfAttempts(List\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        List\u003cAttempt\u003e attempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        int initialWeight \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Exercise exercise : exerciseList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Lift lift \u003d exercise.getLift();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            int noOfAttempts \u003d exercise.getNoOfAttempts();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            for (int i \u003d 0; i \u003c noOfAttempts; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                attempts.add(new Attempt(lift, initialWeight));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return attempts;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public Competition getCompetition() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return competition;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public List\u003cAttempt\u003e getAttempts() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return attempts;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean isSameElement(UniqueElement otherElement) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!(otherElement instanceof Participation)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this.equals((Participation) otherElement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @return the total score of the person\u0027s participation at a specified competition"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int getTotalScore() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        int score \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Exercise exercise : competition.getExerciseList()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            score +\u003d getLiftScore(exercise.getLift());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @return the total score of the person\u0027s participation at a specified competition for a specified lift"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public int getLiftScore(Lift lift) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        int score \u003d 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Attempt attempt : attempts) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (attempt.getLift() \u003d\u003d lift \u0026\u0026 attempt.getIsSuccessful()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                score \u003d Math.max(score, attempt.getWeightAttempted());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Gets the highest score of each of the three lifts in this format: Squat/Bench/Deadlift."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * @return a string representation of the three lift score"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public String getThreeLiftScore() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        StringBuilder topAttemptsString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        for (Exercise exercise : competition.getExerciseList()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            Lift lift \u003d exercise.getLift();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            topAttemptsString.append(\"/\").append(getLiftScore(lift));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String outputAttempts \u003d topAttemptsString.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return outputAttempts.substring(1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Returns true if both participations have the same identity and data fields."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * This defines a stronger notion of equality between two participations."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (!(other instanceof Participation)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        Participation otherParticipation \u003d (Participation) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return otherParticipation.getPerson().equals(getPerson())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u0026\u0026 otherParticipation.getCompetition().equals(getCompetition());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 61,
      "ooimingsheng": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/CustomDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Creates a CustomDate object based on DATE_FORMAT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class CustomDate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            \"Date should follow the following format DD/MM/YYYY.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CustomDate(String date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        checkArgument(isValidDate(date.trim()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.date \u003d date.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Returns true if a given string has a valid date format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(DATE_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            Date dateObj \u003d format.parse(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            if (date.equals(format.format(dateObj))) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Returns true if both customs have the same date string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!(other instanceof CustomDate)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate otherDate \u003d (CustomDate) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return this.date.equals(otherDate.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Only 2 Genders can be used: male or female."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    MALE(\"male\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    FEMALE(\"female\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            \"Gender should be provided as either male or female\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Gender(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Checks {@code gender} corresponds to a  format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static boolean isValidGender(String gender) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return gender.toLowerCase().equals(MALE.toString())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            || gender.toLowerCase().equals(FEMALE.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static Gender getGenderCorrespondingToName(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (name.equals((MALE.toString()))) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return MALE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        } else if (name.equals((FEMALE.toString()))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return FEMALE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.UniqueElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class Person extends UniqueElement {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final CustomDate dateOfBirth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public Person(Name name, CustomDate dateOfBirth, Gender gender) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        requireAllNonNull(name, dateOfBirth, gender);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CustomDate getDateOfBirth() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public boolean isSameElement(UniqueElement otherElement) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!(otherElement instanceof Person)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Person otherPerson \u003d (Person) otherElement;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                \u0026\u0026 (otherPerson.getDateOfBirth().equals(getDateOfBirth())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                || otherPerson.getGender().equals(getGender()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return Objects.hash(name, dateOfBirth, gender);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .append(\" Date of Birth: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .append(getDateOfBirth())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .append(getGender());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 17,
      "-": 71,
      "ooimingsheng": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Contains utility methods for populating {@code Data} with sample data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new CustomDate(\"02/02/1995\"), Gender.MALE),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new CustomDate(\"03/02/1997\"), Gender.FEMALE),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new CustomDate(\"02/03/1996\"), Gender.FEMALE)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static ReadOnlyData\u003cPerson\u003e getSamplePersonData() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cPerson\u003e persons \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            persons.addUniqueElement(samplePerson);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static Competition[] getSampleCompetitions() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new Competition[]{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new Competition("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new Name(\"NUS Powerlifting Open 2019\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new CustomDate(\"08/05/2019\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new CustomDate(\"08/09/2019\"))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static ReadOnlyData\u003cCompetition\u003e getSampleCompetitionData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cCompetition\u003e competitions \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Competition sampleCompetition : getSampleCompetitions()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            competitions.addUniqueElement(sampleCompetition);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitions;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Creates sample participations by make every person  a participant to every competition"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static ReadOnlyData\u003cParticipation\u003e getSampleParticipationData("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e persons,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitions"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cParticipation\u003e participations \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Person person : persons.getListOfElements()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            for (Competition competition : competitions.getListOfElements()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                participations.addUniqueElement(new Participation(person, competition));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participations;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 5,
      "-": 23,
      "ooimingsheng": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCompetition.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Jackson-friendly version of {@link Competition}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "class JsonAdaptedCompetition implements JsonAdaptedData\u003cCompetition\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Competition\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Constructs a {@code JsonAdaptedCompetition} with the given competition details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonAdaptedCompetition(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                                  @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                                  @JsonProperty(\"endDate\") String endDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code Competition} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonAdaptedCompetition(Competition source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        startDate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        endDate \u003d source.getEndDate().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Competition} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted competition."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Competition toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                CustomDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!CustomDate.isValidDate(startDate)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        final CustomDate modelStartDate \u003d new CustomDate(startDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                CustomDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!CustomDate.isValidDate(endDate)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        final CustomDate modelEndDate \u003d new CustomDate(endDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new Competition(modelName, modelStartDate, modelEndDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.UniqueElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Jackson-friendly version of {@link Data}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public interface JsonAdaptedData\u003cT extends UniqueElement\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts this Jackson-friendly adapted unique element object into the model\u0027s {@code Data} object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted element."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public T toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedParticipation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.attempt.Attempt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Jackson-friendly version of {@link Participation}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonAdaptedParticipation implements JsonAdaptedData\u003cParticipation\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Participation\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final String PERSON_NOT_FOUND \u003d \"Person was not found in list\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final String COMPETITION_NOT_FOUND \u003d \"Competition was not found in list\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final CustomDate SAMPLE_DATE \u003d new CustomDate(\"01/01/2019\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Gender SAMPLE_GENDER \u003d Gender.MALE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final int OUT_OF_BOUND_INDEX \u003d -1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final String personName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final String competitionName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final List\u003cString\u003e attempts;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Constructs a {@code JsonAdaptedParticipation} with the given participation details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonAdaptedParticipation(@JsonProperty(\"person\") String personName,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                                    @JsonProperty(\"competition\") String competitionName,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                                    @JsonProperty(\"attempts\") List\u003cString\u003e attempts) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.personName \u003d personName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competitionName \u003d competitionName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.attempts \u003d attempts;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code Participation} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonAdaptedParticipation(Participation source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        personName \u003d source.getPerson().getName().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        competitionName \u003d source.getCompetition().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        attempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Attempt attempt : source.getAttempts()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            attempts.add(Attempt.getStringStorageFormOfAttempt(attempt));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Participation toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts the stored data into the model\u0027s {@code Participation} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Participation toModelType("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (personName \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ObservableList\u003cPerson\u003e personObservableList \u003d personReadOnlyData.getListOfElements();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Person personToFind \u003d new Person(new Name(personName), SAMPLE_DATE, SAMPLE_GENDER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        int personIndex \u003d personObservableList.indexOf(personToFind);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (personIndex \u003d\u003d OUT_OF_BOUND_INDEX) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        final Person modelPerson \u003d personObservableList.get(personIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (competitionName \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ObservableList\u003cCompetition\u003e competitionObservableList \u003d competitionReadOnlyData.getListOfElements();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Competition competitionToFind \u003d new Competition(new Name(competitionName), SAMPLE_DATE, SAMPLE_DATE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        int competitionIndex \u003d competitionObservableList.indexOf(competitionToFind);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (competitionIndex \u003d\u003d OUT_OF_BOUND_INDEX) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(COMPETITION_NOT_FOUND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        final Competition modelCompetition \u003d competitionObservableList.get(competitionIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (attempts \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                Attempt.class.getSimpleName() + \" \" + List.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        final List\u003cAttempt\u003e modelAttempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (String str : attempts) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                Attempt attempt \u003d Attempt.parseStringToAttempt(str);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                modelAttempts.add(attempt);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            } catch (IOException exception) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                throw new IllegalValueException(Attempt.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new Participation(modelPerson, modelCompetition, modelAttempts);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "class JsonAdaptedPerson implements JsonAdaptedData\u003cPerson\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final String dateOfBirth;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"dateOfBirth\") String dateOfBirth,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            @JsonProperty(\"gender\") String gender) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        dateOfBirth \u003d source.getDateOfBirth().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        gender \u003d source.getGender().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (dateOfBirth \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                    CustomDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!CustomDate.isValidDate(dateOfBirth)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new IllegalValueException(CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        final CustomDate modelDateOfBirth \u003d new CustomDate(this.dateOfBirth);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        final Gender genderEnum \u003d Gender.getGenderCorrespondingToName(gender);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new Person(modelName, modelDateOfBirth, genderEnum);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 23,
      "-": 54,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCompetitionData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * An Immutable Competition Data that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "@JsonRootName(value \u003d \"system\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonSerializableCompetitionData implements JsonSerializableData {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COMPETITION \u003d \"Competitions list contains duplicate competition(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final List\u003cJsonAdaptedCompetition\u003e competitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Constructs a {@code JsonSerializableCompetitionData} with the given competitions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSerializableCompetitionData(@JsonProperty(\"competitions\") List\u003cJsonAdaptedCompetition\u003e competitions) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competitions.addAll(competitions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code ReadOnlyData} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCompetitionData}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSerializableCompetitionData(ReadOnlyData\u003cCompetition\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        competitions.addAll(source.getListOfElements().stream().map(JsonAdaptedCompetition::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cCompetition\u003e competitions \u003d new Data();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (JsonAdaptedCompetition jsonAdaptedCompetition : this.competitions) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Competition competition \u003d jsonAdaptedCompetition.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (competitions.hasUniqueElement(competition)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_COMPETITION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            competitions.addUniqueElement(competition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitions;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * An Immutable Data that is serializable to JSON format."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public interface JsonSerializableData {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts the stored data into the model\u0027s {@code Data} object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableParticipationData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * An Immutable Person Data that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "@JsonRootName(value \u003d \"system\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonSerializableParticipationData implements JsonSerializableData {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PARTICIPATION \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        \"Participations list contains duplicate participation(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final List\u003cJsonAdaptedParticipation\u003e participations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Constructs a {@code JsonSerializableParticipationData} with the given participations."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSerializableParticipationData("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @JsonProperty(\"participations\") List\u003cJsonAdaptedParticipation\u003e participations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.participations.addAll(participations);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code ReadOnlyData} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableParticipationData}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSerializableParticipationData(ReadOnlyData\u003cParticipation\u003e source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        participations.addAll(source.getListOfElements().stream().map(JsonAdaptedParticipation::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cParticipation\u003e participations \u003d new Data();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participations;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts the stored data into the model\u0027s {@code Data} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data\u003cParticipation\u003e toModelType("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cParticipation\u003e participations \u003d new Data();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (JsonAdaptedParticipation jsonAdaptedParticipation : this.participations) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Participation participation \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                jsonAdaptedParticipation.toModelType(personReadOnlyData, competitionReadOnlyData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (participations.hasUniqueElement(participation)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PARTICIPATION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            participations.addUniqueElement(participation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participations;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePersonData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * An Immutable Person Data that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "@JsonRootName(value \u003d \"system\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "class JsonSerializablePersonData implements JsonSerializableData {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Constructs a {@code JsonSerializablePersonData} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSerializablePersonData(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Converts a given {@code ReadOnlyData} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePersonData}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSerializablePersonData(ReadOnlyData\u003cPerson\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.addAll(source.getListOfElements().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cPerson\u003e persons \u003d new Data();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : this.persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            if (persons.hasUniqueElement(person)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            persons.addUniqueElement(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return persons;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSystemStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.UniqueElement;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * A class to access Data data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonSystemStorage implements SystemStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSystemStorage.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path personDataFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path competitionDataFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path participationDataFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public JsonSystemStorage(Path personDataFilePath, Path competitionDataFilePath, Path participationDataFilePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.personDataFilePath \u003d personDataFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.competitionDataFilePath \u003d competitionDataFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.participationDataFilePath \u003d participationDataFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getPersonDataFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return personDataFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readData(personDataFilePath, JsonSerializablePersonData.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readData(filePath, JsonSerializablePersonData.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void savePersonData(ReadOnlyData\u003cPerson\u003e readOnlyData) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        saveData(new JsonSerializablePersonData(readOnlyData), personDataFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void savePersonData(ReadOnlyData\u003cPerson\u003e readOnlyData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        saveData(new JsonSerializablePersonData(readOnlyData), filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getCompetitionDataFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitionDataFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e readCompetitionData() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readData(competitionDataFilePath, JsonSerializableCompetitionData.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e readCompetitionData(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readData(filePath, JsonSerializableCompetitionData.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveCompetitionData(ReadOnlyData\u003cCompetition\u003e readOnlyData) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        saveData(new JsonSerializableCompetitionData(readOnlyData), competitionDataFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveCompetitionData(ReadOnlyData\u003cCompetition\u003e readOnlyData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        saveData(new JsonSerializableCompetitionData(readOnlyData), filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getParticipationDataFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return participationDataFilePath;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e readParticipationData("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readParticipationData("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            participationDataFilePath,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            personReadOnlyData,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            competitionReadOnlyData"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e readParticipationData("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path filePath,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Optional\u003cJsonSerializableParticipationData\u003e jsonData \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            JsonUtil.readJsonFile(filePath, JsonSerializableParticipationData.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!jsonData.isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return Optional.of(jsonData.get().toModelType(personReadOnlyData, competitionReadOnlyData));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveParticipationData(ReadOnlyData\u003cParticipation\u003e readOnlyData) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        saveData(new JsonSerializableParticipationData(readOnlyData), participationDataFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveParticipationData(ReadOnlyData\u003cParticipation\u003e readOnlyData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        saveData(new JsonSerializableParticipationData(readOnlyData), filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Similar to {@link #readPersonData()}, {@link #readCompetitionData()}}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private \u003cT extends UniqueElement, J extends JsonSerializableData\u003e Optional\u003cReadOnlyData\u003cT\u003e\u003e readData("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path filePath,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Class\u003cJ\u003e classOfData"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Optional\u003cJ\u003e jsonData \u003d JsonUtil.readJsonFile(filePath, classOfData);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        if (!jsonData.isPresent()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return Optional.of(jsonData.get().toModelType());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Similar to {@link #savePersonData(ReadOnlyData)}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveData(JsonSerializableData jsonSerializableData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(jsonSerializableData);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonUtil.saveJsonFile(jsonSerializableData, filePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 173
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public interface Storage extends SystemStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Manages storage of Data data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private SystemStorage systemStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public StorageManager(SystemStorage systemStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.systemStorage \u003d systemStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person Data methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getPersonDataFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return systemStorage.getPersonDataFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readPersonData(systemStorage.getPersonDataFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return systemStorage.readPersonData(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void savePersonData(ReadOnlyData\u003cPerson\u003e readOnlyData) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        systemStorage.savePersonData(readOnlyData, systemStorage.getPersonDataFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void savePersonData(ReadOnlyData\u003cPerson\u003e readOnlyData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        systemStorage.savePersonData(readOnlyData, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Competition Data methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getCompetitionDataFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return systemStorage.getCompetitionDataFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e readCompetitionData() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readCompetitionData(systemStorage.getCompetitionDataFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e readCompetitionData("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path filePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return systemStorage.readCompetitionData(filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveCompetitionData(ReadOnlyData\u003cCompetition\u003e readOnlyData) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        systemStorage.saveCompetitionData(readOnlyData, systemStorage.getCompetitionDataFilePath());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveCompetitionData(ReadOnlyData\u003cCompetition\u003e readOnlyData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        systemStorage.saveCompetitionData(readOnlyData, filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Participation Data methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path getParticipationDataFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return systemStorage.getParticipationDataFilePath();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e readParticipationData("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return readParticipationData("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            systemStorage.getParticipationDataFilePath(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            personReadOnlyData,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            competitionReadOnlyData"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e readParticipationData("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path filePath,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return systemStorage.readParticipationData(filePath, personReadOnlyData, competitionReadOnlyData);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveParticipationData(ReadOnlyData\u003cParticipation\u003e readOnlyData) throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        systemStorage.saveParticipationData(readOnlyData, systemStorage.getParticipationDataFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveParticipationData(ReadOnlyData\u003cParticipation\u003e readOnlyData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        systemStorage.saveParticipationData(readOnlyData, filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "ooimingsheng": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/SystemStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Represents a storage for {@link Data}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public interface SystemStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns the file path of the person data file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getPersonDataFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns the file path of the competition data file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getCompetitionDataFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns the file path of the participation data file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Path getParticipationDataFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns Data data as a {@link ReadOnlyData}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns Data data as a {@link ReadOnlyData}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Saves the given {@link ReadOnlyData} to the storage."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param readOnlyData cannot be null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void savePersonData(ReadOnlyData\u003cPerson\u003e readOnlyData) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void savePersonData(ReadOnlyData\u003cPerson\u003e readOnlyData, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns Data data as a {@link ReadOnlyData}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e readCompetitionData(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns Data data as a {@link ReadOnlyData}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Optional\u003cReadOnlyData\u003cCompetition\u003e\u003e readCompetitionData() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Saves the given {@link ReadOnlyData} to the storage."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param readOnlyData cannot be null."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void saveCompetitionData(ReadOnlyData\u003cCompetition\u003e readOnlyData) throws IOException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Saves the given {@link ReadOnlyData} to the storage."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param readOnlyData cannot be null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void saveCompetitionData(ReadOnlyData\u003cCompetition\u003e readOnlyData, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns Data data as a {@link ReadOnlyData}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e readParticipationData("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path filePath,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns Data data as a {@link ReadOnlyData}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    Optional\u003cReadOnlyData\u003cParticipation\u003e\u003e readParticipationData("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e personReadOnlyData,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cCompetition\u003e competitionReadOnlyData"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    ) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Saves the given {@link ReadOnlyData} to the storage."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param readOnlyData cannot be null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void saveParticipationData(ReadOnlyData\u003cParticipation\u003e readOnlyData) throws IOException;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Saves the given {@link ReadOnlyData} to the storage."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @param readOnlyData cannot be null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    void saveParticipationData(ReadOnlyData\u003cParticipation\u003e readOnlyData, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CompetitionCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * An UI component that displays information of a {@code Competition}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class CompetitionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String FXML \u003d \"CompetitionListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public final Competition competition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CompetitionCard(Competition competition, int displayedIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.competition \u003d competition;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        name.setText(competition.getName().toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        startDate.setText(competition.getStartDate().toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        endDate.setText(competition.getEndDate().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CompetitionCard card \u003d (CompetitionCard) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                \u0026\u0026 competition.equals(card.competition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CompetitionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " * Panel containing the list of competitions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class CompetitionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String FXML \u003d \"CompetitionListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private ListView\u003cCompetition\u003e competitionListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public CompetitionListPanel(ObservableList\u003cCompetition\u003e competitionList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        competitionListView.setItems(competitionList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        competitionListView.setCellFactory(listView -\u003e new CompetitionListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Competition} using a {@code CompetitionCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    class CompetitionListViewCell extends ListCell\u003cCompetition\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        protected void updateItem(Competition competition, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            super.updateItem(competition, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            if (empty || competition \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                setGraphic(new CompetitionCard(competition, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private CompetitionListPanel competitionListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ParticipationListPanel participationListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private StackPane competitionListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private StackPane participationListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        competitionListPanel \u003d new CompetitionListPanel(logic.getFilteredCompetitionList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        competitionListPanelPlaceholder.getChildren().add(competitionListPanel.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        participationListPanel \u003d new ParticipationListPanel(logic.getFilteredParticipationList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        participationListPanelPlaceholder.getChildren().add(participationListPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 7,
      "HoWeiChin": 7,
      "-": 193
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ParticipationCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * An UI component that displays information of a {@code Participation}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ParticipationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ParticipationCard.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String FXML \u003d \"ParticipationListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Participation participation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Label competition;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private Label attempts;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ParticipationCard(Participation participation, int displayedIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        this.participation \u003d participation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        name.setText(participation.getPerson().getName().toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        competition.setText(participation.getCompetition().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        attempts.setText(participation.getThreeLiftScore());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        if (!(other instanceof ParticipationCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        ParticipationCard card \u003d (ParticipationCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \u0026\u0026 participation.equals(card.participation);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ParticipationListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": " * Panel containing the list of Participations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ParticipationListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private static final String FXML \u003d \"ParticipationListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ListView\u003cParticipation\u003e participationListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public ParticipationListPanel(ObservableList\u003cParticipation\u003e participationList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        participationListView.setItems(participationList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        participationListView.setCellFactory(listView -\u003e new ParticipationListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     * {@code Participation} using a {@code ParticipationCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    class ParticipationListViewCell extends ListCell\u003cParticipation\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        protected void updateItem(Participation participation, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            super.updateItem(participation, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            if (empty || participation \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                setGraphic(new ParticipationCard(participation, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PersonCard.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Data level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label dateOfBirth;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        name.setText(person.getName().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        dateOfBirth.setText(person.getDateOfBirth().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        gender.setText(person.getGender().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 9,
      "-": 56,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/main/resources/view/CompetitionListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDate\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 35
    }
  },
  {
    "path": "src/main/resources/view/CompetitionListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "  \u003cListView fx:id\u003d\"competitionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        \u003cVBox fx:id\u003d\"competitionList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "          \u003cStackPane fx:id\u003d\"competitionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003cVBox fx:id\u003d\"participationList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "belbel98"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "belbel98"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "belbel98"
        },
        "content": "          \u003cStackPane fx:id\u003d\"participationListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "belbel98": 7,
      "HoWeiChin": 7,
      "-": 60
    }
  },
  {
    "path": "src/main/resources/view/ParticipationListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cLabel fx:id\u003d\"competition\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$competition\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "            \u003cLabel fx:id\u003d\"attempts\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$attempts\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "belbel98": 35
    }
  },
  {
    "path": "src/main/resources/view/ParticipationListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    \u003cListView fx:id\u003d\"participationListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "belbel98": 9
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfBirth\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "      \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.storage.JsonSerializableData;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.storage.JsonSystemStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSystemStorage jsonSystemStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSystemStorage("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                temporaryFolder.resolve(\"tempPersons.json\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                temporaryFolder.resolve(\"tempCompetitions.json\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                temporaryFolder.resolve(\"tempParticipations.json\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        StorageManager storage \u003d new StorageManager(jsonSystemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // Setup LogicManager with JsonSystemIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSystemStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSystemIoExceptionThrowingStub("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionPersons.json\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionCompetitions.json\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionParticipations.json\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + DOB_DESC_AMY + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new ModelManager(model.getPersons(), model.getCompetitions(), model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static class JsonSystemIoExceptionThrowingStub extends JsonSystemStorage {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        private JsonSystemIoExceptionThrowingStub("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Path personDataFilePath,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Path competitionDataFilePath,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Path participationDataFilePath"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            super(personDataFilePath, competitionDataFilePath, participationDataFilePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void saveData(JsonSerializableData jsonSerializableData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 4,
      "-": 143,
      "ooimingsheng": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model \u003d new ModelManager(getTypicalPersonData(), getTypicalCompetitionData(), new Data(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                model.getPersons(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                model.getCompetitions(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                model.getParticipations(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Person personInList \u003d model.getPersons().getListOfElements().get(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "ooimingsheng": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void setUserPrefsFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d Person \u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void setPersons(ReadOnlyData\u003cPerson\u003e newData) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public ReadOnlyData\u003cPerson\u003e getPersons() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d Competition \u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void addCompetition(Competition competition) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void setCompetitions(ReadOnlyData\u003cCompetition\u003e newData) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public ReadOnlyData\u003cCompetition\u003e getCompetitions() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public boolean hasCompetition(Competition competition) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void deleteCompetition(Competition target) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void setCompetition(Competition target, Competition editedCompetition) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public ObservableList\u003cCompetition\u003e getFilteredCompetitionList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void updateFilteredCompetitionList(Predicate\u003cCompetition\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d Participation \u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void addParticipation(Participation person) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void setParticipations(ReadOnlyData\u003cParticipation\u003e newData) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public ReadOnlyData\u003cParticipation\u003e getParticipations() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public boolean hasParticipation(Participation person) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void deleteParticipation(Participation target) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void deleteDependentParticipations(Competition competition) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void deleteDependentParticipations(Person person) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void setParticipation(Participation target, Participation editedParticipation) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public ObservableList\u003cParticipation\u003e getFilteredParticipationList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public void updateFilteredParticipationList(Predicate\u003cParticipation\u003e predicate) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return this.person.isSameElement(person);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSameElement);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public ReadOnlyData\u003cPerson\u003e getPersons() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            return new Data();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    // TODO: private class ModelStubWithCompetition extends ModelStub"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    // TODO: private class ModelStubWithParticipation extends ModelStub"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 184,
      "ooimingsheng": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model model \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTypicalPersonData(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new Data(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalPersonData(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new Data(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new UserPrefs()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        expectedModel.setPersons(new Data());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "ooimingsheng": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String VALID_DOB_AMY \u003d \"11/02/1995\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String VALID_DOB_BOB \u003d \"13/01/1995\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"female\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"male\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String DOB_DESC_AMY \u003d \" \" + PREFIX_DOB + VALID_DOB_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String DOB_DESC_BOB \u003d \" \" + PREFIX_DOB + VALID_DOB_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String INVALID_DOB_DESC \u003d \" \" + PREFIX_DOB + \"911a\"; // does not follow DD/MM/YYYY format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"shemale\"; // only male or female allowed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withDateOfBirth(VALID_DOB_AMY).withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withDateOfBirth(VALID_DOB_BOB).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data expectedAddressBook \u003d new Data(actualModel.getPersons());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getPersons());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        final String[] splitName \u003d person.getName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 16,
      "-": 96,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cPerson\u003e samplePersonData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cCompetition\u003e sampleCompetitionData \u003d getTypicalCompetitionData();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cParticipation\u003e sampleParticipationData \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new Data(SampleDataUtil.getSampleParticipationData(samplePersonData, sampleCompetitionData));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new ModelManager("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalPersonData(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            sampleParticipationData,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new UserPrefs()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPersons(), model.getCompetitions(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPersons(), model.getCompetitions(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPersons().getListOfElements().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 104,
      "ooimingsheng": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cPerson\u003e samplePersonData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cCompetition\u003e sampleCompetitionData \u003d getTypicalCompetitionData();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cParticipation\u003e sampleParticipationData \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new Data(SampleDataUtil.getSampleParticipationData(samplePersonData, sampleCompetitionData));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new ModelManager("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalPersonData(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            sampleParticipationData,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new UserPrefs()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Data(model.getPersons()), new Data(model.getCompetitions()),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Data(model.getPersons()), new Data(model.getCompetitions()),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Data(model.getPersons()), new Data(model.getCompetitions()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Data(model.getPersons()), new Data(model.getCompetitions()),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Person personInList \u003d model.getPersons().getListOfElements().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPersons().getListOfElements().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 3,
      "-": 159,
      "ooimingsheng": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // different DOB -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // different gender -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 6,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cPerson\u003e samplePersonData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cCompetition\u003e sampleCompetitionData \u003d getTypicalCompetitionData();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data\u003cParticipation\u003e sampleParticipationData \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new Data(SampleDataUtil.getSampleParticipationData(samplePersonData, sampleCompetitionData));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new ModelManager("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalPersonData(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            sampleParticipationData,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new UserPrefs()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Model expectedModel \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        new ModelManager(model.getPersons(), model.getCompetitions(), model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "ooimingsheng": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalCompetitions.getTypicalCompetitionData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.participation.Participation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cPerson\u003e samplePersonData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cCompetition\u003e sampleCompetitionData \u003d getTypicalCompetitionData();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cParticipation\u003e sampleParticipationData \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new Data(SampleDataUtil.getSampleParticipationData(samplePersonData, sampleCompetitionData));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        model \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTypicalPersonData(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTypicalCompetitionData(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                sampleParticipationData,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        expectedModel \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new ModelManager(model.getPersons(), model.getCompetitions(), model.getParticipations(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "ooimingsheng": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + DOB_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + DOB_DESC_BOB"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                + GENDER_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + DOB_DESC_BOB + GENDER_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // missing DOB prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_DOB_BOB + GENDER_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // missing gender prefix"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DOB_DESC_BOB + VALID_GENDER_BOB , expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_DOB_BOB + VALID_GENDER_BOB, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DOB_DESC_BOB + GENDER_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // invalid DOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_DOB_DESC + GENDER_DESC_BOB, CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_DOB_DESC + GENDER_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + DOB_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 24,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DOB_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DOB_DESC, CustomDate.MESSAGE_CONSTRAINTS); // invalid DOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC, Gender.MESSAGE_CONSTRAINTS); // invalid gender"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // invalid DOB followed by valid gender"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DOB_DESC + GENDER_DESC_AMY, CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // valid DOB followed by invalid DOB. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, \"1\" + DOB_DESC_BOB + INVALID_DOB_DESC, CustomDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DOB_DESC"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                + VALID_GENDER_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY + DOB_DESC_BOB + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withDateOfBirth(VALID_DOB_BOB).withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DOB_DESC_BOB;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // DOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DOB_DESC_AMY;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withDateOfBirth(VALID_DOB_AMY).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // gender"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DOB_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                + DOB_DESC_BOB + DOB_DESC_BOB + GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withDateOfBirth(VALID_DOB_BOB)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DOB_DESC + DOB_DESC_BOB;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_DOB_DESC + GENDER_DESC_BOB + DOB_DESC_BOB;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withDateOfBirth(VALID_DOB_BOB)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 43,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListPartCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "belbel98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.logic.commands.ListPartCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "belbel98"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "belbel98"
        },
        "content": "public class ListPartCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    private ListPartCommandParser parser \u003d new ListPartCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void constructor_nullName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void parse_emptyArg_returnListPartCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        assertParseSuccess(parser, \"\", new ListPartCommand());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void parse_validArgs_returnsListPartCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String userInput \u003d \"Test of Strength 2019\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        ListPartCommand expectedListPartCommand \u003d new ListPartCommand(new Name(userInput));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedListPartCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "belbel98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    public void parse_invalidCompetitionAsArgs() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        String userInput \u003d \"naijfbgaf\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "belbel98"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_COMPETITION_NOT_FOUND + userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "belbel98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "belbel98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "belbel98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "belbel98": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String INVALID_DOB \u003d \"1.2.1995\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String INVALID_GENDER \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String VALID_DOB \u003d \"12/03/2012\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String VALID_GENDER \u003d \"male\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DOB));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate expectedDateOfBirth \u003d new CustomDate(VALID_DOB);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertEquals(expectedDateOfBirth, ParserUtil.parseDate(VALID_DOB));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String dobWithWhitespace \u003d WHITESPACE + VALID_DOB + WHITESPACE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        CustomDate expectedDateOfBirth \u003d new CustomDate(VALID_DOB);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertEquals(expectedDateOfBirth , ParserUtil.parseDate(dobWithWhitespace));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseGender_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGender(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseGender_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGender(INVALID_GENDER));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void parseGender_validValueWithoutWhitespace_returnsGender() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Gender expectedGender \u003d VALID_GENDER \u003d\u003d \"male\" ? Gender.MALE : Gender.FEMALE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(VALID_GENDER));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 24,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SystemParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class SystemParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private final SystemParser parser \u003d new SystemParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 2,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/DataTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class DataTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final Data\u003cPerson\u003e persons \u003d new Data\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(Collections.emptyList(), persons.getListOfElements());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e persons.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data newData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(newData, persons);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        DataStub newData \u003d new DataStub(newPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e persons.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e persons.hasUniqueElement(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse(persons.hasUniqueElement(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.addUniqueElement(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(persons.hasUniqueElement(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        persons.addUniqueElement(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(persons.hasUniqueElement(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e persons.getListOfElements().remove(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * A stub ReadOnlyData whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static class DataStub implements ReadOnlyData {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        DataStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        public ObservableList\u003cPerson\u003e getListOfElements() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 3,
      "-": 75,
      "ooimingsheng": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalCompetitions.NUS_OPEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.testutil.DataBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(new Data(), new Data(modelManager.getPersons()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        userPrefs.setPersonDataFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        userPrefs.setPersonDataFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefsFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        modelManager.setUserPrefsFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(path, modelManager.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data personData \u003d new DataBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data competitionData \u003d new DataBuilder().withCompetition(NUS_OPEN).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data participationData \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new Data(SampleDataUtil.getSampleParticipationData(personData, competitionData));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data differentPersonData \u003d new Data();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data differentCompetitionData \u003d new Data();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data differentParticipationData \u003d new Data();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        modelManager \u003d new ModelManager(personData, competitionData, participationData, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(personData, competitionData, participationData, userPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            modelManager.equals("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new ModelManager(differentPersonData, competitionData, participationData, userPrefs)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            )"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            modelManager.equals("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new ModelManager(personData, differentCompetitionData, participationData, userPrefs)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            )"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            modelManager.equals("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new ModelManager(personData, competitionData, differentParticipationData, userPrefs)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            )"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String[] keywords \u003d ALICE.getName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            modelManager.equals("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new ModelManager(personData, differentCompetitionData, participationData, userPrefs)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        differentUserPrefs.setPersonDataFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            modelManager.equals("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                new ModelManager(personData, competitionData, participationData, differentUserPrefs)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            )"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 1,
      "-": 116,
      "ooimingsheng": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPersonDataFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "ooimingsheng": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // Keywords match dob and gender, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12/02/1995\", \"female\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withDateOfBirth(\"12/02/1995\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withGender(\"female\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 4,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(ALICE.isSameElement(ALICE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse(ALICE.isSameElement(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // different DOB and gender -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                .withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse(ALICE.isSameElement(editedAlice));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse(ALICE.isSameElement(editedAlice));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // same name, same DOB, different gender -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(ALICE.isSameElement(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // same name, different DOB, same gender -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(ALICE.isSameElement(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        // different name, same DOB, same gender -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        assertFalse(ALICE.isSameElement(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // different DOB -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // different gender -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 14,
      "-": 54,
      "ooimingsheng": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniqueElementListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.UniqueElementList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "public class UniqueElementListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private final UniqueElementList\u003cPerson\u003e uniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setElement(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setElement(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(ElementNotFoundException.class, () -\u003e uniquePersonList.setElement(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniquePersonList.setElement(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        UniqueElementList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDateOfBirth(VALID_DOB_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniquePersonList.setElement(ALICE, editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        UniqueElementList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniquePersonList.setElement(ALICE, BOB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        UniqueElementList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniquePersonList.setElement(ALICE, BOB));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(ElementNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        UniqueElementList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setElements((UniqueElementList\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        UniqueElementList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniquePersonList.setElements(expectedUniquePersonList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setElements((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        uniquePersonList.setElements(personList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        UniqueElementList\u003cPerson\u003e expectedUniquePersonList \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniquePersonList.setElements(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 4,
      "-": 140,
      "ooimingsheng": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String INVALID_DOB \u003d \"+65/12/34\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"hemale\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String VALID_DOB \u003d BENSON.getDateOfBirth().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_DOB, VALID_GENDER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_DOB, VALID_GENDER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void toModelType_invalidDateOfBirth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_DOB, VALID_GENDER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String expectedMessage \u003d CustomDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void toModelType_nullDateOfBirthThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_GENDER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CustomDate.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_DOB, INVALID_GENDER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_DOB, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 20,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializablePersonDataTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonSerializablePersonDataTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePersonDataTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalData.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonData.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonData.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSerializablePersonData dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                JsonSerializablePersonData.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data typicalPersonsAddressBook \u003d TypicalPersons.getTypicalPersonData();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSerializablePersonData dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                JsonSerializablePersonData.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSerializablePersonData dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                JsonSerializablePersonData.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePersonData.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "ooimingsheng": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSystemStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class JsonSystemStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSystemStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPersonData(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Reads the person data at the specified {@code filePath}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private java.util.Optional\u003cReadOnlyData\u003cPerson\u003e\u003e readPersonData(String filePath) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new JsonSystemStorage("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Paths.get(filePath),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Paths.get(\"SomeFile.json\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            Paths.get(\"SomeOtherFile.json\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ).readPersonData(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertFalse(readPersonData(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPersonData(\"notJsonFormatData.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPersonData(\"invalidPersonData.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPersonData(\"invalidAndValidPersonData.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path personDataFilePath \u003d testFolder.resolve(\"TempPersonData.json\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path competitionDataFilePath \u003d testFolder.resolve(\"TempCompetitionData.json\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Path participationDataFilePath \u003d testFolder.resolve(\"TempParticipationData.json\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cPerson\u003e personData \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSerializablePersonData originalJsonSerializablePersonData \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSerializablePersonData(personData);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSystemStorage jsonSystemStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSystemStorage("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                personDataFilePath,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                competitionDataFilePath,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                participationDataFilePath"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        jsonSystemStorage.saveData(originalJsonSerializablePersonData, personDataFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData readBack \u003d jsonSystemStorage.readPersonData(personDataFilePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(personData, new Data(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        personData.addUniqueElement(HOON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        personData.removeElement(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSerializablePersonData modifiedJsonSerializablePersonData \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSerializablePersonData(personData);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        jsonSystemStorage.saveData(modifiedJsonSerializablePersonData, personDataFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        readBack \u003d jsonSystemStorage.readPersonData(personDataFilePath).get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(personData, new Data(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        personData.addUniqueElement(IDA);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        jsonSystemStorage.savePersonData(personData); // file path not specified"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        readBack \u003d jsonSystemStorage.readPersonData().get(); // file path not specified"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(personData, new Data(readBack));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePersonData(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Saves {@code data} at the specified {@code filePath}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private void savePersonData(ReadOnlyData data, String filePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSystemStorage("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                Paths.get(filePath),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                Paths.get(\"SomeFile.json\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                Paths.get(\"SomeOtherFile.json\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            ).saveData(new JsonSerializablePersonData(data), addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePersonData(new Data(), null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        userPrefs.setPersonDataFilePath(Paths.get(\"personData.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        userPrefs.setCompetitionDataFilePath(Paths.get(\"competitionData.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        userPrefs.setParticipationDataFilePath(Paths.get(\"participationData.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "ooimingsheng": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.ReadOnlyData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        JsonSystemStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            new JsonSystemStorage("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTempFilePath(\"tempPersons\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTempFilePath(\"tempCompetitions\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "                getTempFilePath(\"tempParticipations\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         * {@link JsonSystemStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonSystemStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data\u003cPerson\u003e original \u003d getTypicalPersonData();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        storageManager.savePersonData(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        ReadOnlyData\u003cPerson\u003e retrieved \u003d storageManager.readPersonData().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertEquals(original, new Data(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        assertNotNull(storageManager.getPersonDataFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "ooimingsheng": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CompetitionBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * A utility class to help with building Competition objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class CompetitionBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"NUS Powerlifting Open\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CustomDate DEFAULT_START_DATE \u003d new CustomDate(\"01/01/2019\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final CustomDate DEFAULT_END_DATE \u003d new CustomDate(\"01/01/2019\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private CustomDate startDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private CustomDate endDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CompetitionBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        startDate \u003d DEFAULT_START_DATE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        endDate \u003d DEFAULT_END_DATE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Initializes the CompetitionBuilder with the data of {@code competitionToCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CompetitionBuilder(Competition competitionToCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        name \u003d competitionToCopy.getName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        startDate \u003d competitionToCopy.getStartDate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        endDate \u003d competitionToCopy.getEndDate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Sets the {@code Name} of the {@code Competition} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CompetitionBuilder withName(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Sets the {@code StartDate} of the {@code Competition} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CompetitionBuilder withStartDate(String dateString) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.startDate \u003d new CustomDate(dateString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Sets the {@code EndDate} of the {@code Competition} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public CompetitionBuilder withEndDate(String dateString) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.endDate \u003d new CustomDate(dateString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Competition build() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new Competition(name, startDate, endDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DataBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " *     {@code Data ab \u003d new DataBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class DataBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private Data data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public DataBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        data \u003d new Data();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public DataBuilder(Data data) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Adds a new {@code Person} to the {@code Data} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public DataBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        data.addUniqueElement(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Adds a new {@code Competition} to the {@code Data} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public DataBuilder withCompetition(Competition competition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        data.addUniqueElement(competition);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public Data build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.setDateOfBirth(person.getDateOfBirth());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.setGender(person.getGender());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Sets the {@code dateOfBirth} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditPersonDescriptorBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.setDateOfBirth(new CustomDate(dateOfBirth));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Sets the {@code gender} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public EditPersonDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        Gender genderEnum;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        if (Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            if (gender.toLowerCase().equals(\"male\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                genderEnum \u003d Gender.MALE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "                genderEnum \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            descriptor.setGender(genderEnum);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 16,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.CustomDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Name DEFAULT_NAME \u003d new Name(\"Alice Pline\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final CustomDate DEFAULT_DOB \u003d new CustomDate(\"12/02/1995\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Gender DEFAULT_GENDER \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private CustomDate dateOfBirth;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        dateOfBirth \u003d DEFAULT_DOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        gender \u003d DEFAULT_GENDER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        dateOfBirth \u003d personToCopy.getDateOfBirth();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        gender \u003d personToCopy.getGender();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Sets the {@code DateOfBirth} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public PersonBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.dateOfBirth \u003d new CustomDate(dateOfBirth);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        this.gender \u003d Gender.getGenderCorrespondingToName(gender);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        return new Person(name, dateOfBirth, gender);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 22,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().toString() + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        sb.append(PREFIX_DOB + person.getDateOfBirth().toString() + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        sb.append(PREFIX_GENDER + person.getGender().toString() + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name).append(\" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.getDateOfBirth().ifPresent(dateOfBirth -\u003e sb.append(PREFIX_DOB).append(dateOfBirth).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender).append(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 8,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCompetitions.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.competition.Competition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " * A utility class containing a list of {@code Competition} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "public class TypicalCompetitions {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static final Competition NUS_OPEN \u003d new CompetitionBuilder().withName(\"NUS Powerlifting Open 2019\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        .withStartDate(\"08/05/2019\").withEndDate(\"08/09/2019\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    private TypicalCompetitions() {} // prevents instantiation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns an {@code Data} with all the typical competitions."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static Data\u003cCompetition\u003e getTypicalCompetitionData() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data competitions \u003d new Data();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        for (Competition competition : getTypicalCompetitions()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            competitions.addUniqueElement(competition);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return competitions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static List\u003cCompetition\u003e getTypicalCompetitions() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(NUS_OPEN));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ooimingsheng": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_AMY;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOB_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "import seedu.address.model.Data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            .withDateOfBirth(\"01/01/2019\").withGender(\"female\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            .withDateOfBirth(\"01/02/2018\").withGender(\"male\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        .withDateOfBirth(\"05/01/1992\").withGender(\"male\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        .withDateOfBirth(\"17/11/1982\").withGender(\"male\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        .withDateOfBirth(\"03/05/2010\").withGender(\"female\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        .withDateOfBirth(\"01/10/2010\").withGender(\"female\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "        .withDateOfBirth(\"19/06/2019\").withGender(\"male\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withDateOfBirth(\"07/07/2007\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withDateOfBirth(\"08/08/2008\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withDateOfBirth(VALID_DOB_AMY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            .withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withDateOfBirth(VALID_DOB_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HoWeiChin"
        },
        "content": "            .withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "     * Returns an {@code Data} with all the typical persons."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "    public static Data\u003cPerson\u003e getTypicalPersonData() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "        Data ab \u003d new Data();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ooimingsheng"
        },
        "content": "            ab.addUniqueElement(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HoWeiChin": 28,
      "-": 37,
      "ooimingsheng": 5
    }
  }
]
